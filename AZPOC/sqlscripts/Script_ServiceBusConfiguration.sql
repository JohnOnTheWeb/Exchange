IF ( DB_ID( N'Azure POC_ServiceBusConfiguration' ) IS NULL )
	CREATE DATABASE [Azure POC_ServiceBusConfiguration]

GO

USE [Azure POC_ServiceBusConfiguration]

GO

IF SCHEMA_ID( 'DataFix' ) IS NULL
	EXECUTE( 'CREATE SCHEMA DataFix' )
GO

--
-- Data Fix Script Execution Log Table
--
IF OBJECT_ID (N'[DataFix].[Log]', N'U') IS NULL
	BEGIN
	--
	-- The table does not exist so create it using the final version
	--
	CREATE TABLE [DataFix].[Log]
	(
	[TrackingID] [uniqueidentifier] NOT NULL,
	[Section] [int] NOT NULL,
	[Completed] [datetime] NOT NULL,
	[Comment] [nvarchar](255) NULL,
	)

	END
/*
ELSE
BEGIN
	--
	-- A version of the table exists so the current version must be determined and alterations made
	--
END
*/

GO

--
-- Data Fix Script Execution Tracking Table
--
IF OBJECT_ID (N'[DataFix].[Tracking]', N'U') IS NULL
	BEGIN
	--
	-- The table does not exist so create it using the final version
	--
	CREATE TABLE [DataFix].[Tracking]
	(
	[TrackingID] [uniqueidentifier] NOT NULL,
	[ReferenceID] [nchar](10) NOT NULL,
	[Author] [nvarchar](50) NOT NULL,
	)

	END
/*
ELSE
BEGIN
	--
	-- A version of the table exists so the current version must be determined and alterations made
	--
END
*/

GO

IF OBJECT_ID( N'[dbo].[Active_Attributes]', N'U' ) IS NULL
	CREATE TABLE [dbo].[Active_Attributes]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[ChangeSetId] INT NULL,
		[IsActive] BIT NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
ELSE
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Attributes]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_Attributes] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Attributes]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_Attributes] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Attributes]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_Attributes] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Attributes]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Active_Attributes] ADD [PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )
END
GO

IF OBJECT_ID( N'[dbo].[Active_FilterAttributeValues]', N'U' ) IS NULL
	CREATE TABLE [dbo].[Active_FilterAttributeValues]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[FilterId] [uniqueidentifier] NOT NULL,
		[AttributeId] [uniqueidentifier] NOT NULL,
		[Value] [varchar](max) NOT NULL,
		[ChangeSetId] [INT] NULL,
		[IsActive] [BIT] NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
ELSE
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_FilterAttributeValues]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_FilterAttributeValues] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_FilterAttributeValues]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_FilterAttributeValues] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_FilterAttributeValues]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_FilterAttributeValues] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_FilterAttributeValues]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Active_FilterAttributeValues] ADD [PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )
END
GO


IF OBJECT_ID( N'[dbo].[Active_Filters]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Active_Filters]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[GroupId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[MachineName] [varchar](32) NULL,
		[AppName] [varchar](255) NULL,
		[AppPath] [varchar](255) NULL,
		[AppConfigFilePath] [varchar](255) NULL,
		[AppVersion] [varchar](25) NULL,
		[AppUser] [varchar](275) NULL, -- [ Note: full username Domain\\Username so it must be increased to 253 + 2 + 20 chars ]
		[ChangeSetId] [INT] NULL,
		[IsActive] [BIT] NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
END
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Filters]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_Filters] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Filters]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_Filters] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Filters]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_Filters] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )

	-- Increase 'AppUser' column size [ Note: full username Domain\\Username so it must be increased to 253 + 2 + 20 chars ]
	IF EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Filters]', N'U' ) AND [name] = 'AppUser' )
		ALTER TABLE [dbo].[Active_Filters] ALTER COLUMN [AppUser] VARCHAR(275)

	--	Add 'GroupId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Filters]', N'U' ) AND [name] = 'GroupId' )
		ALTER TABLE [dbo].[Active_Filters] ADD [GroupId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Filters]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Active_Filters] ADD [PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )
END
GO

GO


IF OBJECT_ID( N'[dbo].[Active_Fragments]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Active_Fragments]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[SectionId] [uniqueidentifier] NOT NULL,
		[RootXmlNode] [varchar](1024) NULL,
		[Contents] [xml] NOT NULL,
		[ChangeSetId] [INT] NULL,
		[IsActive] [BIT] NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 ),
		[AddMultiple] [BIT] NOT NULL DEFAULT( 0 )
	)
END
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Fragments]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_Fragments] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Fragments]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_Fragments] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Fragments]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_Fragments] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )

	--	Add 'AddMultiple' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Fragments]', N'U' ) AND [name] = 'AddMultiple' )
		ALTER TABLE [dbo].[Active_Fragments] ADD [AddMultiple] BIT NOT NULL DEFAULT( 0 )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Fragments]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Active_Fragments] ADD [PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )
END
GO

GO


IF OBJECT_ID( N'[dbo].[Active_GroupFilters]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Active_GroupFilters]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[GroupId] [uniqueidentifier] NOT NULL,
		[FilterId] [uniqueidentifier] NOT NULL,
		[ChangeSetId] [INT] NULL,
		[IsActive] [BIT] NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
END
ELSE
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupFilters]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_GroupFilters] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupFilters]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_GroupFilters] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupFilters]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_GroupFilters] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )
END
GO

GO


IF OBJECT_ID( N'[dbo].[Active_GroupFragments]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Active_GroupFragments]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[GroupId] [uniqueidentifier] NOT NULL,
		[FragmentId] [uniqueidentifier] NOT NULL,
		[ChangeSetId] [INT] NULL,
		[IsActive] [BIT] NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
END
ELSE
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupFragments]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_GroupFragments] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupFragments]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_GroupFragments] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupFragments]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_GroupFragments] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupFragments]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Active_GroupFragments] ADD [PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )
END
GO

GO


IF OBJECT_ID( N'[dbo].[Active_GroupGroups]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Active_GroupGroups]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[GroupId] [uniqueidentifier] NOT NULL,
		[ChildGroupId] [uniqueidentifier] NOT NULL,
		[ChangeSetId] [INT] NULL,
		[IsActive] [BIT] NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
END
ELSE
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupGroups]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_GroupGroups] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupGroups]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_GroupGroups] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupGroups]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_GroupGroups] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupGroups]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Active_GroupGroups] ADD [PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )
END
GO

GO


IF OBJECT_ID( N'[dbo].[Active_GroupMacroValues]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Active_GroupMacroValues]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[GroupId] [uniqueidentifier] NOT NULL,
		[MacroId] [uniqueidentifier] NOT NULL,
		[Value] [varchar](max) NOT NULL,
		[ChangeSetId] [INT] NULL,
		[IsActive] [BIT] NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
END
ELSE
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupMacroValues]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_GroupMacroValues] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupMacroValues]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_GroupMacroValues] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupMacroValues]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_GroupMacroValues] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_GroupMacroValues]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Active_GroupMacroValues] ADD [PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )
END
GO

GO


IF OBJECT_ID( N'[dbo].[Active_Groups]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Active_Groups]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[GroupTemplateId] [uniqueidentifier] NULL,
		[IsRootGroup] [bit] NOT NULL,
		[ChangeSetId] INT NULL,
		[IsActive] BIT NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
END
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Groups]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_Groups] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Groups]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_Groups] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Groups]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_Groups] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Groups]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Active_Groups] ADD [PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )
END
GO

GO


IF OBJECT_ID( N'[dbo].[Active_Macros]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Active_Macros]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[ValueType] [varchar](1024) NOT NULL,
		[ChangeSetId] INT NULL,
		[IsActive] BIT NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
END
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Macros]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_Macros] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Macros]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_Macros] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Macros]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_Macros] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Macros]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Active_Macros] ADD [PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )
END
GO

GO

IF OBJECT_ID( N'[dbo].[Active_PackageDependencies]', N'U' ) IS NULL
--BEGIN
	CREATE TABLE [dbo].[Active_PackageDependencies]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL,
		[DependencyId] [uniqueidentifier] NOT NULL,
		[ChangeSetId] [INT] NULL,
		[IsActive] [BIT] NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
--END
--ELSE
--BEGIN
--END
GO

IF OBJECT_ID( N'[dbo].[Active_Packages]', N'U' ) IS NULL
--BEGIN
	CREATE TABLE [dbo].[Active_Packages]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[Version] [varchar](43) NOT NULL,
		[Type] [int] NOT NULL,
		[ChangeSetId] INT NULL,
		[IsActive] BIT NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
--END
--ELSE
--BEGIN
--END
GO


IF OBJECT_ID( N'[dbo].[Active_Sections]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Active_Sections]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[SectionGroupName] [varchar](50) NULL,
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[HandlerType] [varchar](1024) NOT NULL,
		[ConfigFile] [varchar](255) NOT NULL,
		[IsLegacySection] [bit] NOT NULL,
		[IsRemoteOnly] [bit] NOT NULL,
		[ConfigurationHelperType] [varchar](1024) NULL,
		[SectionAttributes] [varchar](1024) NULL,
		[ChangeSetId] INT NULL,
		[IsActive] BIT NOT NULL DEFAULT( 1 ),
		[IsHistorical] [BIT] NOT NULL DEFAULT( 0 )
	)
END
ELSE
BEGIN
	--	Add 'ChangeSetId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Sections]', N'U' ) AND [name] = 'ChangeSetId' )
		ALTER TABLE [dbo].[Active_Sections] ADD [ChangeSetId] INT NULL

	--	Add 'IsActive' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Sections]', N'U' ) AND [name] = 'IsActive' )
		ALTER TABLE [dbo].[Active_Sections] ADD [IsActive] BIT NOT NULL DEFAULT( 1 )

	--	Add 'IsHistorical' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Sections]', N'U' ) AND [name] = 'IsHistorical' )
		ALTER TABLE [dbo].[Active_Sections] ADD [IsHistorical] BIT NOT NULL DEFAULT( 0 )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Active_Sections]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Active_Sections] ADD [PackageId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )
END
GO

GO

IF OBJECT_ID( N'[dbo].[Active_SectionVersions]', N'U' ) IS NULL
	CREATE TABLE [dbo].[Active_SectionVersions]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[SectionId] [uniqueidentifier] NOT NULL,
		[Version] [int] NOT NULL
	)
--ELSE
--BEGIN	
--END
GO

IF OBJECT_ID( N'[dbo].[Certificates]', N'U' ) IS NULL
	CREATE TABLE [dbo].[Certificates]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[Type] [varchar](50) NOT NULL,
		[Thumbprint] [varchar](50) NOT NULL,
		[CertificateName] [varchar](500) NOT NULL,
		[Contents] [varchar](max) NOT NULL,
		[Remarks] [varchar](max) NULL
	)
--ELSE
--BEGIN
--END
GO

IF OBJECT_ID( N'[dbo].[Locks]', N'U' ) IS NULL
	CREATE TABLE [dbo].[Locks]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[ChangeSetId] [int] NOT NULL,
		[DeployingDateTime] [datetime] NOT NULL
	)
--ELSE
--BEGIN
--END
GO

IF OBJECT_ID( N'[dbo].[Pending_Attributes]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Pending_Attributes]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NULL,
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL
	)
END
ELSE
BEGIN
	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_Attributes]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Pending_Attributes] ADD [PackageId] [uniqueidentifier] NULL
END
GO

IF OBJECT_ID( N'[dbo].[Pending_Changesets]', N'U' ) IS NULL
	CREATE TABLE [dbo].[Pending_Changesets]
	(
		[ChangeSetId] [int] IDENTITY(1,1) NOT NULL,
		[CreatedByUserName] [varchar](50) NOT NULL,
		[CreatedDateTime] [datetime] NOT NULL,
		[ScheduledByUserName] [varchar](50) NULL,
		[ScheduledDateTime] [datetime] NULL,
		[DeployedByUserName] [varchar](50) NULL,
		[DeployedDateTime] [datetime] NULL,
		[Comment] [varchar](1024) NULL
	)
ELSE
BEGIN	

	--Remove Invalid Changeset Column
	/*
	In CREATE statement of previous version of the script, default value constraint was called DF_PendingChangesets_InvalidChangeset
	and if column is added using ALTER statement, default value constraint was called DF_PendingChangesets_IsInvalidChangeset.
	For this reason, both constraints need to be checked and removed
	*/

	IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PendingChangesets_InvalidChangeset]') AND type = 'D')
		ALTER TABLE [dbo].[Pending_Changesets] DROP CONSTRAINT [DF_PendingChangesets_InvalidChangeset]
		
	IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PendingChangesets_IsInvalidChangeset]') AND type = 'D')
		ALTER TABLE [dbo].[Pending_Changesets] DROP CONSTRAINT [DF_PendingChangesets_IsInvalidChangeset]
		
	IF COLUMNPROPERTY( OBJECT_ID( N'[dbo].[Pending_Changesets]', N'U' ), 'IsInvalidChangeset', 'ColumnID' ) IS NOT NULL
		ALTER TABLE [dbo].[Pending_Changesets] DROP COLUMN [IsInvalidChangeset]

	--	Add 'Comment' column if it does not exist
	IF COLUMNPROPERTY( OBJECT_ID( N'[dbo].[Pending_Changesets]', N'U' ), 'Comment', 'ColumnID' ) IS NULL
		ALTER TABLE [dbo].[Pending_Changesets] ADD [Comment] [varchar](1024) NULL
END

GO

IF OBJECT_ID( N'[dbo].[Pending_FilterAttributeValues]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Pending_FilterAttributeValues]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NULL,
		[FilterId] [uniqueidentifier] NOT NULL,
		[AttributeId] [uniqueidentifier] NOT NULL,
		[Value] [varchar](max) NOT NULL
	)
END
ELSE
BEGIN
	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_FilterAttributeValues]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Pending_FilterAttributeValues] ADD [PackageId] [uniqueidentifier] NULL
END
GO

IF OBJECT_ID( N'[dbo].[Pending_Filters]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Pending_Filters]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NULL,
		[GroupId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' ),
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[MachineName] [varchar](32) NULL,
		[AppName] [varchar](255) NULL,
		[AppPath] [varchar](255) NULL,
		[AppConfigFilePath] [varchar](255) NULL,
		[AppVersion] [varchar](25) NULL,
		[AppUser] [varchar](275) NULL
	)
END
BEGIN
	-- Increase 'AppUser' column size [ Note: full username Domain\\Username so it must be increased to 253 + 2 + 20 chars ]
	IF EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_Filters]', N'U' ) AND [name] = 'AppUser' )
		ALTER TABLE [dbo].[Pending_Filters] ALTER COLUMN [AppUser] VARCHAR(275)

	--	Add 'GroupId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_Filters]', N'U' ) AND [name] = 'GroupId' )
		ALTER TABLE [dbo].[Pending_Filters] ADD [GroupId] [uniqueidentifier] NOT NULL DEFAULT( '00000000-0000-0000-0000-000000000000' )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_Filters]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Pending_Filters] ADD [PackageId] [uniqueidentifier] NULL
END
GO

IF OBJECT_ID( N'[dbo].[Pending_Fragments]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Pending_Fragments]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NULL,
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[SectionId] [uniqueidentifier] NOT NULL,
		[RootXmlNode] [varchar](1024) NULL,
		[Contents] [xml] NOT NULL,
		[AddMultiple] [BIT] NOT NULL DEFAULT( 0 )
	)
END
ELSE
BEGIN
	--	Add 'AddMultiple' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_Fragments]', N'U' ) AND [name] = 'AddMultiple' )
		ALTER TABLE [dbo].[Pending_Fragments] ADD [AddMultiple] BIT NOT NULL DEFAULT( 0 )

	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_Fragments]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Pending_Fragments] ADD [PackageId] [uniqueidentifier] NULL
END
GO

IF OBJECT_ID( N'[dbo].[Pending_GroupFilters]', N'U' ) IS NULL
	CREATE TABLE [dbo].[Pending_GroupFilters]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[GroupId] [uniqueidentifier] NOT NULL,
		[FilterId] [uniqueidentifier] NOT NULL
	)
--ELSE
--BEGIN	
--END
GO

IF OBJECT_ID( N'[dbo].[Pending_GroupFragments]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Pending_GroupFragments]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NULL,
		[GroupId] [uniqueidentifier] NOT NULL,
		[FragmentId] [uniqueidentifier] NOT NULL
	)
END
ELSE
BEGIN
	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_GroupFragments]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Pending_GroupFragments] ADD [PackageId] [uniqueidentifier] NULL
END
GO

IF OBJECT_ID( N'[dbo].[Pending_GroupGroups]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Pending_GroupGroups]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NULL,
		[GroupId] [uniqueidentifier] NOT NULL,
		[ChildGroupId] [uniqueidentifier] NOT NULL
	)
END
ELSE
BEGIN
	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_GroupGroups]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Pending_GroupGroups] ADD [PackageId] [uniqueidentifier] NULL
END
GO

IF OBJECT_ID( N'[dbo].[Pending_GroupMacroValues]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Pending_GroupMacroValues]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NULL,
		[GroupId] [uniqueidentifier] NOT NULL,
		[MacroId] [uniqueidentifier] NOT NULL,
		[Value] [varchar](max) NOT NULL
	)
END
ELSE
BEGIN
	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_GroupMacroValues]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Pending_GroupMacroValues] ADD [PackageId] [uniqueidentifier] NULL
END
GO

IF OBJECT_ID( N'[dbo].[Pending_Groups]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Pending_Groups]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NULL,
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[GroupTemplateId] [uniqueidentifier] NULL,
		[IsRootGroup] [bit] NOT NULL
	)
END
ELSE
BEGIN
	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_Groups]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Pending_Groups] ADD [PackageId] [uniqueidentifier] NULL
END
GO

IF OBJECT_ID( N'[dbo].[Pending_Macros]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Pending_Macros]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NULL,
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[ValueType] [varchar](1024) NOT NULL
	)
END
ELSE
BEGIN
	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_Macros]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Pending_Macros] ADD [PackageId] [uniqueidentifier] NULL
END
GO

IF OBJECT_ID( N'[dbo].[Pending_PackageDependencies]', N'U' ) IS NULL
--BEGIN
	CREATE TABLE [dbo].[Pending_PackageDependencies]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NOT NULL,
		[DependencyId] [uniqueidentifier] NOT NULL
	)
--END
--ELSE
--BEGIN
--END
GO

IF OBJECT_ID( N'[dbo].[Pending_Packages]', N'U' ) IS NULL
--BEGIN
	CREATE TABLE [dbo].[Pending_Packages]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[Version] [varchar](43) NOT NULL,
		[Type] [int] NOT NULL
	)
--END
--ELSE
--BEGIN
--END
GO

IF OBJECT_ID( N'[dbo].[Pending_Sections]', N'U' ) IS NULL
BEGIN
	CREATE TABLE [dbo].[Pending_Sections]
	(
		[ChangeSetId] [int] NOT NULL,
		[ChangeType] [varchar](10) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[RootGroupId] [uniqueidentifier] NOT NULL,
		[PackageId] [uniqueidentifier] NULL,
		[SectionGroupName] [varchar](50) NULL,
		[Name] [varchar](250) NOT NULL,
		[Description] [varchar](1024) NOT NULL,
		[HandlerType] [varchar](1024) NOT NULL,
		[ConfigFile] [varchar](255) NOT NULL,
		[IsLegacySection] [bit] NOT NULL,
		[IsRemoteOnly] [bit] NOT NULL,
		[ConfigurationHelperType] [varchar](1024) NULL,
		[SectionAttributes] [varchar](1024) NULL
	)
END
ELSE
BEGIN
	--	Add 'PackageId' column, if it does not exist
	IF NOT EXISTS ( SELECT * FROM syscolumns WHERE id = OBJECT_ID( N'[dbo].[Pending_Sections]', N'U' ) AND [name] = 'PackageId' )
		ALTER TABLE [dbo].[Pending_Sections] ADD [PackageId] [uniqueidentifier] NULL
END
GO

IF OBJECT_ID( N'[dbo].[UpgradeScripts]', N'U' ) IS NULL
	CREATE TABLE [dbo].[UpgradeScripts]
	(
		[ReplicationId] [int] IDENTITY(1,1) NOT NULL,
		[Id] [uniqueidentifier] NOT NULL,
		[Script] varchar(max) NOT NULL,
		[Version] int NOT NULL,
		[Order] int NOT NULL
	)
--ELSE
--BEGIN	
--END
GO

--
-- Data Fix Script Execution Log Table's Primary Key
--
IF OBJECT_ID (N'[DataFix].[PK_DataFix_Log]', N'PK') IS NULL
	BEGIN
	--
	-- The index does not exist so create it using the final version
	--
	ALTER TABLE [DataFix].[Log] ADD CONSTRAINT [PK_DataFix_Log] PRIMARY KEY CLUSTERED
	(
	[TrackingID],
	[Section]
	)

	END
/*
ELSE
	BEGIN
	--
	-- A version of the index exists so the current version must be determined and alterations made
	--

	END
*/

GO

--
-- Data Fix Script Execution Tracking Table's Primary Key
--
IF OBJECT_ID (N'[DataFix].[PK_DataFix_Tracking]', N'PK') IS NULL
	BEGIN
	--
	-- The index does not exist so create it using the final version
	--
	ALTER TABLE [DataFix].[Tracking] ADD CONSTRAINT [PK_DataFix_Tracking] PRIMARY KEY CLUSTERED
	(
	[TrackingID]
	)

	END
/*
ELSE
	BEGIN
	--
	-- A version of the index exists so the current version must be determined and alterations made
	--

	END
*/

GO

IF OBJECT_ID( N'[dbo].[PK_Active_Attributes]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_Attributes] DROP CONSTRAINT [PK_Active_Attributes]

ALTER TABLE [dbo].[Active_Attributes] 
	ADD CONSTRAINT [PK_Active_Attributes] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_FilterAttributeValues]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_FilterAttributeValues] DROP CONSTRAINT [PK_Active_FilterAttributeValues]

ALTER TABLE [dbo].[Active_FilterAttributeValues] 
	ADD CONSTRAINT [PK_Active_FilterAttributeValues] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_Filters]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_Filters] DROP CONSTRAINT [PK_Active_Filters]

ALTER TABLE [dbo].[Active_Filters] 
	ADD CONSTRAINT [PK_Active_Filters] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_Fragments]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_Fragments] DROP CONSTRAINT [PK_Active_Fragments]

ALTER TABLE [dbo].[Active_Fragments] 
	ADD CONSTRAINT [PK_Active_Fragments] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_GroupFilters]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_GroupFilters] DROP CONSTRAINT [PK_Active_GroupFilters]

ALTER TABLE [dbo].[Active_GroupFilters] 
	ADD CONSTRAINT [PK_Active_GroupFilters] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_GroupFragments]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_GroupFragments] DROP CONSTRAINT [PK_Active_GroupFragments]

ALTER TABLE [dbo].[Active_GroupFragments] 
	ADD CONSTRAINT [PK_Active_GroupFragments] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_GroupGroups]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_GroupGroups] DROP CONSTRAINT [PK_Active_GroupGroups]

ALTER TABLE [dbo].[Active_GroupGroups] 
	ADD CONSTRAINT [PK_Active_GroupGroups] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_GroupMacroValues]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_GroupMacroValues] DROP CONSTRAINT [PK_Active_GroupMacroValues]

ALTER TABLE [dbo].[Active_GroupMacroValues] 
	ADD CONSTRAINT [PK_Active_GroupMacroValues] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_Groups]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_Groups] DROP CONSTRAINT [PK_Active_Groups]

ALTER TABLE [dbo].[Active_Groups] 
	ADD CONSTRAINT [PK_Active_Groups] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_Macros]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_Macros] DROP CONSTRAINT [PK_Active_Macros]

ALTER TABLE [dbo].[Active_Macros] 
	ADD CONSTRAINT [PK_Active_Macros] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_PackageDependencies]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_PackageDependencies] DROP CONSTRAINT [PK_Active_PackageDependencies]

ALTER TABLE [dbo].[Active_PackageDependencies] 
	ADD CONSTRAINT [PK_Active_PackageDependencies] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_Packages]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_Packages] DROP CONSTRAINT [PK_Active_Packages]

ALTER TABLE [dbo].[Active_Packages] 
	ADD CONSTRAINT [PK_Active_Packages] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_Sections]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_Sections] DROP CONSTRAINT [PK_Active_Sections]

ALTER TABLE [dbo].[Active_Sections] 
	ADD CONSTRAINT [PK_Active_Sections] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Active_SectionVersions]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_SectionVersions] DROP CONSTRAINT [PK_Active_SectionVersions]

ALTER TABLE [dbo].[Active_SectionVersions] 
	ADD CONSTRAINT [PK_Active_SectionVersions] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Certificates]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Certificates] DROP CONSTRAINT [PK_Certificates]

ALTER TABLE [dbo].[Certificates] 
	ADD CONSTRAINT [PK_Certificates] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Locks]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Locks] DROP CONSTRAINT [PK_Locks]

ALTER TABLE [dbo].[Locks] 
	ADD CONSTRAINT [PK_Locks] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

IF OBJECT_ID( N'[dbo].[PK_Pending_Changesets]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[Pending_Changesets] DROP CONSTRAINT [PK_Pending_Changesets]

ALTER TABLE [dbo].[Pending_Changesets] 
	ADD CONSTRAINT [PK_Pending_Changesets] 
	PRIMARY KEY CLUSTERED ( [ChangeSetId] ASC )	
GO

IF OBJECT_ID( N'[dbo].[PK_UpgradeScripts]', N'PK' ) IS NOT NULL
	ALTER TABLE [dbo].[UpgradeScripts] DROP CONSTRAINT [PK_UpgradeScripts]

ALTER TABLE [dbo].[UpgradeScripts] 
	ADD CONSTRAINT [PK_UpgradeScripts] 
	PRIMARY KEY CLUSTERED ( [ReplicationId] ASC )
GO

--
-- Data Fix Script Execution Log Table's Constraint Against the Tracking Table
--
IF OBJECT_ID (N'[DataFix].[FK_DataFix_Log_Tracking]', N'F') IS NULL
	BEGIN
	--
	-- The index does not exist so create it using the final version
	--
	ALTER TABLE [DataFix].[Log] WITH CHECK ADD CONSTRAINT [FK_DataFix_Log_Tracking] FOREIGN KEY
	(
	[TrackingID]
	)
	REFERENCES [DataFix].[Tracking]
	(
	[TrackingID]
	)

	ALTER TABLE [DataFix].[Log] CHECK CONSTRAINT [FK_DataFix_Log_Tracking]

	END
/*
ELSE
	BEGIN
	--
	-- A version of the index exists so the current version must be determined and alterations made
	--

	END
*/

GO

IF OBJECT_ID( N'[dbo].[IX_Active_Filters]', N'UQ' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_Filters] DROP CONSTRAINT [IX_Active_Filters]

ALTER TABLE [dbo].[Active_Filters] 
	ADD CONSTRAINT [IX_Active_Filters] 
	UNIQUE NONCLUSTERED 
	( 
		[RootGroupId] ASC,
		[Id] ASC,
		[ChangeSetId] ASC
	)
GO

IF EXISTS ( SELECT name FROM sys.indexes
		    WHERE name = N'IX_Active_Fragments' )
    DROP INDEX [IX_Active_Fragments] ON [dbo].[Active_Fragments]
GO
CREATE NONCLUSTERED INDEX [IX_Active_Fragments]
ON [dbo].[Active_Fragments] ([SectionId],[IsActive],[IsHistorical])
GO

IF OBJECT_ID( N'[dbo].[IX_Active_SectionVersions_RootGroupId_SectionId]', N'UQ' ) IS NOT NULL
	ALTER TABLE [dbo].[Active_SectionVersions] DROP CONSTRAINT [IX_Active_SectionVersions_RootGroupId_SectionId]

ALTER TABLE [dbo].[Active_SectionVersions]
	ADD CONSTRAINT [IX_Active_SectionVersions_RootGroupId_SectionId]
	UNIQUE NONCLUSTERED ( RootGroupId, SectionId )
GO

IF OBJECT_ID( N'[dbo].[IX_UpgradeScripts_Id]', N'UQ' ) IS NOT NULL
	ALTER TABLE [dbo].[UpgradeScripts] DROP CONSTRAINT [IX_UpgradeScripts_Id]

ALTER TABLE [dbo].[UpgradeScripts] 
	ADD CONSTRAINT [IX_UpgradeScripts_Id] 
	UNIQUE NONCLUSTERED 
	( 
		[Id] ASC
	)
GO

IF OBJECT_ID( N'[dbo].[IX_UpgradeScripts_Version_Order]', N'UQ' ) IS NOT NULL
	ALTER TABLE [dbo].[UpgradeScripts] DROP CONSTRAINT [IX_UpgradeScripts_Version_Order]

ALTER TABLE [dbo].[UpgradeScripts] 
	ADD CONSTRAINT [IX_UpgradeScripts_Version_Order] 
	UNIQUE NONCLUSTERED 
	( 
		[Version] ASC,
		[Order] ASC
	)
GO

IF OBJECT_ID( N'[dbo].[Active_AttributesDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_AttributesDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_AttributesDeleteTrigger] 
ON [dbo].[Active_Attributes] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_Attributes
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, Id
					FROM	deleted
					GROUP BY RootGroupId, Id
				) AS d
				JOIN
				Active_Attributes a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.Id = d.Id
		GROUP BY a.RootGroupId, a.Id
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_AttributesInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_AttributesInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_AttributesInsertTrigger] 
ON [dbo].[Active_Attributes] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_Attributes]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Attributes] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.Id = t2.Id
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_FilterAttributeValuesDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_FilterAttributeValuesDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_FilterAttributeValuesDeleteTrigger] 
ON [dbo].[Active_FilterAttributeValues] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_FilterAttributeValues
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, FilterId, AttributeId
					FROM	deleted
					GROUP BY RootGroupId, FilterId, AttributeId
				) AS d
				JOIN
				Active_FilterAttributeValues a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.FilterId = d.FilterId
						AND
						a.AttributeId = d.AttributeId
		GROUP BY a.RootGroupId, a.FilterId, a.AttributeId
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_FilterAttributeValuesInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_FilterAttributeValuesInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_FilterAttributeValuesInsertTrigger] 
ON [dbo].[Active_FilterAttributeValues] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_FilterAttributeValues]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_FilterAttributeValues] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.FilterId = t2.FilterId
				AND
				t1.AttributeId = t2.AttributeId
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_FiltersDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_FiltersDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_FiltersDeleteTrigger] 
ON [dbo].[Active_Filters] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_Filters
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, Id
					FROM	deleted
					GROUP BY RootGroupId, Id
				) AS d
				JOIN
				Active_Filters a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.Id = d.Id
		GROUP BY a.RootGroupId, a.Id
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_FiltersInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_FiltersInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_FiltersInsertTrigger] 
ON [dbo].[Active_Filters] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_Filters]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Filters] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.Id = t2.Id
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_FragmentsDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_FragmentsDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_FragmentsDeleteTrigger] 
ON [dbo].[Active_Fragments] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_Fragments
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, Id
					FROM	deleted
					GROUP BY RootGroupId, Id
				) AS d
				JOIN
				Active_Fragments a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.Id = d.Id
		GROUP BY a.RootGroupId, a.Id
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_FragmentsInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_FragmentsInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_FragmentsInsertTrigger] 
ON [dbo].[Active_Fragments] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_Fragments]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Fragments] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.Id = t2.Id
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_GroupFiltersDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_GroupFiltersDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_GroupFiltersDeleteTrigger] 
ON [dbo].[Active_GroupFilters] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_GroupFilters
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, GroupId, FilterId
					FROM	deleted
					GROUP BY RootGroupId, GroupId, FilterId
				) AS d
				JOIN
				Active_GroupFilters a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.GroupId = d.GroupId
						AND
						a.FilterId = d.FilterId
		GROUP BY a.RootGroupId, a.GroupId, a.FilterId
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_GroupFiltersInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_GroupFiltersInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_GroupFiltersInsertTrigger] 
ON [dbo].[Active_GroupFilters] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_GroupFilters]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_GroupFilters] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.GroupId = t2.GroupId
				AND
				t1.FilterId = t2.FilterId
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_GroupFragmentsDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_GroupFragmentsDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_GroupFragmentsDeleteTrigger] 
ON [dbo].[Active_GroupFragments] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_GroupFragments
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, GroupId, FragmentId
					FROM	deleted
					GROUP BY RootGroupId, GroupId, FragmentId
				) AS d
				JOIN
				Active_GroupFragments a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.GroupId = d.GroupId
						AND
						a.FragmentId = d.FragmentId
		GROUP BY a.RootGroupId, a.GroupId, a.FragmentId
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_GroupFragmentsInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_GroupFragmentsInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_GroupFragmentsInsertTrigger] 
ON [dbo].[Active_GroupFragments] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_GroupFragments]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_GroupFragments] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.GroupId = t2.GroupId
				AND
				t1.FragmentId = t2.FragmentId
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_GroupGroupsDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_GroupGroupsDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_GroupGroupsDeleteTrigger] 
ON [dbo].[Active_GroupGroups] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_GroupGroups
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, GroupId, ChildGroupId
					FROM	deleted
					GROUP BY RootGroupId, GroupId, ChildGroupId
				) AS d
				JOIN
				Active_GroupGroups a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.GroupId = d.GroupId
						AND
						a.ChildGroupId = d.ChildGroupId
		GROUP BY a.RootGroupId, a.GroupId, a.ChildGroupId
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_GroupGroupsInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_GroupGroupsInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_GroupGroupsInsertTrigger] 
ON [dbo].[Active_GroupGroups] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_GroupGroups]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_GroupGroups] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.GroupId = t2.GroupId
				AND
				t1.ChildGroupId = t2.ChildGroupId
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_GroupMacroValuesDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_GroupMacroValuesDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_GroupMacroValuesDeleteTrigger] 
ON [dbo].[Active_GroupMacroValues] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_GroupMacroValues
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, GroupId, MacroId
					FROM	deleted
					GROUP BY RootGroupId, GroupId, MacroId
				) AS d
				JOIN
				Active_GroupMacroValues a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.GroupId = d.GroupId
						AND
						a.MacroId = d.MacroId
		GROUP BY a.RootGroupId, a.GroupId, a.MacroId
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_GroupMacroValuesInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_GroupMacroValuesInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_GroupMacroValuesInsertTrigger] 
ON [dbo].[Active_GroupMacroValues] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_GroupMacroValues]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_GroupMacroValues] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.GroupId = t2.GroupId
				AND
				t1.MacroId = t2.MacroId
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_GroupsDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_GroupsDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_GroupsDeleteTrigger] 
ON [dbo].[Active_Groups] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_Groups
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, Id
					FROM	deleted
					GROUP BY RootGroupId, Id
				) AS d
				JOIN
				Active_Groups a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.Id = d.Id
		GROUP BY a.RootGroupId, a.Id
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_GroupsInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_GroupsInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_GroupsInsertTrigger] 
ON [dbo].[Active_Groups] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_Groups]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Groups] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.Id = t2.Id
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_MacrosDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_MacrosDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_MacrosDeleteTrigger] 
ON [dbo].[Active_Macros] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_Macros
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, Id
					FROM	deleted
					GROUP BY RootGroupId, Id
				) AS d
				JOIN
				Active_Macros a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.Id = d.Id
		GROUP BY a.RootGroupId, a.Id
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_MacrosInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_MacrosInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_MacrosInsertTrigger] 
ON [dbo].[Active_Macros] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_Macros]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Macros] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.Id = t2.Id
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_PackageDependenciesDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_PackageDependenciesDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_PackageDependenciesDeleteTrigger] 
ON [dbo].[Active_PackageDependencies] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_PackageDependencies
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might be one or more deleted changes on a unique item)
					SELECT	RootGroupId, PackageId, DependencyId
					FROM	deleted
					GROUP BY RootGroupId, PackageId, DependencyId
				) AS d
				JOIN
				Active_PackageDependencies a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.PackageId = d.PackageId
						AND
						a.DependencyId = d.DependencyId
		GROUP BY a.RootGroupId, a.PackageId, a.DependencyId
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_PackageDependenciesInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_PackageDependenciesInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_PackageDependenciesInsertTrigger] 
ON [dbo].[Active_PackageDependencies] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_PackageDependencies]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_PackageDependencies] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.PackageId = t2.PackageId
				AND
				t1.DependencyId = t2.DependencyId
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_PackagesDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_PackagesDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_PackagesDeleteTrigger] 
ON [dbo].[Active_Packages] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_Packages
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might be one or more deleted changes on a unique item)
					SELECT	RootGroupId, Id
					FROM	deleted
					GROUP BY RootGroupId, Id
				) AS d
				JOIN
				Active_Packages a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.Id = d.Id
		GROUP BY a.RootGroupId, a.Id
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_PackagesInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_PackagesInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_PackagesInsertTrigger] 
ON [dbo].[Active_Packages] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_Packages]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Packages] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.Id = t2.Id
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

IF OBJECT_ID( N'[dbo].[Active_SectionsDeleteTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_SectionsDeleteTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_SectionsDeleteTrigger] 
ON [dbo].[Active_Sections] 
FOR DELETE
AS
	-- Mark latest unique item as non-historical
	UPDATE	Active_Sections
	SET		IsHistorical = 0
	FROM
	(
		-- Select latest change (or initial state) that was not deleted
		SELECT	MAX( a.ReplicationId ) AS LatestReplicationId
		FROM	(
					-- Select identifier of each deleted unique item
					-- (since there might one or more deleted changes on a unique item)
					SELECT	RootGroupId, Id
					FROM	deleted
					GROUP BY RootGroupId, Id
				) AS d
				JOIN
				Active_Sections a			
					ON	a.RootGroupId = d.RootGroupId
						AND
						a.Id = d.Id
		GROUP BY a.RootGroupId, a.Id
	) AS c
	WHERE	ReplicationId = c.LatestReplicationId
			AND
			IsHistorical = 1
GO
GO

IF OBJECT_ID ( N'[dbo].[Active_SectionsInsertTrigger]', N'TR' ) IS NOT NULL 
  DROP TRIGGER [dbo].[Active_SectionsInsertTrigger] 
GO
 
CREATE TRIGGER [dbo].[Active_SectionsInsertTrigger] 
ON [dbo].[Active_Sections] 
FOR INSERT 
AS
	-- Mark each unique item except latest one as historical
	UPDATE	[dbo].[Active_Sections]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Sections] t1
			JOIN
			inserted t2
			-- Exclude latest version of each unique item
			ON	t1.RootGroupId = t1.RootGroupId
				AND
				t1.Id = t2.Id
				AND
				t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical items from update
GO
GO

TRUNCATE TABLE [dbo].[UpgradeScripts]

DECLARE @Id uniqueidentifier
DECLARE @Script varchar(max)

----
-- 3.0.10.16.01-22598.sql
----
SET	@Id = '{684A0F6E-DF64-4B59-B178-D0FDFB15B0AB}'
SET	@Script =
'
--
-- Update existing ServicePool fragments to migrate current configuration of WCF request channels
-- to format parsable by standard WCF parsers
--
--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = ''{12BB99C3-3045-498d-BD54-D2690935D845}''

BEGIN TRANSACTION

-- Create and populate temporary table to hold information about configuration to be migrated
CREATE TABLE #FragmentContents
(
	ChangeSet int,
	RootGroup uniqueidentifier,
	Section uniqueidentifier,
	Fragment uniqueidentifier,
	ServicePoolName varchar( 256 ),
	RequestChannelName varchar( 256 ),
	RequestChannelAddress varchar( 1024 ),
	BindingType varchar( 50 ),
	BindingName varchar( 256 ),
	MigratedConfiguration xml,
	IsMigrated bit
)

INSERT INTO #FragmentContents
SELECT	ChangeSetId,-- AS ChangeSet,
		RootGroupId,-- AS RootGroup,
		SectionId,-- AS Section,
		Id,-- AS Fragment,
		ServicePool.value( ''./@name'', ''varchar( 256 )'' ),-- AS ServicePoolName,
		RequestChannel.value( ''./@name'', ''varchar( 256 )'' ),-- AS RequestChannelName,
		RequestChannel.value( ''( ./RequestChannelFactoryData/Address )[ 1 ]'', ''varchar( 1024 )'' ),-- AS RequestChannelAddress,
		RequestChannel.value( ''local-name( ( ./RequestChannelFactoryData/BindingXml/bindings/* )[ 1 ] )'', ''varchar( 50 )'' ),-- AS BindingType,
		RequestChannel.value( ''( ./RequestChannelFactoryData/BindingXml/bindings/*/binding/@name )[ 1 ]'', ''varchar( 256 )'' ),-- AS BindingName,
		Contents,-- AS MigratedConfiguration,
		0-- AS IsMigrated	-- At the beginning, request channel configuration is not migrated
FROM	#Upgrade_Fragments
		CROSS APPLY
		Contents.nodes( ''ServicePool'' ) AS ServicePools( ServicePool )
		CROSS APPLY
		ServicePool.nodes( ''./RequestChannels/RequestChannel'' ) AS RequestChannels( RequestChannel )
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @SERVICEHOST
		AND
		RootXmlNode = ''ServicePools''
		AND
		Contents.exist( ''ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData[ @name="WCF" ]'' ) = 1

DECLARE @ChangeSetId int
DECLARE @RootGroupId uniqueidentifier
DECLARE @SectionId uniqueidentifier
DECLARE @FragmentId uniqueidentifier
DECLARE @ServicePoolName varchar( 256 )
DECLARE @RequestChannelName varchar( 256 )
DECLARE @RequestChannelAddress varchar( 1024 )
DECLARE @BindingType varchar( 50 )
DECLARE @BindingName varchar( 256 )
DECLARE @Bindings varchar( 4096 )
DECLARE @Statement nvarchar( max )

-- Migrate configuration of each WCF service request channel
WHILE EXISTS( SELECT ChangeSet FROM #FragmentContents WHERE IsMigrated = 0 )
BEGIN
	-- Select information about the channel for configuration migration
	SELECT TOP 1
			@ChangeSetId = ChangeSet,
			@RootGroupId = RootGroup,
			@SectionId = Section,
			@FragmentId = Fragment,
			@ServicePoolName = ServicePoolName,
			@RequestChannelName = RequestChannelName,
			@RequestChannelAddress = RequestChannelAddress,
			@BindingType = BindingType,
			@BindingName = BindingName
	FROM	#FragmentContents
	WHERE	IsMigrated = 0
	
	-- Ensure that ''ServiceModel'' element and its ''services'' and ''client'' child elements are present
	EXEC
	(
		''UPDATE	#FragmentContents
		SET		MigratedConfiguration.modify
				(
				''''insert
						<ServiceModel>
							<services />
							<client />
							<behaviors>
								<serviceBehaviors />
							</behaviors>
						</ServiceModel>
				 as last
				 into ( ServicePool[ @name="'' + @ServicePoolName + ''" ]/RequestChannels/'' +
						''RequestChannel[ @name="'' + @RequestChannelName + ''" ]/RequestChannelFactoryData[ @name="WCF" ] )[ 1 ]''''
				)
		WHERE	ChangeSet = '' + @ChangeSetId + ''
				AND
				RootGroup = '''''' + @RootGroupId + ''''''
				AND
				Section = '''''' + @SectionId + ''''''
				AND
				Fragment = '''''' + @FragmentId + ''''''''
	)

	-- Insert WCF service configuration
	EXEC
	(
		''UPDATE	#FragmentContents
		SET		MigratedConfiguration.modify
				(
				''''insert
						<service name="ServiceBus.ServiceHost.RequestChannels.Wcf.Service"
								 behaviorConfiguration="RequestChannelBehavior">
							<endpoint address=""
									  binding="'' + @BindingType + ''" bindingConfiguration="'' + @BindingName + ''"
									  contract="ServiceBus.ServiceHost.RequestChannels.Wcf.IService" />
							<host>
								<baseAddresses>
									<add baseAddress="'' + @RequestChannelAddress + ''" />
								</baseAddresses>
							</host>
						</service>
				  as last
				  into ( ServicePool[ @name="'' + @ServicePoolName + ''" ]/RequestChannels/'' +
						''RequestChannel[ @name="'' + @RequestChannelName + ''" ]/RequestChannelFactoryData[ @name="WCF" ]/ServiceModel/services )[ 1 ]''''
				)
		WHERE	ChangeSet = '' + @ChangeSetId + ''
				AND
				RootGroup = '''''' + @RootGroupId + ''''''
				AND
				Section = '''''' + @SectionId + ''''''
				AND
				Fragment = '''''' + @FragmentId + ''''''''
	)
	
	-- Insert WCF service behavior configuration
	EXEC
	(
		''UPDATE	#FragmentContents
		SET		MigratedConfiguration.modify
				(
				''''insert
						<behavior name="RequestChannelBehavior">
							<serviceThrottling maxConcurrentCalls="500000" maxConcurrentSessions="500000" maxConcurrentInstances="1" />
						</behavior>
				  as last
				  into ( ServicePool[ @name="'' + @ServicePoolName + ''" ]/RequestChannels/'' +
						''RequestChannel[ @name="'' + @RequestChannelName + ''" ]/RequestChannelFactoryData[ @name="WCF" ]/ServiceModel/behaviors/serviceBehaviors )[ 1 ]''''
				)
		WHERE	ChangeSet = '' + @ChangeSetId + ''
				AND
				RootGroup = '''''' + @RootGroupId + ''''''
				AND
				Section = '''''' + @SectionId + ''''''
				AND
				Fragment = '''''' + @FragmentId + ''''''''
	)
	
	-- Insert WCF client configuration		
	EXEC
	(
		''UPDATE	#FragmentContents
		SET		MigratedConfiguration.modify
				(
				''''insert
						<endpoint name="'' + @BindingName + ''_IService"
								  address="'' + @RequestChannelAddress + ''"
								  binding="'' + @BindingType + ''" bindingConfiguration="'' + @BindingName + ''"
								  contract="ServiceBus.ServiceHost.RequestChannels.Wcf.IService" />
				  as last
				  into ( ServicePool[ @name="'' + @ServicePoolName + ''" ]/RequestChannels/'' +
						''RequestChannel[ @name="'' + @RequestChannelName + ''" ]/RequestChannelFactoryData[ @name="WCF" ]/ServiceModel/client )[ 1 ]''''
				)
		WHERE	ChangeSet = '' + @ChangeSetId + ''
				AND
				RootGroup = '''''' + @RootGroupId + ''''''
				AND
				Section = '''''' + @SectionId + ''''''
				AND
				Fragment = '''''' + @FragmentId + ''''''''
	)

	-- Get WCF bindings configuration
	SET		@Bindings = NULL
	SET		@Statement = 
		N''SELECT	@Bindings = CONVERT
			( varchar( max ), MigratedConfiguration.query
				(
					''''ServicePool[ @name="'' + @ServicePoolName + ''" ]/RequestChannels/'' +
					''RequestChannel[ @name="'' + @RequestChannelName + ''" ]/RequestChannelFactoryData[ @name="WCF" ]/BindingXml/bindings''''
				)
			)
		FROM	#FragmentContents
		WHERE	ChangeSet = '' + CONVERT( varchar(11), @ChangeSetId ) + ''
				AND
				RootGroup = '''''' + CONVERT( varchar(36), @RootGroupId ) + ''''''
				AND
				Section = '''''' + CONVERT( varchar(36), @SectionId ) + ''''''
				AND
				Fragment = '''''' + CONVERT( varchar(36), @FragmentId ) + ''''''''

	EXECUTE sp_executesql @Statement, N''@Bindings varchar( max ) OUTPUT'', @Bindings = @Bindings OUTPUT
	
	-- Insert obtained WCF bindings configuration
	EXEC
	(
		''UPDATE	#FragmentContents
		SET		MigratedConfiguration.modify
				(
				''''insert
						'' + @Bindings + ''
				  as last
				  into ( ServicePool[ @name="'' + @ServicePoolName + ''" ]/RequestChannels/'' +
						''RequestChannel[ @name="'' + @RequestChannelName + ''" ]/RequestChannelFactoryData[ @name="WCF" ]/ServiceModel )[ 1 ]''''
				)
		WHERE	ChangeSet = '' + @ChangeSetId + ''
				AND
				RootGroup = '''''' + @RootGroupId + ''''''
				AND
				Section = '''''' + @SectionId + ''''''
				AND
				Fragment = '''''' + @FragmentId + ''''''''
	)
	
	-- Delete BindingXml and Address elements
	EXEC
	(
		''UPDATE	#FragmentContents
		SET		MigratedConfiguration.modify
				(
					''''delete ( ServicePool[ @name="'' + @ServicePoolName + ''" ]/RequestChannels/'' +
							''RequestChannel[ @name="'' + @RequestChannelName + ''" ]/RequestChannelFactoryData[ @name="WCF" ]/BindingXml )''''
				)
		WHERE	ChangeSet = '' + @ChangeSetId + ''
				AND
				RootGroup = '''''' + @RootGroupId + ''''''
				AND
				Section = '''''' + @SectionId + ''''''
				AND
				Fragment = '''''' + @FragmentId + ''''''''
	)	
	EXEC
	(
		''UPDATE	#FragmentContents
		SET		MigratedConfiguration.modify
				(
					''''delete ( ServicePool[ @name="'' + @ServicePoolName + ''" ]/RequestChannels/'' +
							''RequestChannel[ @name="'' + @RequestChannelName + ''" ]/RequestChannelFactoryData[ @name="WCF" ]/Address )''''
				)
		WHERE	ChangeSet = '' + @ChangeSetId + ''
				AND
				RootGroup = '''''' + @RootGroupId + ''''''
				AND
				Section = '''''' + @SectionId + ''''''
				AND
				Fragment = '''''' + @FragmentId + ''''''''
	)
	
	-- Mark request channel configuration as migrated
	UPDATE	#FragmentContents
	SET		IsMigrated = 1
	WHERE	ChangeSet = @ChangeSetId
			AND
			RootGroup = @RootGroupId
			AND
			Section = @SectionId
			AND
			Fragment = @FragmentId
			AND
			ServicePoolName = @ServicePoolName
			AND
			RequestChannelName = @RequestChannelName
END

-- Now use migrated request channel configuration to update current configuration
UPDATE	#Upgrade_Fragments
SET		Contents = fc.MigratedConfiguration
FROM	#FragmentContents fc
WHERE	ChangeSetId = fc.ChangeSet
		AND
		RootGroupId = fc.RootGroup
		AND
		SectionId = fc.Section
		AND
		Id = fc.Fragment

-- Delete the contents of temporary table containing information about migrated configuration
DROP TABLE #FragmentContents

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50334224,
	1,
	@Script
)

----
-- 3.0.10.16.02-22289.sql
----
SET	@Id = '{B5B2772C-14C0-4970-8223-FBA302411960}'
SET	@Script =
'
--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = ''{12BB99C3-3045-498d-BD54-D2690935D845}''

BEGIN TRANSACTION

--
-- 2. Insert PersistPending and PersistActive flags where necessary:
--    Default value of PersistPending and PersistActive nodes was True.
--    We must preserve that behavior because there might be some services relying on the behavior.
--
UPDATE	#Upgrade_Fragments
SET		Contents.modify( ''insert
								<PersistPending>True</PersistPending>
						  as first
						  into ( //Service/ServiceHostData )[ 1 ]'' )
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @SERVICEHOST
		AND
		(
			LTRIM( RTRIM( RootXmlNode ) ) = ''Services''
			OR
			LTRIM( RTRIM( RootXmlNode ) ) LIKE ''Services/%''
		)
		AND
		Contents.exist( ''Service'' ) = 1
		AND
		Contents.exist( ''Service/ServiceHostData/PersistPending'' ) = 0

UPDATE	#Upgrade_Fragments
SET		Contents.modify( ''insert
								<PersistActive>True</PersistActive>
						  as first
						  into ( //Service/ServiceHostData )[ 1 ]'' )
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @SERVICEHOST
		AND
		(
			LTRIM( RTRIM( RootXmlNode ) ) = ''Services''
			OR
			LTRIM( RTRIM( RootXmlNode ) ) LIKE ''Services/%''
		)
		AND
		Contents.exist( ''Service'' ) = 1
		AND
		Contents.exist( ''Service/ServiceHostData/PersistActive'' ) = 0

--
-- 3. Insert PersistCompleted flag where necessary
-- 
--
-- Create temporary table to hold information necessary for check and update of services configuration
--
CREATE TABLE #RetentionTimes
(
	ChangeSet int,
	RootGroup uniqueidentifier,
	Section uniqueidentifier,
	Fragment uniqueidentifier,
	RetentionTime varchar( max ),
	IsProcessed bit,
	IsValid bit
)

--
-- Select all service having RetentionTime node
--
INSERT INTO #RetentionTimes
SELECT	ChangeSetId,-- AS ChangeSet,
		RootGroupId,-- AS RootGroup,
		SectionId,-- AS Section,
		Id,-- AS Fragment,
		Contents.value( ''( Service/ServiceHostData/RetentionTime )[ 1 ]'', ''varchar(max)'' ) AS RetentionTime,
		0 AS IsProcessed,	-- At the beginning, the service configuration is not checked
		0 AS IsValid		-- Suppose that RetentionTime format of service configuration is invalid
FROM	#Upgrade_Fragments
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @SERVICEHOST
		AND
		(
			LTRIM( RTRIM( RootXmlNode ) ) = ''Services''
			OR
			LTRIM( RTRIM( RootXmlNode ) ) LIKE ''Services/%''
		)
		AND
		Contents.exist( ''Service/ServiceHostData/RetentionTime'' ) = 1

--
-- Recognize all services with valid RetentionTime format
--
UPDATE	#RetentionTimes
SET		IsValid = 1
WHERE	RetentionTime LIKE ''__:__:__''
		OR
		RetentionTime LIKE ''__:__:__.%''
		OR
		RetentionTime LIKE ''%.__:__:__''
		OR
		RetentionTime LIKE ''%.__:__:__.%''

DECLARE @ChangeSetId int
DECLARE @RootGroupId uniqueidentifier
DECLARE @SectionId uniqueidentifier
DECLARE @FragmentId uniqueidentifier
DECLARE @RetentionTime varchar( max )
DECLARE @Day int
DECLARE @Time datetime

--
-- Check which services should be updated to include PersistCompleted flag:
-- All services with RetentionTime specified in one of timespan formats, which is greater than TimeSpan.Zero
-- should be updated with PersistCompleted flag.
--
WHILE EXISTS( SELECT ChangeSet FROM #RetentionTimes WHERE IsProcessed = 0 AND IsValid = 1 )
BEGIN
	--
	-- Select information about the service configuration to check
	--
	SELECT TOP 1
			@ChangeSetId = ChangeSet,
			@RootGroupId = RootGroup,
			@SectionId = Section,
			@FragmentId = Fragment,
			@RetentionTime = RetentionTime
	FROM	#RetentionTimes
	WHERE	IsProcessed = 0
			AND
			IsValid = 1

	BEGIN TRY
		--
		-- If day is specified, check both day and time
		-- If day is not specified, check only time
		--
		IF ( ( @RetentionTime LIKE ''%.__:__:__'' ) OR ( @RetentionTime LIKE ''%.__:__:__.%'' ) )
		BEGIN
			--
			-- Check day part of timespan
			--
			SET @Day = CAST( SUBSTRING( @RetentionTime, 1, CHARINDEX( ''.'', @RetentionTime, 1 ) - 1 ) AS int )
			IF ( @Day < 0 )
				RAISERROR ( 50000, 0, 0 ) -- Raise error to go to catch block

			--
			--  Check time part of timespan
			--
			SET @Time = CAST( ''1753-01-01 '' + SUBSTRING( @RetentionTime, CHARINDEX( ''.'', @RetentionTime, 1 ) + 1, LEN( @RetentionTime ) - CHARINDEX( ''.'', @RetentionTime, 1 ) ) AS datetime )
			IF ( ( @Day  = 0 ) AND ( @Time = CAST( ''1753-01-01 00:00:00.000'' AS datetime ) ) )
				RAISERROR ( 50000, 0, 0 ) -- Raise error to go to catch block
		END
		ELSE
		BEGIN
			--
			--  Check time part of timespan
			--
			SET @Time = CAST( ''1753-01-01 '' + @RetentionTime AS datetime )
			IF ( @Time = CAST( ''1753-01-01 00:00:00.000'' AS datetime ) )
				RAISERROR ( 50000, 0, 0 ) -- Raise error to go to catch block
		END
		
		--
		-- Mark the current service configuration as processed
		--
		UPDATE	#RetentionTimes
		SET		IsProcessed = 1
		WHERE	ChangeSet = @ChangeSetId
				AND
				RootGroup = @RootGroupId
				AND
				Section = @SectionId
				AND
				Fragment = @FragmentId
	END TRY
	BEGIN CATCH
		--
		-- RetentionTime value format is invalid
		--
		DELETE FROM	#RetentionTimes
		WHERE		ChangeSet = @ChangeSetId
					AND
					RootGroup = @RootGroupId
					AND
					Section = @SectionId
					AND
					Fragment = @FragmentId
	END CATCH
END

--
-- Delete RetentionTime from all services configuration
--
UPDATE	#Upgrade_Fragments
SET		Contents.modify( ''delete ( //Service/ServiceHostData/RetentionTime )'' )
FROM	#Upgrade_Fragments f
		JOIN
		#RetentionTimes r
			ON	f.ChangeSetId = r.ChangeSet
				AND
				f.RootGroupId = r.RootGroup
				AND
				f.SectionId = r.Section
				AND
				f.Id = r.Fragment

--
-- Insert PersistCompleted flag in all services configuration with valid RetentionTime
--
UPDATE	#Upgrade_Fragments
SET		Contents.modify( ''insert
								<PersistCompleted>True</PersistCompleted>
						  as first
						  into ( //Service/ServiceHostData )[ 1 ]'' )
FROM	#Upgrade_Fragments f
		JOIN
		#RetentionTimes r
			ON	f.ChangeSetId = r.ChangeSet
				AND
				f.RootGroupId = r.RootGroup
				AND
				f.SectionId = r.Section
				AND
				f.Id = r.Fragment
WHERE	r.IsValid = 1

--
-- Drop temporary table thats holds information that was necessary for check and update of services configuration
--
DROP TABLE #RetentionTimes

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50334224,
	2,
	@Script
)

----
-- 3.1.1.2.01-18756.sql
----
SET	@Id = '{FAE62530-D5D2-4092-A2C0-D9BC59539614}'
SET	@Script =
'
BEGIN TRANSACTION

-- Create ControlData node if it does not exist
UPDATE	#Upgrade_Fragments
SET		Contents.modify(''
		insert
		<ControlData/>
		as last
		into 
		(Controls/Control [@name="ContractResolver"])[1]'')
WHERE	Contents.exist( ''Controls/Control [@name="ContractResolver"]'' ) = 1
		AND
		Contents.exist(''Controls/Control [@name="ContractResolver"]/ControlData'') = 0

UPDATE	#Upgrade_Fragments
SET		Contents.modify(''
		insert
		<Observer name="Types"><Implementation><FileName>.\Modules\ServiceBus.Administration.Modules.ContractResolver.dll</FileName><Type>ServiceBus.Administration.Modules.ContractResourceObserver</Type></Implementation></Observer>
		as first 
		into 
		(Controls/Control [@name="ContractResolver"]/ControlData)[1]'')
WHERE	Contents.exist( ''Controls/Control [@name="ContractResolver"]/ControlData'' ) = 1

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50397442,
	1,
	@Script
)

----
-- 3.1.1.3.01-19210.sql
----
SET	@Id = '{D1C30D98-4129-4A46-BA1E-31B7D78C72C0}'
SET	@Script =
'
--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

--
-- Declare and initialize section ID constant(s)
--
DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = ''{29B68C85-422C-4f38-B4ED-5C917010C756}''

--
-- Declare and initialize SERVICEHOST_SERVICE, ADMINISTRATIVE_CONSOLE and COMMANDLINE_RUNTESTCASES application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = ''{4FF5DBB5-A888-4c76-B222-8EE53950E511}''

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = ''{B233BE84-30B6-4349-B309-F24942D8DE4B}''

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = ''{523CFC5F-6219-455A-8EF4-F0E6A17247EB}''

--
-- Remove ''UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IStartStop'' fragment and remove links to the fragment from all applications
--
BEGIN TRANSACTION

DECLARE @FragmentId uniqueidentifier

--
-- Set id of ''UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IStartStop'' fragment
--
SET	@FragmentId = ''{1785CDA0-D9AD-4f6a-877E-1D50345B06A8}''

--
-- Ensure that we are deleting fragment that we have added to unityConfiguration section of specified environment
-- and that the fragment contains the original or updated ServiceBus.ServiceHost.IStartStop type mapping
--
DECLARE @ChangeSetId int
SET		@ChangeSetId = NULL

SELECT	@ChangeSetId = ChangeSetId
FROM	#Upgrade_Fragments
WHERE	Id = @FragmentId
		AND
		RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @UNITY_CONFIGURATION
		AND
		(
			Contents.exist( ''type[@type="ServiceBus.ServiceHost.IStartStop, ServiceBus.ServiceHost.Interfaces"]'') = 1
			OR
			Contents.exist( ''type[@type="ServiceBus.ServiceHost.IStartStop,ServiceBus.ServiceHost.Interfaces"]'') = 1
		)

IF ( @ChangeSetId IS NOT NULL )
	BEGIN
		-- Delete the fragment
		DELETE
		FROM	#Upgrade_Fragments
		WHERE	ChangeSetId = @ChangeSetId
				AND
				Id = @FragmentId
				AND
				RootGroupId = @ROOT_GROUP_ID
				AND
				SectionId = @UNITY_CONFIGURATION
				AND
				(
					Contents.exist( ''type[@type="ServiceBus.ServiceHost.IStartStop, ServiceBus.ServiceHost.Interfaces"]'') = 1
					OR
					Contents.exist( ''type[@type="ServiceBus.ServiceHost.IStartStop,ServiceBus.ServiceHost.Interfaces"]'') = 1
				)
		
		-- Delete all associations to the fragment from SERVICEHOST_SERVICE, ADMINISTRATIVE_CONSOLE and COMMANDLINE_RUNTESTCASES applications
		DELETE
		FROM	#Upgrade_GroupFragments
		WHERE	RootGroupId = @ROOT_GROUP_ID
				AND
				GroupId = @SERVICEHOST_SERVICE
				AND
				FragmentId = @FragmentId

		DELETE
		FROM	#Upgrade_GroupFragments
		WHERE	RootGroupId = @ROOT_GROUP_ID
				AND
				GroupId = @ADMINISTRATIVE_CONSOLE
				AND
				FragmentId = @FragmentId
				
		DELETE
		FROM	#Upgrade_GroupFragments
		WHERE	RootGroupId = @ROOT_GROUP_ID
				AND
				GroupId = @COMMANDLINE_RUNTESTCASES
				AND
				FragmentId = @FragmentId
	END

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50397443,
	1,
	@Script
)

----
-- 3.1.1.7.01-24209.sql
----
SET	@Id = '{0B08AB06-0FD4-4004-8F5A-7AF3C9BAE20A}'
SET	@Script =
'
BEGIN TRANSACTION

-- Create table for ids
declare @ids table (id uniqueidentifier )

-- Find rows to update
insert into @ids (id)
select id from #Upgrade_Fragments
where Contents.exist(''Service/ServiceContract/IsCacheable[text() = "False"]'' ) = 1

-- Delete old node
update #Upgrade_Fragments 
set Contents.modify(''delete (Service/ServiceContract/IsCacheable[text() = "False"])'')
where Id in (select Id from @ids)

-- Add new
update #Upgrade_Fragments 
set Contents.modify(''
	insert (<IsCacheable>False</IsCacheable>) 
			as last 
			into (Service/ServiceHostData)[1]
	'')
where Id in (select Id from @ids)

delete @ids

-- Find rows to update
insert into @ids (id)
select id from #Upgrade_Fragments
where Contents.exist(''Service/ServiceContract/IsCacheable[text() = "True"]'' ) = 1

-- Delete old node
update #Upgrade_Fragments 
set Contents.modify(''delete (Service/ServiceContract/IsCacheable[text() = "True"])'')
where Id in (select Id from @ids)

-- Add new
update #Upgrade_Fragments 
set Contents.modify(''
	insert (<IsCacheable>True</IsCacheable>) 
			as last 
			into (Service/ServiceHostData)[1]
	'')
where Id in (select Id from @ids)

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50397447,
	1,
	@Script
)

----
-- 3.1.1.7.02-24794.sql
----
SET	@Id = '{CC944826-02B1-42A6-A8B1-357D34C6A577}'
SET	@Script =
'
BEGIN TRANSACTION

-- Replace value only for assertions whose name attribute has incorrect value
UPDATE	#Upgrade_Fragments
SET		Contents.modify( ''	replace value of ( .//TestCase/Assertions/Assert[@name="Attribute IsAsynchronuous"]/@name )[ 1 ]
							with "Attribute IsAsynchronous"'' )
WHERE	Contents.exist( ''.//TestCase/Assertions/Assert[@name="Attribute IsAsynchronuous"]'' ) = 1

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50397447,
	2,
	@Script
)

----
-- 3.1.1.7.03-22607.sql
----
SET	@Id = '{74235E26-F015-49F0-A3C4-4DC261BBDE18}'
SET	@Script =
'
DECLARE @FragmentId uniqueidentifier

BEGIN TRANSACTION

SET	@FragmentId = ''{0FA352E4-C674-404E-8A7B-9F0C6539C29B}''
UPDATE #Upgrade_Fragments
SET Contents = ''<add key="InitialModule" value="Service Invoke" />''
WHERE Id = @FragmentId
AND CONVERT(VARCHAR(MAX), Contents) LIKE ''<add key="InitialModule" value="ServiceInvokeModule"%''

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50397447,
	3,
	@Script
)

----
-- 3.1.1.8-01.25987.sql
----
SET	@Id = '{4289AF8D-B158-4F1E-A6EE-EAE9A7037881}'
SET	@Script =
'
--
-- Update existing ServicePool fragments to migrate current configuration of WCF request channels
-- to format parsable by standard WCF parsers
--
--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

--
-- Declare and initialize section ID constant
--
DECLARE	@PUBSUB_CONFIGURATION uniqueidentifier
SET		@PUBSUB_CONFIGURATION = ''{4C93E0C6-A9A6-46ec-81CD-4AAE4F3608BB}''

BEGIN TRANSACTION

-- Create and populate temporary table to hold information about topics configuration to be changed
CREATE TABLE #TopicsMigration
(
	ChangeSet int,
	Fragment uniqueidentifier,
	PublicationChannel varchar( 256 ),
	SubscriptionChannel varchar( 256 ),
	MigratedConfiguration xml,
	IsMigrated bit
)

INSERT INTO #TopicsMigration
SELECT	ChangeSetId,
		Id,
		Topic.value( ''( ./PublicationChannel/text() )[ 1 ]'', ''varchar( 256 )'' ),-- AS PublicationChannel
		Topic.value( ''( ./SubscriptionChannel/text() )[ 1 ]'', ''varchar( 256 )'' ),-- AS SubscriptionChannel
		Contents,
		0	-- At the beginning, Topic configuration is not migrated
FROM	#Upgrade_Fragments
		CROSS APPLY
		Contents.nodes( ''Topic'' ) AS Topics( Topic )
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @PUBSUB_CONFIGURATION
		AND
		RootXmlNode = ''Topics''
		AND
		Contents.exist( ''Topic'' ) = 1

DECLARE @ChangeSetId int
DECLARE @FragmentId uniqueidentifier
DECLARE @PublicationChannel varchar( 256 )
DECLARE @SubscriptionChannel varchar( 256 )

-- Migrate configuration of each topic
WHILE EXISTS( SELECT ChangeSet FROM #TopicsMigration WHERE IsMigrated = 0 )
BEGIN
	-- Select information about the topic for configuration migration
	SELECT TOP 1
			@ChangeSetId = ChangeSet,
			@FragmentId = Fragment,
			@PublicationChannel = PublicationChannel,
			@SubscriptionChannel = SubscriptionChannel
	FROM	#TopicsMigration
	WHERE	IsMigrated = 0
	
	-- Replace any publication channel name TestChannel with General
	IF ( LTRIM( RTRIM( @PublicationChannel ) ) = ''TestChannel'' )
		EXEC
		(
			''UPDATE	#TopicsMigration
			SET		MigratedConfiguration.modify
					(
					''''replace value of
						( Topic/PublicationChannel[ text()="'' + @PublicationChannel + ''" ]/text() )[ 1 ]
					 with "General"''''
					)
			WHERE	ChangeSet = '' + @ChangeSetId + ''
					AND
					Fragment = '''''' + @FragmentId + ''''''''
		)
	
	-- Replace any subscription channel name TestChannel with General
	IF ( LTRIM( RTRIM( @SubscriptionChannel ) ) = ''TestChannel'' )
		EXEC
		(
			''UPDATE	#TopicsMigration
			SET		MigratedConfiguration.modify
					(
					''''replace value of
						( Topic/SubscriptionChannel[ text()="'' + @SubscriptionChannel + ''" ]/text() )[ 1 ]
					 with "General"''''
					)
			WHERE	ChangeSet = '' + @ChangeSetId + ''
					AND
					Fragment = '''''' + @FragmentId + ''''''''
		)
	
	-- Mark topic configuration as migrated
	UPDATE	#TopicsMigration
	SET		IsMigrated = 1
	WHERE	ChangeSet = @ChangeSetId
			AND
			Fragment = @FragmentId
			AND
			PublicationChannel = @PublicationChannel
			AND
			SubscriptionChannel = @SubscriptionChannel
END

-- Now use migrated topic configuration to update current configuration
UPDATE	#Upgrade_Fragments
SET		Contents = tm.MigratedConfiguration
FROM	#TopicsMigration tm
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @PUBSUB_CONFIGURATION
		AND
		ChangeSetId = tm.ChangeSet
		AND
		Id = tm.Fragment

-- Drop the temporary table containing information about migrated topics configuration
DROP TABLE #TopicsMigration

-- Create and populate temporary table to hold information about channels configuration to be migrated
CREATE TABLE #ChannelsMigration
(
	ChangeSet int,
	Fragment uniqueidentifier,
	NewFragmentName varchar( 250 ),
	ChannelName varchar( 256 ),
	ChannelAddress varchar( 1024 ),
	BindingType varchar( 50 ),
	BindingName varchar( 256 ),
	MigratedConfiguration xml,
	IsMigrated bit
)

INSERT INTO #ChannelsMigration
SELECT	ChangeSetId,
		Id,
		[Name],
		Channel.value( ''( ./Name )[ 1 ]'', ''varchar( 256 )'' ),-- AS ChannelName
		Channel.value( ''( ./Address )[ 1 ]'', ''varchar( 1024 )'' ),-- AS ChannelAddress
		Channel.value( ''local-name( ( ./BindingXml/bindings/* )[ 1 ] )'', ''varchar( 50 )'' ),-- AS BindingType
		Channel.value( ''( ./BindingXml/bindings/*/binding/@name )[ 1 ]'', ''varchar( 256 )'' ),-- AS BindingName
		Contents,
		0	-- At the beginning, channel configuration is not migrated
FROM	#Upgrade_Fragments
		CROSS APPLY
		Contents.nodes( ''Channel'' ) AS Channels( Channel )
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @PUBSUB_CONFIGURATION
		AND
		RootXmlNode = ''Channels''
		AND
		Contents.exist( ''Channel'' ) = 1

DECLARE @ChannelName varchar( 256 )
DECLARE @ChannelAddress varchar( 1024 )
DECLARE @BindingType varchar( 50 )
DECLARE @BindingName varchar( 256 )
DECLARE @Bindings varchar( 4096 )
DECLARE @Statement nvarchar( max )
DECLARE @DeleteStatementStart nvarchar( max )
DECLARE @DeleteStatementEnd nvarchar( max )

-- Migrate configuration of each channel
WHILE EXISTS( SELECT ChangeSet FROM #ChannelsMigration WHERE IsMigrated = 0 )
BEGIN
	-- Select information about the channel for configuration migration
	SELECT TOP 1
			@ChangeSetId = ChangeSet,
			@FragmentId = Fragment,
			@ChannelName = ChannelName,
			@ChannelAddress = ChannelAddress,
			@BindingType = BindingType,
			@BindingName = BindingName
	FROM	#ChannelsMigration
	WHERE	IsMigrated = 0
	
	-- Replace ''test'' path of the endpoint address with ''PubSubService''
	DECLARE @Length int
	DECLARE @InvertedLastPosition int
	SELECT	@Length = DATALENGTH( @ChannelAddress ),
			@InvertedLastPosition = CHARINDEX( ''/'', REVERSE( @ChannelAddress ), 0 )

	IF ( ( @Length > 0 ) AND ( @InvertedLastPosition > 0 ) )
	BEGIN
		DECLARE @LastPosition int
		DECLARE @Path varchar( 1024 )

		SET	@LastPosition = @Length - @InvertedLastPosition + 1	
		SET	@Path = LOWER( LTRIM( RTRIM( SUBSTRING( @ChannelAddress, @LastPosition + 1, @InvertedLastPosition - 1 ) ) ) )
		
		IF	( @Path = ''test'' )
			SET	@ChannelAddress = SUBSTRING( @ChannelAddress, 0, @LastPosition + 1 ) + ''PubSubService''
	END
	
	-- Ensure that ''ServiceModel'' element and its ''client'' child element are present
	EXEC
	(
		''UPDATE	#ChannelsMigration
		SET		MigratedConfiguration.modify
				(
				''''insert
						<ServiceModel>
							<client />
						</ServiceModel>
				 as last
				 into ( Channel[ Name[ text()="'' + @ChannelName + ''" ] ] )[ 1 ]''''
				)
		WHERE	ChangeSet = '' + @ChangeSetId + ''
					AND
					Fragment = '''''' + @FragmentId + ''''''''
	)
	
	-- Insert WCF client configuration
	EXEC
	(
		''UPDATE	#ChannelsMigration
		SET		MigratedConfiguration.modify
				(
				''''insert
						<endpoint name="'' + @BindingName + ''_IPubSubService"
								  address="'' + @ChannelAddress + ''"
								  binding="'' + @BindingType + ''" bindingConfiguration="'' + @BindingName + ''"
								  contract="ServiceBus.PubSub.IPubSubService" />
				  as last
				  into ( Channel[ Name[ text()="'' + @ChannelName + ''" ] ]/ServiceModel/client )[ 1 ]''''
				)
		WHERE	ChangeSet = '' + @ChangeSetId + ''
				AND
				Fragment = '''''' + @FragmentId + ''''''''
	)

	-- Ensure that customBinding has reliableSession configured with maxRetryCount = 4
	IF ( LTRIM( RTRIM( @BindingType ) ) = ''customBinding'' )
	BEGIN
		DECLARE @BindingAdded bit
		DECLARE @ReliableSessionAdded bit
		DECLARE @MaxRetryCount int
		
		SET @Statement =
			''SELECT	@BindingAdded = MigratedConfiguration.exist( ''''Channel[ Name[ text()="'' + @ChannelName + ''" ] ]/BindingXml/bindings/customBinding/binding'''' ),
					@ReliableSessionAdded = MigratedConfiguration.exist( ''''Channel[ Name[ text()="'' + @ChannelName + ''" ] ]/BindingXml/bindings/customBinding/binding/reliableSession'''' ),
					@MaxRetryCount = MigratedConfiguration.value( ''''( Channel[ Name[ text()="'' + @ChannelName + ''" ] ]/BindingXml/bindings/customBinding/binding/reliableSession/@maxRetryCount )[ 1 ]'''', ''''int'''' )
			FROM	#ChannelsMigration
			WHERE	ChangeSet = '' + CONVERT( varchar(11), @ChangeSetId ) + ''
					AND
					Fragment = '''''' + CONVERT( varchar(36), @FragmentId ) + ''''''''
			
		EXECUTE sp_executesql
			@Statement,
			N''@BindingAdded bit OUTPUT, @ReliableSessionAdded bit OUTPUT, @MaxRetryCount int OUTPUT'',
			@BindingAdded = @BindingAdded OUTPUT,
			@ReliableSessionAdded = @ReliableSessionAdded OUTPUT,
			@MaxRetryCount = @MaxRetryCount OUTPUT

		IF ( @BindingAdded = 1 )
		BEGIN
			IF ( @ReliableSessionAdded = 0 )
			BEGIN
				EXEC
				(
					''UPDATE	#ChannelsMigration
					SET		MigratedConfiguration.modify
							(
							''''insert
									<reliableSession maxRetryCount="4" acknowledgementInterval="00:00:00.2000000" flowControlEnabled="true"
													 inactivityTimeout="Infinite" maxPendingChannels="3000" maxTransferWindowSize="4096" ordered="true" />
							  as first
							  into ( Channel[ Name[ text()="'' + @ChannelName + ''" ] ]/BindingXml/bindings/customBinding/binding )[ 1 ]''''
							)
					WHERE	ChangeSet = '' + @ChangeSetId + ''
							AND
							Fragment = '''''' + @FragmentId + ''''''''
				)
			END
			ELSE IF ( @MaxRetryCount IS NULL )
			BEGIN
				EXEC
				(
					''UPDATE	#ChannelsMigration
					SET		MigratedConfiguration.modify
							(
							''''insert attribute
									maxRetryCount { "4" }
							  into ( Channel[ Name[ text()="'' + @ChannelName + ''" ] ]/BindingXml/bindings/customBinding/binding/reliableSession )[ 1 ]''''
							)
					WHERE	ChangeSet = '' + @ChangeSetId + ''
							AND
							Fragment = '''''' + @FragmentId + ''''''''
				)
			END
			ELSE IF ( @MaxRetryCount <> 4 )
			BEGIN
				EXEC
				(
					''UPDATE	#ChannelsMigration
					SET		MigratedConfiguration.modify
							(
							''''replace value of
									( Channel[ Name[ text()="'' + @ChannelName + ''" ] ]/BindingXml/bindings/customBinding/binding/reliableSession/@maxRetryCount )[ 1 ]
							  with 4''''
							)
					WHERE	ChangeSet = '' + @ChangeSetId + ''
							AND
							Fragment = '''''' + @FragmentId + ''''''''
				)
			END
		END
	END

	-- Get WCF bindings configuration
	SET		@Bindings = NULL
	SET		@Statement = 
		N''SELECT	@Bindings = CONVERT
			( varchar( max ), MigratedConfiguration.query
				(
					''''Channel[ Name[ text()="'' + @ChannelName + ''" ] ]/BindingXml/bindings''''
				)
			)
		FROM	#ChannelsMigration
		WHERE	ChangeSet = '' + CONVERT( varchar(11), @ChangeSetId ) + ''
				AND
				Fragment = '''''' + CONVERT( varchar(36), @FragmentId ) + ''''''''

	EXECUTE sp_executesql @Statement, N''@Bindings varchar( max ) OUTPUT'', @Bindings = @Bindings OUTPUT
			
	-- Insert obtained WCF bindings configuration
	EXEC
	(
		''UPDATE	#ChannelsMigration
		SET		MigratedConfiguration.modify
				(
				''''insert
						'' + @Bindings + ''
				  as last
				  into ( Channel[ Name[ text()="'' + @ChannelName + ''" ] ]/ServiceModel )[ 1 ]''''
				)
		WHERE	ChangeSet = '' + @ChangeSetId + ''
				AND
				Fragment = '''''' + @FragmentId + ''''''''
	)
	
	-- Delete Address, MaxCommunicationRetries, WaitBetweenRetries, ConnectionSettings and BindingXml elements
	SET	@DeleteStatementStart = 
		''UPDATE	#ChannelsMigration
		SET		MigratedConfiguration.modify
				(
					''''delete ( Channel[ Name[ text()="'' + @ChannelName + ''" ] ]/''
	SET	@DeleteStatementEnd =
		'')''''
				)
		WHERE	ChangeSet = '' + CONVERT( varchar(11), @ChangeSetId ) + ''
				AND
				Fragment = '''''' + CONVERT( varchar(36), @FragmentId ) + ''''''''
		
	SET	@Statement = @DeleteStatementStart + ''Address'' + @DeleteStatementEnd
	EXEC( @Statement )

	SET	@Statement = @DeleteStatementStart + ''MaxCommunicationRetries'' + @DeleteStatementEnd
	EXEC( @Statement )
	
	SET	@Statement = @DeleteStatementStart + ''WaitBetweenRetries'' + @DeleteStatementEnd
	EXEC( @Statement )
	
	SET	@Statement = @DeleteStatementStart + ''ConnectionSettings'' + @DeleteStatementEnd
	EXEC( @Statement )
	
	SET	@Statement = @DeleteStatementStart + ''BindingXml'' + @DeleteStatementEnd
	EXEC( @Statement )

	-- Replace any channel name TestChannel with General
	IF ( LTRIM( RTRIM( @ChannelName ) ) = ''TestChannel'' )
	BEGIN
		-- Change the channel name to General
		EXEC
		(
			''UPDATE	#ChannelsMigration
			SET		MigratedConfiguration.modify
					(
					''''replace value of
						( Channel/Name[ text()="'' + @ChannelName + ''" ]/text() )[ 1 ]
					 with "General"''''
					)
			WHERE	ChangeSet = '' + @ChangeSetId + ''
					AND
					Fragment = '''''' + @FragmentId + ''''''''
		)
	
		-- Change the name of the fragment containing the channel
		UPDATE	#ChannelsMigration
		SET		NewFragmentName = ''Channel.General''
		WHERE	ChangeSet = @ChangeSetId
				AND
				Fragment = @FragmentId
				AND
				ChannelName = @ChannelName
	END

	-- Mark channel configuration as migrated
	UPDATE	#ChannelsMigration
	SET		IsMigrated = 1
	WHERE	ChangeSet = @ChangeSetId
			AND
			Fragment = @FragmentId
			AND
			ChannelName = @ChannelName
END

-- Now use migrated channel configuration to update current configuration
UPDATE	#Upgrade_Fragments
SET		[Name] = NewFragmentName,
		Contents = cm.MigratedConfiguration
FROM	#ChannelsMigration cm
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @PUBSUB_CONFIGURATION
		AND
		ChangeSetId = cm.ChangeSet
		AND
		Id = cm.Fragment

-- Drop the temporary table containing information about migrated channels configuration
DROP TABLE #ChannelsMigration

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50397448,
	1,
	@Script
)

----
-- 3.1.1.9.01-27232.sql
----
SET	@Id = '{BC53AA04-0F84-4522-9DA2-594AFE8D5890}'
SET	@Script =
'
--
-- Declare and initialize constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

DECLARE	@PUBSUB_CONFIGURATION uniqueidentifier
SET		@PUBSUB_CONFIGURATION = ''{4C93E0C6-A9A6-46ec-81CD-4AAE4F3608BB}''

DECLARE @CONFIGURATION_POOL_ADDRESS_MACRO_NAME varchar(100)
SET		@CONFIGURATION_POOL_ADDRESS_MACRO_NAME = ''CONFIGURATION.POOL.ADDRESS''

DECLARE @CONFIGURATION_POOL_ADDRESS_MACRO_VALUE varchar(100)
SET		@CONFIGURATION_POOL_ADDRESS_MACRO_VALUE = ''localhost''

DECLARE @CONFIGURATION_POOL_ADDRESS uniqueidentifier
SET		@CONFIGURATION_POOL_ADDRESS = ''{BBF951EF-97A9-4485-96C9-AC06EC7B6545}''

DECLARE @PUBSUB_CONFIGURATION_WCF1_PORT_MACRO_NAME varchar(100)
SET		@PUBSUB_CONFIGURATION_WCF1_PORT_MACRO_NAME = ''PUBSUB.CONFIGURATION.WCF1.PORT''

DECLARE @PUBSUB_CONFIGURATION_WCF1_PORT uniqueidentifier
SET		@PUBSUB_CONFIGURATION_WCF1_PORT = ''{1E64823A-B8AE-4f84-B895-17EF04703206}''

--
-- 1. Extract PubSub channel address to macros
--
BEGIN TRANSACTION

CREATE TABLE #ChannelsMigration
(
	ChangeSet int,
	Fragment uniqueidentifier,
	ChannelName varchar( 256 ),
	ChannelAddress varchar( 1024 ),
	MigratedConfiguration xml,
	IsMigrated bit
)

INSERT INTO #ChannelsMigration
SELECT	ChangeSetId,
		Id,
		[Name],
		Channel.value( ''( ServiceModel/client/endpoint/@address )[ 1 ]'', ''varchar( 1024 )'' ),-- AS ChannelAddress
		Contents,
		0	-- At the beginning, channel configuration is not migrated
FROM	#Upgrade_Fragments
		CROSS APPLY
		Contents.nodes( ''Channel'' ) AS Channels( Channel )
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @PUBSUB_CONFIGURATION
		AND
		RootXmlNode = ''Channels''
		AND
		Contents.exist( ''Channel'' ) = 1
	
DECLARE @ChangeSetId int
DECLARE @FragmentId uniqueidentifier
DECLARE @ChannelName varchar( 256 )
DECLARE @ChannelAddress varchar( 1024 )

WHILE EXISTS( SELECT ChangeSet FROM #ChannelsMigration WHERE IsMigrated = 0 )
BEGIN
	-- Select information about the channel for configuration migration
	SELECT TOP 1
			@ChangeSetId = ChangeSet,
			@FragmentId = Fragment,
			@ChannelName = ChannelName,
			@ChannelAddress = ChannelAddress
	FROM	#ChannelsMigration
	WHERE	IsMigrated = 0

	-- Replace machine name and port parts of the endpoint address with macros
	DECLARE @Length int
	DECLARE @StartPosition int		-- //
	DECLARE @MiddlePosition int		-- :
	DECLARE @EndPosition int		-- /
	DECLARE @MachineName varchar(250)
	DECLARE @PortNumber varchar(50)

	SELECT	@Length = DATALENGTH( @ChannelAddress ),
			@StartPosition = CHARINDEX( ''//'', @ChannelAddress, 0 ),
			@MiddlePosition = CHARINDEX( '':'', @ChannelAddress, @StartPosition ),
			@EndPosition = CHARINDEX( ''/'', @ChannelAddress, @MiddlePosition ),
			@MachineName = SUBSTRING( @ChannelAddress, @StartPosition + 2, @MiddlePosition - @StartPosition - 2 ),
			@PortNumber = SUBSTRING( @ChannelAddress, @MiddlePosition + 1, @EndPosition - @MiddlePosition - 1 )
			
	SET @CONFIGURATION_POOL_ADDRESS_MACRO_VALUE = @MachineName
	SET	@ChannelAddress = SUBSTRING( @ChannelAddress, 0, @StartPosition + 2 ) +
						  ''[DSCS:MACRO:'' + @CONFIGURATION_POOL_ADDRESS_MACRO_NAME + '']'' + '':'' +
						  ''[DSCS:MACRO:'' + @PUBSUB_CONFIGURATION_WCF1_PORT_MACRO_NAME + '']'' + 
						  SUBSTRING( @ChannelAddress, @EndPosition, @Length - @EndPosition + 1 )

	UPDATE	#ChannelsMigration
	SET		MigratedConfiguration.modify( ''replace value of (Channel/ServiceModel/client/endpoint/@address)[1] with sql:variable("@ChannelAddress")'' )
	WHERE	ChangeSet = @ChangeSetId
			AND
			Fragment = @FragmentId
			AND
			ChannelName = @ChannelName
	
	-- Mark channel configuration as migrated
	UPDATE	#ChannelsMigration
	SET		IsMigrated = 1
	WHERE	ChangeSet = @ChangeSetId
			AND
			Fragment = @FragmentId
			AND
			ChannelName = @ChannelName
END

-- Now use migrated channel configuration to update current configuration
UPDATE	#Upgrade_Fragments
SET		Contents = cm.MigratedConfiguration
FROM	#ChannelsMigration cm
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @PUBSUB_CONFIGURATION
		AND
		ChangeSetId = cm.ChangeSet
		AND
		Id = cm.Fragment

DROP TABLE #ChannelsMigration

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50397449,
	1,
	@Script
)

----
-- 3.1.1.9.02-27472.sql
----
SET	@Id = '{1038841E-4949-487C-89F2-1A1ACD0F05C2}'
SET	@Script =
'
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = ''{12BB99C3-3045-498d-BD54-D2690935D845}''

BEGIN TRANSACTION

CREATE TABLE #ChannelsMigration
(
	ChangeSet int,
	Fragment uniqueidentifier,
	ChannelName varchar( 256 ),
	MigratedConfiguration xml,
	IsMigrated bit
)

INSERT INTO #ChannelsMigration
SELECT	ChangeSetId,
		Id,
		Channel.value( ''( @name )[ 1 ]'', ''varchar( 256 )'' ),-- AS ChannelAddress
		Contents,
		0	-- At the beginning, channel configuration is not migrated
FROM	#Upgrade_Fragments
		CROSS APPLY
		Contents.nodes( ''ServicePool/RequestChannels/RequestChannel'' ) AS Channels( Channel )
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @SERVICEHOST
		AND
		RootXmlNode = ''ServicePools''
		AND
		Contents.exist( ''ServicePool/RequestChannels/RequestChannel'' ) = 1

DECLARE @ChangeSetId int
DECLARE @FragmentId uniqueidentifier
DECLARE @ChannelName varchar( 256 )

WHILE EXISTS( SELECT ChangeSet FROM #ChannelsMigration WHERE IsMigrated = 0 )
BEGIN
	-- Select information about the channel for configuration migration
	SELECT TOP 1
			@ChangeSetId = ChangeSet,
			@FragmentId = Fragment,
			@ChannelName = ChannelName
	FROM	#ChannelsMigration
	WHERE	IsMigrated = 0
	
	EXEC
	(
		''UPDATE #ChannelsMigration
		 SET MigratedConfiguration.modify
		 (
			''''replace value of ( .//RequestChannels/RequestChannel[@name="'' + @ChannelName + ''"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@maxPendingConnections )[ 1 ]
					  with "10"''''
		 )
		 WHERE	ChangeSet = '' + @ChangeSetId + ''
		 AND Fragment = '''''' + @FragmentId + ''''''
		 AND MigratedConfiguration.exist
		 (
			''''.//RequestChannels/RequestChannel[@name="'' + @ChannelName + ''"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@maxPendingConnections''''
		 ) = 1
		 ''
	)
	
	EXEC
	(
		''UPDATE #ChannelsMigration
		 SET MigratedConfiguration.modify
		 (
			''''replace value of ( .//RequestChannels/RequestChannel[@name="'' + @ChannelName + ''"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@maxPendingAccepts )[ 1 ]
					  with "10"''''
		 )
		 WHERE	ChangeSet = '' + @ChangeSetId + ''
		 AND Fragment = '''''' + @FragmentId + ''''''
		 AND MigratedConfiguration.exist
		 (
			''''.//RequestChannels/RequestChannel[@name="'' + @ChannelName + ''"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@maxPendingAccepts''''
		 ) = 1
		 ''
	)
	
	EXEC
	(
		''UPDATE #ChannelsMigration
		 SET MigratedConfiguration.modify
		 (
			''''replace value of ( .//RequestChannels/RequestChannel[@name="'' + @ChannelName + ''"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@listenBacklog )[ 1 ]
					  with "10"''''
		 )
		 WHERE	ChangeSet = '' + @ChangeSetId + ''
		 AND Fragment = '''''' + @FragmentId + ''''''
		 AND MigratedConfiguration.exist
		 (
			''''.//RequestChannels/RequestChannel[@name="'' + @ChannelName + ''"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@listenBacklog''''
		 ) = 1
		 ''
	)
	
	-- Mark channel configuration as migrated
	UPDATE	#ChannelsMigration
	SET		IsMigrated = 1
	WHERE	ChangeSet = @ChangeSetId
			AND
			Fragment = @FragmentId
			AND
			ChannelName = @ChannelName
END

-- Now use migrated channel configuration to update current configuration
UPDATE	#Upgrade_Fragments
SET		Contents = cm.MigratedConfiguration
FROM	#ChannelsMigration cm
WHERE	ChangeSetId = cm.ChangeSet
		AND
		Id = cm.Fragment

DROP TABLE #ChannelsMigration

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50397449,
	2,
	@Script
)

----
-- 3.1.1.10.01-27831.sql
----
SET	@Id = '{2BB1AB7E-470C-4988-AC3E-07374360F6E2}'
SET	@Script = 
'
--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = ''{12BB99C3-3045-498d-BD54-D2690935D845}''

--
-- 1. Move ServiceHostData to its own fragment
--
BEGIN TRANSACTION

-- Prepare list of names of element that will be moved to separate fragment
CREATE TABLE #Elements
(
	Name varchar( 20 )
)
INSERT INTO #Elements
SELECT ''ServiceHostData''
UNION
SELECT ''ServicePermissions''

-- Create table that will temporarily hold new fragments
CREATE TABLE #NewFragments
(
	ChangeSetId int,
	ChangeType varchar(10),
	ServiceFragmentId uniqueidentifier,
	Id uniqueidentifier,
	RootGroupId uniqueidentifier,
	Name varchar(250),
	Description varchar(1024),
	SectionId uniqueidentifier,
	RootXmlNode varchar(1024),
	Contents xml
)

DECLARE @ElementName varchar( 20 )
WHILE ( EXISTS ( SELECT Name FROM #Elements ) )
BEGIN
	-- Select one name from the list
	SELECT TOP 1
			@ElementName = Name	
	FROM	#Elements

	-- Populate temporary NewFragments table
	INSERT INTO #NewFragments
	SELECT	
			f.ChangeSetId,
			f.ChangeType,
			f.Id AS ServiceFragmentId,
			NEWID() AS Id, -- Generate new fragment id
			f.RootGroupId,
			f.Name + ''.'' + @ElementName AS Name,
			f.[Description] + '' '' + @ElementName AS [Description],
			f.SectionId,
			f.RootXmlNode + ''/Service name="'' + f.Contents.value( ''(Service/@name)[1]'', ''varchar( MAX )'' ) + ''"'' AS RootXmlNode,
			Element.query( ''.'' ) AS Contents
	FROM	#Upgrade_Fragments f
			cross apply
			f.Contents.nodes( ''Service/*[local-name()=sql:variable( "@ElementName" )]'' ) AS [Service]( Element )
	WHERE	f.SectionId = @SERVICEHOST
			and
			LTRIM( f.RootXmlNode ) like ''Services%''

	-- Remove the element from every Service that has it
	UPDATE	#Upgrade_Fragments
	SET		Contents.modify( ''delete (Service/*[local-name()=sql:variable( "@ElementName" )])'' )
	FROM	#Upgrade_Fragments f
			JOIN
			#NewFragments nf
				ON	nf.ServiceFragmentId = f.Id

	-- Exclude all potential fragments without any element
	DELETE FROM #NewFragments
	WHERE	LTRIM( RTRIM( CONVERT( varchar( MAX ), Contents.query( ''*'' ) ) ) ) = ''''
	
	
	-- Insert new fragments
	INSERT INTO #Upgrade_Fragments
	(
		ChangeSetId,
		ChangeType,
		Id,
		RootGroupId,
		Name,
		Description,
		SectionId,
		RootXmlNode,
		Contents,
		AddMultiple
	)
	SELECT	nf.ChangeSetId,
			nf.ChangeType,
			nf.Id,
			nf.RootGroupId,
			nf.Name,
			nf.[Description],
			nf.SectionId,
			nf.RootXmlNode,
			nf.Contents,
			0
	FROM	#NewFragments nf
	WHERE	nf.ChangeType = ''INSERT''

	-- Insert associations for new fragments
	INSERT INTO #Upgrade_GroupFragments
	SELECT	nf.ChangeSetId,
			nf.ChangeType,
			agf.RootGroupId,
			agf.GroupId,
			nf.Id AS FragmentId
	FROM	#NewFragments nf
			JOIN
			#Upgrade_GroupFragments agf
				ON	agf.FragmentId = nf.ServiceFragmentId
	WHERE	nf.ChangeType = ''INSERT''
	
	-- Remove inserted fragments from temporary table
	DELETE FROM #NewFragments
	WHERE	ChangeType = ''INSERT''
	
	
	-- If some of the service sub-fragments (ServiceHostData, ServicePermissions) 
	-- that were marked for update do not exist, change their change type to INSERT
	UPDATE	#NewFragments
	SET		ChangeType = ''INSERT''
	FROM	#NewFragments nf
			LEFT JOIN
			Active_Fragments f
				ON nf.Name = f.Name
	WHERE	nf.ChangeType = ''UPDATE''
			AND
			f.Name IS NULL
	
	-- Ensure that the service sub-fragments (ServiceHostData, ServicePermissions) 
	-- that were marked for update have valid IDs
	UPDATE	#NewFragments
	SET		Id = f.Id
	FROM	#NewFragments nf
			JOIN
			Active_Fragments f
				ON nf.Name = f.Name
	WHERE	nf.ChangeType = ''UPDATE''
	
	-- Insert all fragments whose change type is UPDATE or was changed from UPDATE to INSERT
	INSERT INTO #Upgrade_Fragments
	(
		ChangeSetId,
		ChangeType,
		Id,
		RootGroupId,
		Name,
		Description,
		SectionId,
		RootXmlNode,
		Contents,
		AddMultiple
	)
	SELECT	nf.ChangeSetId,
			nf.ChangeType,
			nf.Id,
			nf.RootGroupId,
			nf.Name,
			nf.[Description],
			nf.SectionId,
			nf.RootXmlNode,
			nf.Contents,
			0
	FROM	#NewFragments nf
	WHERE	nf.ChangeType = ''INSERT''
			OR
			nf.ChangeType = ''UPDATE''
	
	-- Copy all associations to active service fragment to 
	-- any fragment whose change type was changed from UPDATE to INSERT as well
	INSERT INTO #Upgrade_GroupFragments
	SELECT	nf.ChangeSetId,
			nf.ChangeType,
			agf.RootGroupId,
			agf.GroupId,
			nf.Id AS FragmentId
	FROM	#NewFragments nf
			JOIN
			Active_GroupFragments agf
				ON	agf.FragmentId = nf.ServiceFragmentId
	WHERE	nf.ChangeType = ''INSERT''
	
	-- Remove processed fragments from temporary table
	DELETE FROM #NewFragments
	WHERE	ChangeType = ''INSERT''
			OR
			ChangeType = ''UPDATE''
	
	
	-- If any fragment that was marked for deletion does not exist, 
	-- remove it from list of fragments to be inserted into pending table	
	DELETE	#NewFragments
	FROM	#NewFragments nf
			LEFT JOIN
			Active_Fragments f
				ON nf.Name = f.Name
	WHERE	nf.ChangeType = ''DELETE''
			AND
			f.Name IS NULL

	-- Insert all fragment whose change type is DELETE
	INSERT INTO #Upgrade_Fragments
	(
		ChangeSetId,
		ChangeType,
		Id,
		RootGroupId,
		Name,
		Description,
		SectionId,
		RootXmlNode,
		Contents,
		AddMultiple
	)
	SELECT	nf.ChangeSetId,
			nf.ChangeType,
			nf.Id,
			nf.RootGroupId,
			nf.Name,
			nf.[Description],
			nf.SectionId,
			nf.RootXmlNode,
			nf.Contents,
			0
	FROM	#NewFragments nf
	WHERE	nf.ChangeType = ''DELETE''
	

	-- Delete the name from the list
	DELETE FROM #Elements
	WHERE	Name = @ElementName
	
	-- Delete all new fragments from temporary table
	DELETE FROM #NewFragments
END

-- Drop temporary tables
DROP TABLE #NewFragments

-- Prepare list of names of element that will be moved to separate fragment (again)
INSERT INTO #Elements
SELECT ''ServiceHostData''
UNION
SELECT ''ServicePermissions''

WHILE ( EXISTS ( SELECT Name FROM #Elements ) )
BEGIN
	-- Select one name from the list
	SELECT TOP 1
			@ElementName = Name	
	FROM	#Elements

	-- Determine from which service sub-fragments (ServiceHostData, ServicePermissions)
	-- the associations should be removed and
	-- mark the sub-fragments association(s) for deletion
	INSERT INTO #Upgrade_GroupFragments
	SELECT	dfl.ChangeSetId,
			dfl.ChangeType,
			dfl.RootGroupId,
			dfl.GroupId,
			n.Id
	FROM	#Upgrade_GroupFragments dfl
			JOIN
			Active_Fragments f
				ON	dfl.RootGroupId = f.RootGroupId
					AND
					dfl.FragmentId = f.Id
			JOIN
			Active_Fragments n
				ON f.Name + ''.'' + @ElementName = n.Name
	WHERE	dfl.ChangeType = ''DELETE''
			AND
			f.SectionId = @SERVICEHOST
			and
			LTRIM( f.RootXmlNode ) like ''Services%''
			AND
			f.Contents.exist( ''Service'' ) = 1
			AND
			n.Contents.exist( ''*[local-name()=sql:variable( "@ElementName" )]'' ) = 1
			
	-- Delete the name from the list
	DELETE FROM #Elements
	WHERE	Name = @ElementName
END

DROP TABLE #Elements

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50397450,
	1,
	@Script
)

----
-- 3.1.1.12.01-29334.sql
----
SET	@Id = '{6BE47721-E51F-4EF0-8E50-BC4BF41B4925}'
SET	@Script = 
'
--
-- Declare and initialize section ID constants
--
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = ''{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}''

BEGIN TRANSACTION

--
-- 1. Select fragment(s) containing ServiceCatalog configuration.
--
DECLARE @Ids TABLE
(
	ChangeSet int,
	RootGroup uniqueidentifier,
	-- There is no need for column for section identifier as we will use appropriate section id constant
	--Section uniqueidentifier,
	Fragment uniqueidentifier
)
INSERT INTO @Ids
SELECT	ChangeSetId,
		RootGroupId,
		Id
FROM	#Upgrade_Fragments
WHERE	SectionId = @ADMINISTRATION_CONFIGURATION
		AND
		( RootXmlNode IS NULL OR LTRIM( RTRIM( RootXmlNode ) ) = '''' )
		AND
		Contents.exist( ''Controls/Control[ConfigurationPath[text()="ServiceBus.ServiceHost/Services"]]'' ) = 1

--
-- 2. Ensure that ControlData element exists in the selected fragment(s).
--
UPDATE	#Upgrade_Fragments
SET		Contents.modify
		(
			''insert
					<ControlData />
			 as last
			 into ( Controls/Control[ConfigurationPath[text()="ServiceBus.ServiceHost/Services"]] )[ 1 ] ''
		)
FROM	#Upgrade_Fragments f
		JOIN
		@Ids i
			ON	f.ChangeSetId = i.ChangeSet
				AND
				f.RootGroupId = i.RootGroup
				AND
				f.SectionId = @ADMINISTRATION_CONFIGURATION
				AND
				f.Id = i.Fragment
WHERE	f.Contents.exist( ''( Controls/Control[ConfigurationPath[text()="ServiceBus.ServiceHost/Services"]] )[ 1 ]/ControlData'' ) = 0

--
-- 3. Update ControlData element(s) to insert common test case assertion attributes.
--
UPDATE	#Upgrade_Fragments
SET		Contents.modify
		(
			''insert
					<Service>
						<TestCases>
							<Assertion>
								<Attributes>
									<Attribute name="ServicePool.InvokeService.Duration" />
									<Attribute name="ServiceHost.InvokeService.Duration" />
									<Attribute name="ServiceHost.RequestedPriority" />
									<Attribute name="ServiceHost.RequestedExecutionType" />
									<Attribute name="ServicePool.ExecutionType" />
									<Attribute name="ServiceHost.IsTestCase" />
									<Attribute name="ServiceHost.TestCase.Name" />
								</Attributes>
							</Assertion>
						</TestCases>
					</Service>
			 as first
			 into ( Controls/Control[ConfigurationPath[text()="ServiceBus.ServiceHost/Services"]]/ControlData )[ 1 ] ''
		)
FROM	#Upgrade_Fragments f
		JOIN
		@Ids i
			ON	f.ChangeSetId = i.ChangeSet
				AND
				f.RootGroupId = i.RootGroup
				AND
				f.SectionId = @ADMINISTRATION_CONFIGURATION
				AND
				f.Id = i.Fragment

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50397452,
	1,
	@Script
)

----
-- 3.2.0.4.01-29334.sql
----
SET	@Id = '{089409AC-1B30-4B86-9948-18EDB3C907ED}'
SET	@Script = 
'
BEGIN TRANSACTION

	-- Create table that will temporarily hold matching fragments
	CREATE TABLE #UpdatedFragments
	(
		Changeset int,
		RootGroup uniqueidentifier,
		Fragment uniqueidentifier,
		NewContents xml,
		IsProcessed bit
	)
	
	-- Populate temporary table with fragments that contain New key node
	INSERT INTO #UpdatedFragments
	SELECT		ChangeSetId,
				RootGroupId,
				Id,
				Contents,
				0 -- At the beginning, fragments are not processed
	FROM		#Upgrade_Fragments
	WHERE		Contents.exist( ''//Dictionary/Add/New'' ) = 1
	
	DECLARE @HasMore bit
	DECLARE @Changeset int
	DECLARE @RootGroup uniqueidentifier
	DECLARE @Fragment uniqueidentifier
	DECLARE @Contents xml
	DECLARE @Position int	
	
	SET		@HasMore = 1
	WHILE	( @HasMore = 1 )
		BEGIN
			-- Select next unprocessed fragment
			SELECT	@Changeset = Changeset, @RootGroup = RootGroup, @Fragment = Fragment, @Contents = NewContents
			FROM	#UpdatedFragments
			WHERE	IsProcessed = 0
			
			IF @Changeset IS NULL
				SET @HasMore = 0
			ELSE
				BEGIN
					-- Prepare new contents
					SET		@Position = 1
					WHILE	( @Contents.exist(''(//Dictionary/Add/New)[sql:variable("@Position")]'') = 1 )
						BEGIN
							SET	@Contents.modify
							(''
								insert <Key><New /></Key> after ((//Dictionary/Add/New)[sql:variable("@Position")])[1]
							 '')	
							
							SET	@Position = @Position + 1	
						END		
					
					-- Update contents and mark fragment as processed
					UPDATE	#UpdatedFragments
					SET		NewContents = @Contents,
							IsProcessed = 1
					WHERE	Changeset = @Changeset
					AND		RootGroup = @RootGroup
					AND		Fragment = @Fragment
				END
			
			-- Reset Id
			SET	@Changeset = NULL
		END
		
	Update	#UpdatedFragments 
	SET		NewContents.modify(''delete //Dictionary/Add/New'')
	
	-- Update original fragment
	UPDATE	#Upgrade_Fragments
	SET		Contents = NewContents
	FROM	#UpdatedFragments
	WHERE	ChangeSetId = Changeset
	AND		RootGroupId = RootGroup
	AND		Id = Fragment

	-- Drop temporary table containing the updated fragments
	DROP TABLE #UpdatedFragments

COMMIT TRANSACTION

'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50462724,
	1,
	@Script
)


----
-- 3.2.0.4.02-29334.sql
----
SET	@Id = '{CB95B6E4-3404-4A64-98EA-EA977038463E}'
SET	@Script = 
'
BEGIN TRANSACTION
			
	------------------------------------------------------
	-- Add Supported to Request Queues
	------------------------------------------------------
	UPDATE	#Upgrade_Fragments 
	SET		Contents.modify(''insert <Supported><Synchronous /></Supported> 
				as first into (./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="PassThrough"]])[1]'')
	WHERE	RootXmlNode = ''ServicePools''
	AND		Contents.exist(''./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="PassThrough"]]'') = 1
	AND		Contents.exist(''./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="PassThrough"]]/Supported'') = 0
	
	UPDATE	#Upgrade_Fragments 
	SET		Contents.modify(''insert <Supported><Asynchronous /></Supported>
				as first into (./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="Msmq"]])[1]'')
	WHERE	RootXmlNode = ''ServicePools''
	AND		Contents.exist(''./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="Msmq"]]'') = 1
	AND		Contents.exist(''./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="Msmq"]]/Supported'') = 0

	------------------------------------------------------
	-- Add Queues that are missing to ThreadPool Request Scheduler
	------------------------------------------------------
	
	CREATE TABLE #QueuesMigration
	(
		Changeset int,
		RootGroup uniqueidentifier,
		Fragment uniqueidentifier,
		QueueName varchar( 256 ),
		MigratedConfiguration xml,
		IsMigrated bit
	)

	INSERT INTO #QueuesMigration
	SELECT	ChangeSetId,
			RootGroupId,
			Id,
			RequestQueue.value( ''( @name )[ 1 ]'', ''varchar( 1024 )'' ),
			Contents,
			0	-- At the beginning, queue configuration is not migrated
	FROM	#Upgrade_Fragments
			CROSS APPLY
			Contents.nodes( ''./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue'' ) AS RequestQueues( RequestQueue )
	WHERE	RootXmlNode = ''ServicePools''
		
	DECLARE @Changeset int
	DECLARE @RootGroup uniqueidentifier
	DECLARE @Fragment uniqueidentifier
	DECLARE @QueueName varchar( 256 )

	WHILE EXISTS( SELECT Changeset FROM #QueuesMigration WHERE IsMigrated = 0 )
	BEGIN
		-- Select information about the channel for configuration migration
		SELECT TOP 1
				@Changeset = Changeset,
				@RootGroup = RootGroup,
				@Fragment = Fragment,
				@QueueName = QueueName
		FROM	#QueuesMigration
		WHERE	IsMigrated = 0

		UPDATE	#Upgrade_Fragments
		SET		Contents.modify(''insert
				<RequestQueue name="3A2090D2-3351-4CA4-9B39-63DD1083A1A1">
					<ThreadCleanupMode>Synchronous</ThreadCleanupMode>
					<ReservedThreads>10</ReservedThreads>
					<MaxThreads>15</MaxThreads>
				</RequestQueue>
				as first into (./ServicePool/ServiceRequestManager/RequestScheduler/RequestSchedulerFactoryData[@name="ThreadPool"]/RequestQueues)[1]'')
		WHERE	ChangeSetId = @Changeset
		AND		RootGroupId = @RootGroup
		AND		Id = @Fragment
		AND		Contents.exist(''(./ServicePool/ServiceRequestManager/RequestScheduler/RequestSchedulerFactoryData[@name="ThreadPool"]/RequestQueues/RequestQueue/@name)[. = sql:variable("@QueueName")]'') = 0
		
		UPDATE	#Upgrade_Fragments
		SET		Contents.modify( ''replace value of (./ServicePool/ServiceRequestManager/RequestScheduler/RequestSchedulerFactoryData[@name="ThreadPool"]/RequestQueues/RequestQueue[@name="3A2090D2-3351-4CA4-9B39-63DD1083A1A1"]/@name)[1] with sql:variable("@QueueName")'' )
		WHERE	ChangeSetId = @Changeset
		AND		RootGroupId = @RootGroup
		AND		Id = @Fragment
		
		-- Mark configuration as migrated
		UPDATE	#QueuesMigration
		SET		IsMigrated = 1
		WHERE	Changeset = @Changeset
		AND		RootGroup = @RootGroup
		AND		Fragment = @Fragment
		AND		QueueName = @QueueName

	END

	DROP TABLE #QueuesMigration

COMMIT TRANSACTION

'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50462724,
	2,
	@Script
)


----
-- 3.2.0.16.01-29334.sql
----
SET	@Id = '{E30D01F8-78E0-4FDB-9C95-C00EF1A44B2D}'
SET	@Script = 
'BEGIN TRANSACTION
	DECLARE @ID UNIQUEIDENTIFIER;
	DECLARE @CHANGESETID INT;
	DECLARE @FRAGMENT XML;
	DECLARE @NAME VARCHAR(250);
	DECLARE @PROCESSED BIT;
	DECLARE @FULLMACRONAME VARCHAR(250);
	DECLARE @MACRONAME VARCHAR(250);
	DECLARE @MACROID UNIQUEIDENTIFIER;
	DECLARE @MACROVALUE VARCHAR(250);
	
	-- Declare and initialize ID constants
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'' -- ServiceBus
	DECLARE @SERVICE_HOST uniqueidentifier
	SET		@SERVICE_HOST = ''{4FF5DBB5-A888-4C76-B222-8EE53950E511}'' -- ServiceBus ServiceHost Service	
	
	-- PREPARE ROWS TO PROCESS
		
	IF OBJECT_ID(''tempdb..#ServicePoolMacroUpdate'') IS NOT NULL
		DROP TABLE #ServicePoolMacroUpdate
	CREATE TABLE #ServicePoolMacroUpdate
		(
			PoolId UNIQUEIDENTIFIER,
			PoolFragment XML,
			PoolName VARCHAR(250),
			ChangesetId INT,
			PoolProcessed BIT
		) 
		
	-- GET ALL SERVICE POOL FRAGMENTS WITH LOCAL ELEMENT VALUE SET TO HARDCODED VALUE

	INSERT INTO 
		#ServicePoolMacroUpdate( PoolId, PoolFragment, PoolName, ChangesetId, PoolProcessed )
	SELECT 
		Id, Contents, Name, ChangeSetId, 0
	FROM 
		#Upgrade_Fragments
	WHERE
		Contents.exist(''/ServicePool'')=1
		AND Name LIKE ''ServicePool.%''
		AND 
		(
			Contents.value(''(ServicePool/Local)[1]'', ''nvarchar(max)'' ) NOT LIKE ''[[]DSCS:MACRO:%''
		)

	-- PROCESS ROWS

	WHILE EXISTS( SELECT PoolId FROM #ServicePoolMacroUpdate WHERE PoolProcessed = 0 )
	BEGIN

		-- GET NEXT ROW
		
		SELECT TOP (1)
			@ID = PoolId,
			@FRAGMENT = PoolFragment,
			@NAME = PoolFragment.value(''(/ServicePool/@name)[1]'', ''varchar(250)''),
			@MACROVALUE = PoolFragment.value(''(/ServicePool/Local/text())[1]'', ''varchar(250)''),
			@CHANGESETID = ChangesetId,
			@PROCESSED = PoolProcessed
		FROM 
			#ServicePoolMacroUpdate
		WHERE
			PoolProcessed =  0;
		
		-- UPDATE PROCESSED ROW STATUS
		
		UPDATE #ServicePoolMacroUpdate SET PoolProcessed = 1 WHERE PoolId = @ID;
		
		-- PROCESS SERVICE POOL XML FRAGMENT
		
		SET @FULLMACRONAME = ''[DSCS:MACRO:SP.''+ @NAME +''.LOCAL]'';
		UPDATE 
			#Upgrade_Fragments 
		SET 
			Contents.modify(''replace value of (/ServicePool/Local/text())[1] with sql:variable("@FULLMACRONAME")'')
		WHERE 
			Id = @ID;
		
		-- PROCESS MACRO RECORD
		
		SET @MACRONAME = ''SP.''+ @NAME +''.LOCAL'';
		IF ( NOT EXISTS ( SELECT Id FROM #Upgrade_Macros WHERE LOWER(Name) = LOWER(@MACRONAME) ) )
			BEGIN
			
				-- CREATE NEW MACRO 
				
				SET @MACROID = NEWID();
				INSERT INTO #Upgrade_Macros
				(
					Id,
					RootGroupId,
					Name,
					Description,
					ValueType,
					ChangeSetId,
					ChangeType
				)
				VALUES
				( 
					@MACROID,
					@ROOT_GROUP_ID,
					UPPER(@MACRONAME),
					''Indicates whether ServicePool ''+ @NAME +'' is local'',
					''System.String'',
					@CHANGESETID,
					''INSERT''
				)
				-- CREATE NEW MACRO VALUES
				IF ( NOT EXISTS ( SELECT MacroId FROM #Upgrade_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICE_HOST AND MacroId = @MACROID ) )
				BEGIN
				
					-- ENVIRONMENT
					
					INSERT INTO #Upgrade_GroupMacroValues
					(
						RootGroupId,
						GroupId,
						MacroId,
						Value,
						ChangeSetId,
						ChangeType
					)
					VALUES
					(
						@ROOT_GROUP_ID,
						@ROOT_GROUP_ID,
						@MACROID,
						''False'',
						@CHANGESETID,
						''INSERT''
					)
				END
				
				IF ( NOT EXISTS ( SELECT MacroId FROM #Upgrade_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICE_HOST AND MacroId = @MACROID ) )
				BEGIN
				
					-- SERVICE HOST APPLICATION
				
					INSERT INTO #Upgrade_GroupMacroValues
					(
						RootGroupId,
						GroupId,
						MacroId,
						Value,
						ChangeSetId,
						ChangeType
					)
					VALUES
					(
						@ROOT_GROUP_ID,
						@SERVICE_HOST,
						@MACROID,
						@MACROVALUE,
						@CHANGESETID,
						''INSERT''
					)
				END
				
				-- UPDATE SERVICE GROUPS
				
				UPDATE 
					#Upgrade_GroupMacroValues
				SET
					#Upgrade_GroupMacroValues.Value = ''False'',
					#Upgrade_GroupMacroValues.ChangeSetId = @CHANGESETID,
					#Upgrade_GroupMacroValues.ChangeType = ''UPDATE''
				FROM
					#Upgrade_GroupMacroValues
				INNER JOIN
					#Upgrade_Groups
				ON 
					#Upgrade_GroupMacroValues.GroupId = #Upgrade_Groups.Id
				WHERE
					#Upgrade_GroupMacroValues.MacroId = @MACROID AND 
					#Upgrade_Groups.Name LIKE ''ServerGroup[.]%'' AND
					#Upgrade_GroupMacroValues.Value <> ''False''
			END
		ELSE
			
			-- MACRO ALREADY EXISTS
			
			BEGIN 
				
				-- GET EXISTING MACRO
			
				SET @MACROID = ( SELECT Id FROM #Upgrade_Macros WHERE LOWER(Name) = LOWER(@MACRONAME) );
				IF ( @MACROID IS NOT NULL )
				BEGIN
				
					-- DELETE ALL MACRO VALUES OUTSIDE OF SERVICEHOST APPLICATION 
					-- Note: Macro values from child groups of service host application are not deleted
					
					DELETE
					FROM 
						#Upgrade_GroupMacroValues 
					WHERE  
						MacroId = @MACROID AND
						Value = ''False'' AND 
						#Upgrade_GroupMacroValues.GroupId <> @SERVICE_HOST AND
						#Upgrade_GroupMacroValues.GroupId NOT IN ( SELECT ChildGroupId FROM #Upgrade_GroupGroups WHERE GroupId = @SERVICE_HOST )

					-- CHECK IF MACRO REFERENCE EXIST ON ROOT LEVEL
					
					IF NOT EXISTS ( SELECT MacroId FROM #Upgrade_GroupMacroValues WHERE MacroId = @MACROID AND GroupId = @ROOT_GROUP_ID )
						BEGIN
							
							-- ENVIRONMENT LEVEL
							
							INSERT INTO 
								#Upgrade_GroupMacroValues
								( 
									RootGroupId, 
									GroupId, 
									MacroId, 
									Value, 
									ChangeSetId, 
									ChangeType 
								)
							VALUES 
								( 
									@ROOT_GROUP_ID, 
									@ROOT_GROUP_ID, 
									@MACROID, 
									''False'', 
									@CHANGESETID, 
									''INSERT'' 
								);
						END
					
					-- CHECK IF MACRO REFERENCE EXIST ON SERVICE HOST APPLICATION
					
					IF NOT EXISTS ( SELECT MacroId FROM #Upgrade_GroupMacroValues WHERE MacroId = @MACROID AND GroupId = @SERVICE_HOST )
						BEGIN
							
							-- SERVICE HOST APPLICATION
						
							INSERT INTO 
								#Upgrade_GroupMacroValues
									( 
										RootGroupId, 
										GroupId, 
										MacroId, 
										Value, 
										ChangeSetId, 
										ChangeType 
									)
							VALUES 
									( 
										@ROOT_GROUP_ID, 
										@SERVICE_HOST, 
										@MACROID, 
										@MACROVALUE, 
										@CHANGESETID, 
										''INSERT'' 
									);
						END
				END
			END	
	END
	DROP TABLE #ServicePoolMacroUpdate;
COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50462736,
	1,
	@Script
)


----
-- 3.2.0.20.01-37670.sql
----
SET	@Id = '{CC636C0E-3F55-4E3A-A5F8-55581C1A36BC}'
SET	@Script = 
'
BEGIN TRANSACTION
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = ''{12BB99C3-3045-498d-BD54-D2690935D845}''

	--
	-- Declare variables
	--
	DECLARE @HostDataChangeSetId int				-- ChangeSetId of ServiceHostData fragment
	DECLARE @HostDataFragmentId uniqueidentifier	-- ID of ServiceHostData fragment
	DECLARE @HostDataRootGroupId uniqueidentifier	-- RootGroupId of ServiceHostData fragment
	DECLARE @ServiceName varchar(250)				-- Service name
	DECLARE @ServicePoolName varchar(250)			-- Service pool name

	DECLARE @AssociationChangeSetId int				-- ChangeSetId of service-service pool associations fragment
	DECLARE @ChangeType varchar(10)					-- Type of change made on service-service pool associations fragment
	DECLARE @AssociationId int						-- ReplicationId of service-service pool associations fragment
	DECLARE @AssociationFragmentId uniqueidentifier	-- ID of service-service pool associations fragment
	DECLARE @AssociationRootGroupId uniqueidentifier-- RootGroupId of service-service pool associations fragment
	DECLARE @AssociationContents xml				-- XML of service-service pool associations fragment
	DECLARE @ShouldDelete bit						-- Indicates whether association of current service 
													-- with current service pool needs to be deleted (1) or added (0)

	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	
	--
	-- Ensure that temporary tables HostData and ServicePoolServices do not exist
	--
	IF OBJECT_ID( ''tempdb..#HostData'' ) IS NOT NULL
		DROP TABLE #HostData

	IF OBJECT_ID( ''tempdb..#ServicePoolServices'' ) IS NOT NULL
		DROP TABLE #ServicePoolServices
		
	IF OBJECT_ID( ''tempdb..#ServicePoolGroups'' ) IS NOT NULL
		DROP TABLE #ServicePoolGroups
	
	--
	-- Create temporary tables HostData and ServicePoolServices
	--
	CREATE TABLE #HostData
	(
		ChangeSetId int,
		Id uniqueidentifier,
		RootGroupId uniqueidentifier,
		ServiceName varchar(250),
		ServicePoolName varchar(250),
		RowProcessed bit
	)

	CREATE TABLE #ServicePoolServices
	(
		ReplicationID int,
		Id uniqueidentifier,
		RootGroupId uniqueidentifier,
		Contents xml,
		ServicePoolName varchar(250),
		ServiceName varchar(250),
		ShouldDelete bit
	)
	
	CREATE TABLE #ServicePoolGroups
	(
		ServicePoolName varchar(250),
		GroupId uniqueidentifier
	)

	--
	-- Fill temporary table HostData
	--
	INSERT INTO #HostData
	(
		ChangeSetId,
		Id,
		RootGroupId,
		ServiceName,
		ServicePoolName,
		RowProcessed
	)
	SELECT DISTINCT 
			ChangeSetId,
			Id,
			RootGroupId,
			-- Extract service name from text like Service.ServiceBus.Demo.DSE.Add.ServiceHostData
			SUBSTRING( Name, 9, LEN( Name ) - 24 ) AS ServiceName,
			ServicePool.value( ''@name'', ''varchar(250)'' ) AS ServicePoolName,
			0 AS RowProcessed
	FROM	#Upgrade_Fragments
			CROSS APPLY 
			Contents.nodes( ''/ServiceHostData/ServicePools/ServicePool'' ) ServicePools( ServicePool )
	WHERE	SectionId = @SERVICEHOST
			AND
			Name LIKE ''Service.%.ServiceHostData''
			AND
			--Services/ServiceGroup name="Requests"/Service name="ServiceBus.System.ServiceRequestExplorer.Abort"
			RootXmlNode LIKE ''Services/Service% name="%"''
			AND
			Contents.exist( ''ServiceHostData/ServicePools'' ) = 1
	ORDER BY ServicePoolName ASC, ServiceName ASC

	--
	-- Fill temporary table ServicePoolServices
	--
	INSERT INTO #ServicePoolServices
	(
		ReplicationID,
		Id,
		RootGroupId,
		Contents,
		ServicePoolName,
		ServiceName,
		ShouldDelete
	)
	SELECT
			ReplicationId,
			Id,
			RootGroupId,
			Contents,
			-- Extract service pool name from text like ServicePool.Demo.Services
			SUBSTRING( Name, 13, LEN( Name ) - 21 ) AS ServicePoolName,
			Service.value( ''@name'', ''varchar(250)'' ) AS ServiceName,
			( CASE
				WHEN EXISTS
					(
						SELECT	ChangeSetId 
						FROM	#HostData h
						WHERE	h.ServicePoolName = SUBSTRING( Name, 13, LEN( Name ) - 21 )
								AND
								(
									h.ServiceName = Service.value( ''@name'', ''varchar(250)'' )
									OR
									Service.value( ''@name'', ''varchar(250)'' ) IS NULL
								)
					)
				THEN 0
				ELSE 1
			END ) AS ShouldDelete
	FROM	Active_Fragments f
			OUTER APPLY
			Contents.nodes( ''Services/Service'' ) AS Services( Service )
	WHERE	SectionId = @SERVICEHOST
			AND
			Name LIKE ''ServicePool.%.Services''
			AND
			RootXmlNode LIKE ''ServicePoolServices/ServicePool name="%"''
	ORDER BY ServicePoolName ASC, ServiceName ASC

	--
	-- Determine which groups contain service pools
	--
	INSERT INTO #ServicePoolGroups
	(
		ServicePoolName,
		GroupId
	)
	SELECT	t.ServicePoolName,
			t.GroupId
	FROM
	(
		-- Active groups that contain service pools
		(
			SELECT	f.Contents.value( ''( ServicePool/@name )[ 1 ]'', ''varchar(250)'' ) AS ServicePoolName,
					gf.GroupId
			FROM	Active_Fragments f
					JOIN
					Active_GroupFragments gf
						ON f.Id = gf.FragmentId
			WHERE	SectionId = @SERVICEHOST
					AND
					Name LIKE ''ServicePool.%''
					AND
					RootXmlNode = ''ServicePools''
		)
		UNION
		-- Pending groups that contain service pools
		(
			SELECT	f.Contents.value( ''( ServicePool/@name )[ 1 ]'', ''varchar(250)'' ) AS ServicePoolName,
					gf.GroupId
			FROM	#Upgrade_Fragments f
					JOIN
					#Upgrade_GroupFragments gf
						ON f.Id = gf.FragmentId
			WHERE	SectionId = @SERVICEHOST
					AND
					Name LIKE ''ServicePool.%''
					AND
					RootXmlNode = ''ServicePools''
		)
	) t
	ORDER BY t.ServicePoolName

	--
	-- Add/Remove service-service pool associations for every service pool in ServiceHostData
	--
	WHILE EXISTS ( SELECT TOP 1 ChangeSetId FROM #HostData WHERE RowProcessed = 0  )
	BEGIN
		--
		-- Get next row
		--
		SELECT TOP 1
				@HostDataChangeSetId = ChangeSetId,
				@HostDataFragmentId  = Id,
				@HostDataRootGroupId = RootGroupId,			
				@ServiceName		 = ServiceName,
				@ServicePoolName	 = ServicePoolName
		FROM	#HostData
		WHERE 	RowProcessed = 0
		
		--
		-- Mark row as processed
		--
		UPDATE	#HostData 
		SET		RowProcessed = 1 
		WHERE	ChangeSetId = @HostDataChangeSetId
				AND
				Id = @HostDataFragmentId
				AND
				RootGroupId = @HostDataRootGroupId
				AND
				ServicePoolName = @ServicePoolName
				AND
				ServiceName = @ServiceName

		--
		-- Clear current info on service-service pool associations fragment for current service pool name
		--
		SET @AssociationId = NULL
		SET	@AssociationFragmentId = NULL
		SET @AssociationRootGroupId = NULL
		SET @AssociationContents = NULL
		SET @ShouldDelete = NULL
		
		--
		-- Get info on service-service pool associations fragment for current service pool name
		--
		SELECT	@AssociationId			= ReplicationID,
				@AssociationFragmentId  = Id,
				@AssociationRootGroupId = RootGroupId,
				@AssociationContents	= Contents
		FROM	#ServicePoolServices
		WHERE	ServicePoolName = @ServicePoolName
		
		SELECT	@ShouldDelete = ShouldDelete
		FROM	#ServicePoolServices
		WHERE	ServicePoolName = @ServicePoolName
				AND
				ServiceName = @ServiceName
		
		--
		-- Clear AssociationChangeSetId value
		--
		SET @AssociationChangeSetId = NULL
		
		--
		-- Determine ChangeSetId of change on service-service pool associations fragment 
		-- for current service pool name (if there was one)
		--
		IF ( ( @AssociationFragmentId IS NOT NULL ) AND ( @AssociationRootGroupId IS NOT NULL ) )
			--
			-- Select ChangeSetId by fragment Id and RootGroupId
			--
			SELECT	@AssociationChangeSetId = ChangeSetId
			FROM	#Upgrade_Fragments
			WHERE	Id = @AssociationFragmentId
					AND
					RootGroupId = @AssociationRootGroupId
		ELSE
			--
			-- Select ChangeSetId by fragment name
			-- Also, set fragment Id and RootGroupId
			--
			SELECT	@AssociationChangeSetId = ChangeSetId,
					@AssociationFragmentId  = Id,
					@AssociationRootGroupId = RootGroupId
			FROM	#Upgrade_Fragments
			WHERE	Name = ''ServicePool.'' + @ServicePoolName + ''.Services''

		--
		-- Set valid name and description of service - service pool associations fragment
		--				
		SET @Name = ''ServicePool.'' + @ServicePoolName + ''.Services''
		SET @Description = ''Service-service pool associations for '' + @ServicePoolName + '' service pool''

		--
		-- If pending service-service pool associations fragment exists, then
		--		
		IF ( @AssociationChangeSetId IS NOT NULL )
			BEGIN
				--
				-- Ensure that found fragment has appropriate name and description
				--
				UPDATE	#Upgrade_Fragments
				SET		Name = @Name,
						Description = @Description
				WHERE	ChangeSetId = @AssociationChangeSetId
						AND
						Id = @AssociationFragmentId
						AND
						RootGroupId = @AssociationRootGroupId
			END
		ELSE
			BEGIN
				--
				-- Prepare data for insertion
				--				
				SET	@AssociationChangeSetId = @HostDataChangeSetId
				IF ( @AssociationId IS NOT NULL )
					SET @ChangeType = ''UPDATE''
				ELSE
				BEGIN
					SET @ChangeType = ''INSERT''
					SET @AssociationFragmentId = NEWID()
					SET @AssociationRootGroupId = @HostDataRootGroupId
					SET @AssociationContents = ''<Services />''
					
					--
					-- Ensure that service-service pool associations fragment is added into every group
					-- containing the service pool fragment
					--
					INSERT INTO #Upgrade_GroupFragments
					(
						ChangeSetId,
						ChangeType,
						RootGroupId,
						GroupId,
						FragmentId
					)
					SELECT	@AssociationChangeSetId,
							@ChangeType,
							@ROOT_GROUP_ID,
							g.GroupId,
							@AssociationFragmentId
					FROM	#ServicePoolGroups g
							LEFT JOIN
							Active_GroupFragments gf
								ON	g.GroupId = gf.GroupId
									AND
									@AssociationFragmentId = gf.FragmentId
					WHERE	g.ServicePoolName = @ServicePoolName
							AND
							gf.ReplicationId IS NULL
				END
			
				--
				-- Insert pending change that will add new or update existing 
				-- service-service pool associations fragment
				--
				INSERT INTO #Upgrade_Fragments
				(
					ChangeSetId,
					ChangeType,
					Id,
					RootGroupId,
					Name,
					Description,
					SectionId,
					RootXmlNode,
					Contents,
					AddMultiple
				)
				VALUES
				( 
					@AssociationChangeSetId,
					@ChangeType,
					@AssociationFragmentId,
					@AssociationRootGroupId,
					@Name,
					@Description,
					@SERVICEHOST,
					''ServicePoolServices/ServicePool name="'' + @ServicePoolName + ''"'',
					@AssociationContents,
					0
				)
				
				--
				-- Insert info about just created service-service pool associations fragment
				-- in order to avoid creation of duplicate service-service pool associations fragment
				--
				IF ( NOT EXISTS( 
					SELECT	*
					FROM	#ServicePoolServices
					WHERE	Id = @AssociationFragmentId
							AND
							RootGroupId = @AssociationRootGroupId
							AND
							ServicePoolName = @ServicePoolName
							AND
							ServiceName = @ServiceName ) )
				BEGIN
					INSERT INTO #ServicePoolServices
					(
						ReplicationID,
						Id,
						RootGroupId,
						Contents,
						ServicePoolName,
						ServiceName,
						ShouldDelete
					)
					VALUES
					(
						NULL,
						@AssociationFragmentId,
						@AssociationRootGroupId,
						@AssociationContents,
						@ServicePoolName,
						@ServiceName,
						0
					)
				END
			END
			
		--
		-- Ensure that found fragment has Services child element
		--
		UPDATE	#Upgrade_Fragments
		SET		Contents.modify( ''insert element Services {""} as first into ( / )[ 1 ]'' )
		WHERE	ChangeSetId = @AssociationChangeSetId
				AND
				Id = @AssociationFragmentId
				AND
				RootGroupId = @AssociationRootGroupId
				AND
				Contents.exist( ''Services'' ) = 0

		--
		-- Ensure that current service is associated with or deassociated from current service pool
		--
		IF ( @ShouldDelete = 1 )
			UPDATE	#Upgrade_Fragments
			SET		Contents.modify( ''delete Services/Service[ @name=sql:variable( "@ServiceName" ) ] '' )
			WHERE	ChangeSetId = @AssociationChangeSetId
					AND
					Id = @AssociationFragmentId
					AND
					RootGroupId = @AssociationRootGroupId
					AND
					Contents.exist( ''Services/Service[ @name=sql:variable( "@ServiceName" ) ]'' ) = 1
		ELSE
			UPDATE	#Upgrade_Fragments
			SET		Contents.modify( ''insert element Service { attribute name { sql:variable( "@ServiceName" ) } } as last into ( /Services )[ 1 ]'' )
			WHERE	ChangeSetId = @AssociationChangeSetId
					AND
					Id = @AssociationFragmentId
					AND
					RootGroupId = @AssociationRootGroupId
					AND
					Contents.exist( ''Services/Service[ @name=sql:variable( "@ServiceName" ) ]'' ) = 0

		--
		-- Delete ServicePool element for current service pool name from current ServiceHostData fragment
		-- unless that service pool is a default one
		--
		UPDATE	#Upgrade_Fragments
		SET		Contents.modify( ''delete ( /ServiceHostData/ServicePools/ServicePool[ @name=sql:variable( "@ServicePoolName" ) ] )'' )
		WHERE	ChangeSetId = @HostDataChangeSetId
				AND
				Id = @HostDataFragmentId
				AND
				RootGroupId = @HostDataRootGroupId
				AND
				Contents.exist( ''/ServiceHostData/ServicePools/ServicePool[ @name=sql:variable( "@ServicePoolName" ) ]/Default[ text()="True" ]'' ) = 0
	END

	--
	-- Drop temporary tables
	--	
	DROP TABLE #HostData
	DROP TABLE #ServicePoolServices

COMMIT
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50462740,
	1,
	@Script
)

SET @Id = '{2F988552-F161-492F-8EA2-25CFC580B7A3}'
SET @Script = 
'
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @MacroId uniqueidentifier
	DECLARE @OldMacroId uniqueidentifier
	
	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''
	
	
	BEGIN TRANSACTION
	
	SET @MacroId = ''{6C11CA6D-3402-4F1A-9754-41F82E227469}''
	SET @Name = ''BUSINESSCONTEXTS.DEFAULTBUSINESSCONTEXT''
	SET @Description = ''Default Business Context.''
	
	SELECT	@OldMacroId = ID
	FROM	#Upgrade_Macros
	WHERE	Name = ''DEFAULT.BUSINESS.CONTEXT''
			AND RootGroupId = @ROOT_GROUP_ID
	
	IF @OldMacroId IS NOT NULL
		BEGIN
		
			UPDATE	#Upgrade_Macros
			SET		Id = @MacroId, Name = @Name, Description = @Description
			WHERE	Id = @OldMacroId
					AND RootGroupId = @ROOT_GROUP_ID
			
			UPDATE	#Upgrade_GroupMacroValues
			SET		MacroId = @MacroId
			WHERE	MacroId = @OldMacroId
					AND RootGroupId = @ROOT_GROUP_ID
					
			UPDATE	#Upgrade_Macros
			SET		ChangeType = ''UPDATE''
			WHERE	ChangeType = ''INSERT''
					AND EXISTS( SELECT	ReplicationId
								FROM	Active_Macros
								WHERE	Active_Macros.Id = #Upgrade_Macros.Id )
			
			UPDATE	#Upgrade_GroupMacroValues
			SET		ChangeType = ''UPDATE''
			WHERE	ChangeType = ''INSERT''
					AND EXISTS( SELECT	ReplicationId
								FROM	Active_GroupMacroValues
								WHERE	Active_GroupMacroValues.MacroId = #Upgrade_GroupMacroValues.MacroId AND
										Active_GroupMacroValues.GroupId = #Upgrade_GroupMacroValues.GroupId )
		END
		
	UPDATE	#Upgrade_Fragments
	SET		Contents.modify( ''replace value of (
				/ContextManager/ContextGroups/BusinessContexts/Context [@name="BusinessContext"]/ContextFactoryData [@name="BusinessContextFactory"]/DefaultBusinessContext/@name
				)[1] 
			with "[DSCS:MACRO:BUSINESSCONTEXTS.DEFAULTBUSINESSCONTEXT]"'')
	WHERE	
		ID = ''D7945F95-D22B-40C4-B6A7-13DD5F8DA636'' and
		Contents.exist(''/ContextManager/ContextGroups/BusinessContexts/Context [@name="BusinessContext"]/ContextFactoryData [@name="BusinessContextFactory"]/DefaultBusinessContext/@name'') = 1
	
	COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50462743, --3.2.0.23
	1,
	@Script
)

SET @Id = '{DD2C8732-77CB-4397-99B8-9CF008A27763}'
SET @Script = 
'
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = ''{12BB99C3-3045-498d-BD54-D2690935D845}''
	
	BEGIN TRANSACTION

	UPDATE	#Upgrade_Fragments
	SET		Contents.modify( 
			''insert
				<Resource name="ServiceBus.Logging.PersistenceProviders.LogEntry.dll" />
			 into
			 ( ServicePool/Implementation )[ 1 ]
			'' )
	WHERE	SectionId = @SERVICEHOST
			AND
			RootXmlNode = ''ServicePools''
			AND
			Contents.exist( ''ServicePool'' ) = 1
			AND
			Contents.exist( ''ServicePool/Implementation/Resource[@name="ServiceBus.Logging.PersistenceProviders.LogEntry.dll"]'' ) = 0
	
	COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50462749, --3.2.0.29
	1,
	@Script
)

----
-- 3.3.0.2.01-39868.sql
----
SET	@Id = '{88E150F2-37B5-4356-B73C-3A23E6F20B1D}'
SET	@Script =
'
--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = ''{12BB99C3-3045-498d-BD54-D2690935D845}''

--
-- 1. Move ServiceFactoryData to its own fragment
--
BEGIN TRANSACTION

--
-- Create table that will temporarily hold new fragments
--
CREATE TABLE #NewFragments
(
	ChangeSetId int,
	ChangeType varchar(10),
	ServiceFragmentId uniqueidentifier,
	Id uniqueidentifier,
	RootGroupId uniqueidentifier,
	Name varchar(250),
	Description varchar(1024),
	SectionId uniqueidentifier,
	RootXmlNode varchar(1024),
	Contents xml
)

DECLARE @ElementName varchar( 20 )
SET		@ElementName = ''ServiceFactoryData''

--
-- Populate temporary NewFragments table
--
INSERT INTO #NewFragments
SELECT	
		f.ChangeSetId,
		f.ChangeType,
		f.Id AS ServiceFragmentId,
		NEWID() AS Id, -- Generate new fragment id
		f.RootGroupId,
		f.Name + ''.'' + @ElementName AS Name,
		f.[Description] + '' '' + @ElementName AS [Description],
		f.SectionId,
		f.RootXmlNode + ''/Service name="'' + f.Contents.value( ''(Service/@name)[1]'', ''varchar( MAX )'' ) + ''"'' AS RootXmlNode,
		Element.query( ''.'' ) AS Contents
FROM	#Upgrade_Fragments f
		CROSS APPLY
		f.Contents.nodes( ''Service/*[local-name()=sql:variable( "@ElementName" )]'' ) AS [Service]( Element )
WHERE	f.SectionId = @SERVICEHOST
		AND
		LTRIM( f.RootXmlNode ) LIKE ''Services%''

--
-- Remove the element from every Service that has it
--
UPDATE	#Upgrade_Fragments
SET		Contents.modify( ''delete (Service/*[local-name()=sql:variable( "@ElementName" )])'' )
FROM	#Upgrade_Fragments f
		JOIN
		#NewFragments nf
			ON	nf.ServiceFragmentId = f.Id	

--
-- Ignore DELETE change on group <-> Service.{Name}.ServiceFactoryData associations 
-- if there is a change on Service.{Name}.ServiceFactoryData other than DELETE
--
DELETE	#Upgrade_GroupFragments
FROM	#Upgrade_GroupFragments gf
		JOIN
		#NewFragments nf
			ON	gf.ChangeSetId = nf.ChangeSetId
				AND
				gf.RootGroupId = nf.RootGroupId
				AND
				gf.ChangeType = ''DELETE''
				AND
				( 
					(
						nf.ChangeType = ''INSERT''
						AND
						gf.FragmentId = ( SELECT TOP( 1 ) Id FROM #Upgrade_Fragments f WHERE f.RootGroupId = nf.RootGroupId AND f.Name = nf.Name )
					)
					OR
					(
						nf.ChangeType = ''UPDATE''
						AND
						gf.FragmentId = ( SELECT TOP( 1 ) Id FROM Active_Fragments f WHERE f.RootGroupId = nf.RootGroupId AND f.Name = nf.Name )
					)
				)

--
-- Delete UPDATE or INSERT changes on ServiceFactoryData fragments created from Service fragments
-- if UPDATE or INSERT change was created from actual ServiceFactoryData fragment
--
DELETE	#NewFragments
FROM	#NewFragments nf
		JOIN
		#Upgrade_Fragments f
			ON	nf.ChangeSetId = f.ChangeSetId
				AND
				nf.RootGroupId = f.RootGroupId
				AND
				nf.Name = f.Name
				AND
				(
					( nf.ChangeType = ''UPDATE'' AND f.ChangeType = ''UPDATE'' )
					OR
					( nf.ChangeType = ''INSERT'' AND f.ChangeType = ''INSERT'' )
				)
				
--
-- Delete DELETE change on ServiceFactoryData fragments from #Upgrade_Fragments table 
-- if there is matching UPDATE change on ServiceFactoryData fragment created from Service fragment
--
DELETE	#Upgrade_Fragments
FROM	#Upgrade_Fragments f
		JOIN
		#NewFragments nf
			ON	f.ChangeSetId = nf.ChangeSetId
				AND
				f.RootGroupId = nf.RootGroupId
				AND
				f.Name = nf.Name
				AND
				f.ChangeType = ''DELETE''
				AND
				nf.ChangeType = ''UPDATE''

--
-- Insert new fragments
--
INSERT INTO #Upgrade_Fragments
(
	ChangeSetId,
	ChangeType,
	Id,
	RootGroupId,
	Name,
	[Description],
	SectionId,
	RootXmlNode,
	Contents,
	AddMultiple
)
SELECT	nf.ChangeSetId,
		nf.ChangeType,
		nf.Id,
		nf.RootGroupId,
		nf.Name,
		nf.[Description],
		nf.SectionId,
		nf.RootXmlNode,
		nf.Contents,
		0
FROM	#NewFragments nf
WHERE	nf.ChangeType = ''INSERT''

--
-- Insert associations for new fragments
--
INSERT INTO #Upgrade_GroupFragments
(
	ChangeSetId,
	ChangeType,
	RootGroupId,
	GroupId,
	FragmentId
)
SELECT	nf.ChangeSetId,
		nf.ChangeType,
		agf.RootGroupId,
		agf.GroupId,
		nf.Id AS FragmentId
FROM	#NewFragments nf
		JOIN
		#Upgrade_GroupFragments agf
			ON	agf.FragmentId = nf.ServiceFragmentId
WHERE	nf.ChangeType = ''INSERT''
	
--
-- Remove inserted fragments from temporary table
--
DELETE FROM #NewFragments
WHERE	ChangeType = ''INSERT''
	
--
-- If some ServiceFactoryData fragments that were marked for update do not exist (e.g. updating an existing service),
-- change their change type to INSERT
--
UPDATE	#NewFragments
SET		ChangeType = ''INSERT''
FROM	#NewFragments nf
		LEFT JOIN
		Active_Fragments f
			ON nf.Name = f.Name
WHERE	nf.ChangeType = ''UPDATE''
		AND
		f.Name IS NULL
	
--
-- Ensure that ServiceFactoryData fragments that were marked for update have valid IDs
--
UPDATE	#NewFragments
SET		Id = f.Id
FROM	#NewFragments nf
		JOIN
		Active_Fragments f
			ON nf.Name = f.Name
WHERE	nf.ChangeType = ''UPDATE''
	
--
-- Insert all fragments whose change type is UPDATE or was changed from UPDATE to INSERT
--
INSERT INTO #Upgrade_Fragments
(
	ChangeSetId,
	ChangeType,
	Id,
	RootGroupId,
	Name,
	[Description],
	SectionId,
	RootXmlNode,
	Contents,
	AddMultiple
)
SELECT	nf.ChangeSetId,
		nf.ChangeType,
		nf.Id,
		nf.RootGroupId,
		nf.Name,
		nf.[Description],
		nf.SectionId,
		nf.RootXmlNode,
		nf.Contents,
		0
FROM	#NewFragments nf
WHERE	nf.ChangeType = ''INSERT''
		OR
		nf.ChangeType = ''UPDATE''
	
--
-- Copy all associations to active service fragment to 
-- any fragment whose change type was changed from UPDATE to INSERT as well
--
INSERT INTO #Upgrade_GroupFragments
(
	ChangeSetId,
	ChangeType,
	RootGroupId,
	GroupId,
	FragmentId
)
SELECT	nf.ChangeSetId,
		nf.ChangeType,
		agf.RootGroupId,
		agf.GroupId,
		nf.Id AS FragmentId
FROM	#NewFragments nf
		JOIN
		Active_GroupFragments agf
			ON	agf.FragmentId = nf.ServiceFragmentId
WHERE	nf.ChangeType = ''INSERT''
	
--
-- Remove processed fragments from temporary table
--
DELETE FROM #NewFragments
WHERE	ChangeType = ''INSERT''
		OR
		ChangeType = ''UPDATE''
	
--
-- If any fragment that was marked for deletion does not exist, 
-- remove it from list of fragments to be inserted into pending table	
--
DELETE	#NewFragments
FROM	#NewFragments nf
		LEFT JOIN
		Active_Fragments f
			ON nf.Name = f.Name
WHERE	nf.ChangeType = ''DELETE''
		AND
		f.Name IS NULL

--
-- Insert all fragment whose change type is DELETE
--
INSERT INTO #Upgrade_Fragments
(
	ChangeSetId,
	ChangeType,
	Id,
	RootGroupId,
	Name,
	[Description],
	SectionId,
	RootXmlNode,
	Contents,
	AddMultiple
)
SELECT	nf.ChangeSetId,
		nf.ChangeType,
		nf.Id,
		nf.RootGroupId,
		nf.Name,
		nf.[Description],
		nf.SectionId,
		nf.RootXmlNode,
		nf.Contents,
		0
FROM	#NewFragments nf
WHERE	nf.ChangeType = ''DELETE''

--
-- Drop temporary table
--
DROP TABLE #NewFragments

--
-- Determine from which ServiceFactoryData fragment the associations should be removed 
-- (because association to service fragment has been removed) and 
-- mark the fragments association(s) for deletion
--
INSERT INTO #Upgrade_GroupFragments
(
	ChangeSetId,
	ChangeType,
	RootGroupId,
	GroupId,
	FragmentId
)
SELECT	dfl.ChangeSetId,
		dfl.ChangeType,
		dfl.RootGroupId,
		dfl.GroupId,
		n.Id
FROM	#Upgrade_GroupFragments dfl
		JOIN
		Active_Fragments f
			ON	dfl.RootGroupId = f.RootGroupId
				AND
				dfl.FragmentId = f.Id
		JOIN
		Active_Fragments n
			ON f.Name + ''.'' + @ElementName = n.Name
WHERE	dfl.ChangeType = ''DELETE''
		AND
		f.SectionId = @SERVICEHOST
		and
		LTRIM( f.RootXmlNode ) like ''Services%''
		AND
		f.Contents.exist( ''Service'' ) = 1
		AND
		n.Contents.exist( ''*[local-name()=sql:variable( "@ElementName" )]'' ) = 1

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50528258, --3.3.0.2
	1,
	@Script
)

----
-- 3.3.0.2.02-39871.sql
----
SET	@Id = '{113F71CD-8CB1-424D-8016-AFBBA76EB32C}'
SET	@Script =
'
--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = ''{12BB99C3-3045-498d-BD54-D2690935D845}''

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = ''{4FF5DBB5-A888-4c76-B222-8EE53950E511}''

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = ''{B233BE84-30B6-4349-B309-F24942D8DE4B}''

--
-- 1. Move ServicePool implementation to its own fragment
--
BEGIN TRANSACTION

--
-- Create table that will temporarily hold ServicePool.{Name}.Implementation fragments
--
CREATE TABLE #NewFragments
(
	ChangeSetId int,
	ChangeType varchar(10),
	ServicePoolFragmentId uniqueidentifier,
	Id uniqueidentifier,
	RootGroupId uniqueidentifier,
	Name varchar(250),
	Description varchar(1024),
	SectionId uniqueidentifier,
	RootXmlNode varchar(1024),
	Contents xml
)

--
-- Populate temporary NewFragments table with ServicePool.{Name}.Implementation fragments
--
INSERT INTO #NewFragments
SELECT	
		f.ChangeSetId,
		f.ChangeType,
		f.Id AS ServicePoolFragmentId,
		NEWID() AS Id, -- Generate new fragment id
		f.RootGroupId,
		f.Name + ''.Implementation'' AS Name,
		f.[Description] + '' implementation'' AS [Description],
		f.SectionId,
		f.RootXmlNode + ''/ServicePool name="'' + f.Contents.value( ''( ServicePool/@name )[ 1 ]'', ''varchar( MAX )'' ) + ''"'' AS RootXmlNode,
		f.Contents.query( ''ServicePool/*
		[
			local-name() != "Local" and 
			local-name() != "ProcessLoader" and 
			local-name() != "Credentials" and 
			local-name() != "RequestChannels"
		]'' ) AS Contents
FROM	#Upgrade_Fragments f
WHERE	f.SectionId = @SERVICEHOST
		AND
		Name LIKE ''ServicePool.%''
		AND
		Contents.exist( ''ServicePool/*
		[
			local-name() != "Local" and 
			local-name() != "ProcessLoader" and 
			local-name() != "Credentials" and 
			local-name() != "RequestChannels"
		]'' ) = 1

--
-- Try to set ServicePool.{Name}.Implementation fragment ID to one that was previously used for fragments of same name
--
UPDATE	#NewFragments
SET		Id = f.Id
FROM	#NewFragments nf
		JOIN
		Active_Fragments f
			ON	f.IsHistorical = 0
				AND
				nf.Name = f.Name

--
-- Remove the server-side elements from every ServicePool.{Name} fragment
--
UPDATE	#Upgrade_Fragments
SET		Contents.modify( ''delete ServicePool/*
		[
			local-name() != "Local" and 
			local-name() != "ProcessLoader" and 
			local-name() != "Credentials" and 
			local-name() != "RequestChannels"
		]'' )
FROM	#Upgrade_Fragments f
		JOIN
		#NewFragments nf
			ON	nf.ServicePoolFragmentId = f.Id	

--
-- If some ServicePool.{Name}.Implementation fragments that were marked for insert exist 
-- (e.g. service pool implementation already exists), change their change type to UPDATE
--
UPDATE	#NewFragments
SET		ChangeType = ''UPDATE''
FROM	#NewFragments nf
		JOIN
		Active_Fragments f
			ON	f.IsHistorical = 0
				AND
				nf.Name = f.Name
WHERE	nf.ChangeType = ''INSERT''
		AND
		f.IsActive = 1

--
-- Delete UPDATE or INSERT changes on ServicePool.{Name}.Implementation fragments created from ServicePool.{Name} fragments
-- if UPDATE or INSERT change was created from actual ServicePool.{Name}.Implementation fragment
--
DELETE	#NewFragments
FROM	#NewFragments nf
		JOIN
		#Upgrade_Fragments f
			ON	nf.ChangeSetId = f.ChangeSetId
				AND
				nf.RootGroupId = f.RootGroupId
				AND
				nf.Name = f.Name
				AND
				(
					( nf.ChangeType = ''UPDATE'' AND f.ChangeType = ''UPDATE'' )
					OR
					( nf.ChangeType = ''INSERT'' AND f.ChangeType = ''INSERT'' )
				)
				
--
-- Delete DELETE change on ServicePool.{Name}.Implementation fragments from #Upgrade_Fragments table 
-- if there is matching UPDATE change on ServicePool.{Name}.Implementation fragment created from ServicePool.{Name} fragment
--
DELETE	#Upgrade_Fragments
FROM	#Upgrade_Fragments f
		JOIN
		#NewFragments nf
			ON	f.ChangeSetId = nf.ChangeSetId
				AND
				f.RootGroupId = nf.RootGroupId
				AND
				f.Name = nf.Name
				AND
				f.ChangeType = ''DELETE''
				AND
				nf.ChangeType = ''UPDATE''

--
-- Insert ServicePool.{Name}.Implementation fragments
--
INSERT INTO #Upgrade_Fragments
(
	ChangeSetId,
	ChangeType,
	Id,
	RootGroupId,
	Name,
	[Description],
	SectionId,
	RootXmlNode,
	Contents,
	AddMultiple
)
SELECT	nf.ChangeSetId,
		nf.ChangeType,
		nf.Id,
		nf.RootGroupId,
		nf.Name,
		nf.[Description],
		nf.SectionId,
		nf.RootXmlNode,
		nf.Contents,
		0
FROM	#NewFragments nf
WHERE	nf.ChangeType = ''INSERT''

--
-- Ignore DELETE change on group <-> ServicePool.{Name}.Implementation associations 
-- if there is a change on ServicePool.{Name}.Implementation other than DELETE
--
DELETE	#Upgrade_GroupFragments
FROM	#Upgrade_GroupFragments gf
		JOIN
		#NewFragments nf
			ON	gf.ChangeSetId = nf.ChangeSetId
				AND
				gf.RootGroupId = nf.RootGroupId
				AND
				gf.FragmentId = nf.Id
				AND
				gf.ChangeType = ''DELETE''
				AND
				nf.ChangeType <> ''DELETE''

--
-- Insert associations for ServicePool.{Name}.Implementation fragments to 
-- ServiceBus ServiceHost Service and SerServiceBus Administrative Console applications,
-- but only if the ServicePool.{Name} fragment is associated with the applications
--
INSERT INTO #Upgrade_GroupFragments
(
	ChangeSetId,
	ChangeType,
	RootGroupId,
	GroupId,
	FragmentId
)
SELECT	nf.ChangeSetId,
		nf.ChangeType,
		agf.RootGroupId,
		agf.GroupId,
		nf.Id AS FragmentId
FROM	#NewFragments nf
		JOIN
		#Upgrade_GroupFragments agf
			ON	agf.FragmentId = nf.ServicePoolFragmentId
WHERE	nf.ChangeType = ''INSERT''
		AND
		(
			agf.GroupId = @SERVICEHOST_SERVICE
			OR
			agf.GroupId = @ADMINISTRATIVE_CONSOLE
		)
	
--
-- Remove inserted fragments from temporary table
--
DELETE FROM #NewFragments
WHERE	ChangeType = ''INSERT''

--
-- If some ServicePool.{Name}.Implementation fragments that were marked for update do not exist 
-- (e.g. updating an existing service pool), change their change type to INSERT
--
UPDATE	#NewFragments
SET		ChangeType = ''INSERT''
FROM	#NewFragments nf
		LEFT JOIN
		Active_Fragments f
			ON	f.IsHistorical = 0
				AND
				nf.Name = f.Name
WHERE	nf.ChangeType = ''UPDATE''
		AND
		(
			f.Name IS NULL
			OR
			f.IsActive = 0
		)
	
--
-- Insert all ServicePool.{Name}.Implementation fragments whose change type is UPDATE or was changed from UPDATE to INSERT
--
INSERT INTO #Upgrade_Fragments
(
	ChangeSetId,
	ChangeType,
	Id,
	RootGroupId,
	Name,
	[Description],
	SectionId,
	RootXmlNode,
	Contents,
	AddMultiple
)
SELECT	nf.ChangeSetId,
		nf.ChangeType,
		nf.Id,
		nf.RootGroupId,
		nf.Name,
		nf.[Description],
		nf.SectionId,
		nf.RootXmlNode,
		nf.Contents,
		0
FROM	#NewFragments nf
WHERE	nf.ChangeType = ''INSERT''
		OR
		nf.ChangeType = ''UPDATE''
	
--
-- Copy all associations of ServicePool.{Name} fragments with ServiceBus ServiceHost Service and SerServiceBus Administrative Console applications
-- for every ServicePool.{Name}.Implementation fragment whose change type was changed from UPDATE to INSERT,
-- but only if the ServicePool.{Name} fragment is associated with the applications
--
INSERT INTO #Upgrade_GroupFragments
(
	ChangeSetId,
	ChangeType,
	RootGroupId,
	GroupId,
	FragmentId
)
SELECT	nf.ChangeSetId,
		nf.ChangeType,
		agf.RootGroupId,
		agf.GroupId,
		nf.Id AS FragmentId
FROM	#NewFragments nf
		JOIN
		Active_GroupFragments agf
			ON	agf.IsHistorical = 0
				AND
				agf.FragmentId = nf.ServicePoolFragmentId
WHERE	nf.ChangeType = ''INSERT''
		AND
		(
			agf.GroupId = @SERVICEHOST_SERVICE
			OR
			agf.GroupId = @ADMINISTRATIVE_CONSOLE
		)
		AND
		agf.IsActive = 1
	
--
-- Remove processed fragments from temporary table
--
DELETE FROM #NewFragments
WHERE	ChangeType = ''INSERT''
		OR
		ChangeType = ''UPDATE''
	
--
-- If any fragment that was marked for deletion does not exist, 
-- remove it from list of fragments to be inserted into pending table	
--
DELETE	#NewFragments
FROM	#NewFragments nf
		LEFT JOIN
		Active_Fragments f
			ON	f.IsHistorical = 0
				AND
				nf.Name = f.Name
WHERE	nf.ChangeType = ''DELETE''
		AND
		(
			f.Name IS NULL
			OR
			f.IsActive = 0
		)

--
-- Insert all fragment whose change type is DELETE
--
INSERT INTO #Upgrade_Fragments
(
	ChangeSetId,
	ChangeType,
	Id,
	RootGroupId,
	Name,
	[Description],
	SectionId,
	RootXmlNode,
	Contents,
	AddMultiple
)
SELECT	nf.ChangeSetId,
		nf.ChangeType,
		nf.Id,
		nf.RootGroupId,
		nf.Name,
		nf.[Description],
		nf.SectionId,
		nf.RootXmlNode,
		nf.Contents,
		0
FROM	#NewFragments nf
WHERE	nf.ChangeType = ''DELETE''

--
-- Drop temporary table
--
DROP TABLE #NewFragments

--
-- Determine from which ServicePool.{Name}.Implementation fragments the associations should be removed 
-- (because association to ServicePool.{Name} fragment has been removed) and 
-- mark the fragments association(s) for deletion
--
INSERT INTO #Upgrade_GroupFragments
(
	ChangeSetId,
	ChangeType,
	RootGroupId,
	GroupId,
	FragmentId
)
SELECT	dfl.ChangeSetId,
		dfl.ChangeType,
		dfl.RootGroupId,
		dfl.GroupId,
		n.Id
FROM	#Upgrade_GroupFragments dfl
		JOIN
		Active_Fragments f
			ON	f.IsHistorical = 0
				AND
				dfl.RootGroupId = f.RootGroupId
				AND
				dfl.FragmentId = f.Id
		JOIN
		Active_Fragments n
			ON	n.IsHistorical = 0
				AND
				f.Name + ''.Implementation'' = n.Name
WHERE	dfl.ChangeType = ''DELETE''
		AND
		(
			dfl.GroupId = @SERVICEHOST_SERVICE
			OR
			dfl.GroupId = @ADMINISTRATIVE_CONSOLE
		)
		AND
		f.SectionId = @SERVICEHOST
		AND
		f.Name LIKE ''ServicePool.%''
		AND
		f.Contents.exist( ''ServicePool'' ) = 1
		AND
		n.IsActive = 1

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50528258, --3.3.0.2
	2,
	@Script
)

----
-- 3.3.0.2.02-39869.sql
----
SET	@Id = '{B9CCD3FC-7FBF-4971-B044-B31852059D1A}'
SET	@Script =
'
--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = ''{12BB99C3-3045-498d-BD54-D2690935D845}''

--
-- Declare and initialize application ID constants
--
DECLARE @SERVICEBUS_CLIENT uniqueidentifier
SET		@SERVICEBUS_CLIENT = ''{523CFC5F-6219-455A-8EF4-F0E6A17247EB}''

--
-- 1. Remove associations between SERVICEBUS_CLIENT application and following fragments:
--    - Service.{Name}.ServiceFactoryData
--    - Service.{Name}.ServicePermissions
--    - Contracts
--    - ResultsRetentionTime
--    - ServiceHostPublishState
--    - Resource.{Name} (except context and channel related fragments)
--
BEGIN TRANSACTION

--
-- Perform removal based on information contained in current change set
--
DELETE FROM #Upgrade_GroupFragments
FROM	#Upgrade_GroupFragments gf
		JOIN
		#Upgrade_Fragments f
			ON	gf.RootGroupId = f.RootGroupId
				AND
				gf.FragmentId = f.Id
				AND
				gf.GroupId = @SERVICEBUS_CLIENT
WHERE	f.SectionId = @SERVICEHOST
		AND
		(
			f.Name LIKE ''Service.%.ServiceFactoryData''
			OR
			f.Name LIKE ''Service.%.ServicePermissions''
			OR
			f.Name = ''Contracts''
			OR
			f.Name = ''ResultsRetentionTime''
			OR
			f.Name = ''ServiceHostPublishState''
			OR
			(
				f.Name LIKE ''Resource.%''
				AND
				f.Name NOT LIKE ''Resource.ServiceBus.ServiceHost.Contexts.%Context.dll''
				AND
				f.Name NOT LIKE ''Resource.ServiceBus.ServiceHost.RequestChannels.%.dll''
			)
		)

--
-- If there some associations to fragments that are not part of current change set,
-- search for associations to fragments that are already part of active configuration
-- (do not include historical fragments into consideration)
--
DELETE FROM #Upgrade_GroupFragments
FROM	#Upgrade_GroupFragments gf
		JOIN
		Active_Fragments f
			ON	gf.RootGroupId = f.RootGroupId
				AND
				gf.FragmentId = f.Id
				AND
				gf.GroupId = @SERVICEBUS_CLIENT
				AND
				f.IsHistorical = 0
WHERE	f.SectionId = @SERVICEHOST
		AND
		(
			f.Name LIKE ''Service.%.ServiceFactoryData''
			OR
			f.Name LIKE ''Service.%.ServicePermissions''
			OR
			f.Name = ''Contracts''
			OR
			f.Name = ''ResultsRetentionTime''
			OR
			f.Name = ''ServiceHostPublishState''
			OR
			(
				f.Name LIKE ''Resource.%''
				AND
				f.Name NOT LIKE ''Resource.ServiceBus.ServiceHost.Contexts.%Context.dll''
				AND
				f.Name NOT LIKE ''Resource.ServiceBus.ServiceHost.RequestChannels.%.dll''
			)
		)

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50528258, --3.3.0.2
	3,
	@Script
)

----
-- 3.3.0.5.01-41157.sql
----
SET	@Id = '{58C42E37-5DF9-41AC-B2C9-6CECDE25846A}'
SET	@Script =
'
--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = ''{12BB99C3-3045-498d-BD54-D2690935D845}''

--
-- 1. Ensure that each ServicePool.{Name}.Implementation fragment has ServiceBus.ServiceHost.ResourceManagement.dll
--    as implementation resource
--
BEGIN TRANSACTION
	
UPDATE	#Upgrade_Fragments
SET		Contents.modify
		(
			''insert
				<Resource name="ServiceBus.ServiceHost.ResourceManagement.dll" />
			as last
			into Implementation[ 1 ]''
		)
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		SectionId = @SERVICEHOST
		AND
		Name LIKE ''ServicePool.%.Implementation''
		AND
		Contents.exist( ''Implementation'' ) = 1
		AND
		Contents.exist( ''Implementation/Resource[ @name="ServiceBus.ServiceHost.ResourceManagement.dll" ]'' ) = 0
	
COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50528261, --3.3.0.5
	1,
	@Script
)


----
-- 3.3.0.6.02-41081.sql
----
SET	@Id = '{EBED2B8A-0C59-4D58-B5F9-191F2EE8505F}'
SET	@Script = 
'
-- Declare and initialize ID constants
DECLARE	@ROOT_GROUP_ID UNIQUEIDENTIFIER
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'';			-- ServiceBus
DECLARE @SERVICE_HOST UNIQUEIDENTIFIER
SET		@SERVICE_HOST = ''{4FF5DBB5-A888-4C76-B222-8EE53950E511}'';			-- ServiceBus ServiceHost Service
DECLARE @ATTRIBUTE_ID UNIQUEIDENTIFIER;
SET @ATTRIBUTE_ID = ''{D300464A-F94B-44EE-AE84-5B5774EE47B8}'';				-- ServicePool.Name attribute
DECLARE @SERVICE_HOST_SECTION UNIQUEIDENTIFIER;
SET		@SERVICE_HOST_SECTION = ''{12BB99C3-3045-498D-BD54-D2690935D845}'';	-- Service Host Section

DECLARE @CURRENT_NAME	VARCHAR(250);
DECLARE @CURENT_ID		VARCHAR(250);

DECLARE @GROUP_ID			UNIQUEIDENTIFIER;
DECLARE @FILTER_ID			UNIQUEIDENTIFIER;
DECLARE @ATTRIBUTE_VALUE_ID	UNIQUEIDENTIFIER;

DECLARE @CHANGESET_ID	INT;

IF OBJECT_ID(''tempdb..#ServicePools'') IS NOT NULL
BEGIN
	DROP TABLE #ServicePools;
END

CREATE TABLE #ServicePools
		(
			PoolId UNIQUEIDENTIFIER,
			PoolName VARCHAR(250),
			PoolProcessed BIT
		)

-- Load service pools
INSERT INTO #ServicePools
SELECT 
	Id, 
	SUBSTRING( Name, 0, ( LEN( Name )- 14) ),
	0
FROM 
	[#Upgrade_Fragments]
WHERE 
	( Name  LIKE ''ServicePool.%.Implementation'' ) AND ( SectionId = @SERVICE_HOST_SECTION )

SET @CHANGESET_ID = ( SELECT TOP(1) ChangeSetId FROM  dbo.Pending_Changesets );

-- Process service pools
WHILE ( EXISTS ( SELECT PoolId FROM #ServicePools WHERE PoolProcessed = 0 ))
BEGIN
	SELECT TOP(1) @CURENT_ID = PoolId, @CURRENT_NAME = PoolName FROM #ServicePools	WHERE PoolProcessed = 0;	
	
	--SET @GROUP_ID = NEWID();
	--SET @FILTER_ID = NEWID();
	
	DECLARE @CHANGE_TYPE varchar(10);
	
	--
	-- Ignore delete on ServicePool.{Name} group
	--
	DELETE	dbo.#Upgrade_Groups
	WHERE	Name = @CURRENT_NAME
			AND
			ChangeType = ''DELETE''
	
	-- GROUP
	IF ( EXISTS ( SELECT ChangeSetId FROM dbo.#Upgrade_Groups WHERE Name = @CURRENT_NAME ) )
		BEGIN
			SET @GROUP_ID = ( SELECT TOP(1) Id FROM dbo.#Upgrade_Groups WHERE Name = @CURRENT_NAME );
		END
	ELSE
		BEGIN
			IF ( EXISTS ( SELECT ReplicationId FROM dbo.Active_Groups WHERE Name = @CURRENT_NAME ) )
				BEGIN
					SET @GROUP_ID = ( SELECT TOP(1) Id FROM dbo.Active_Groups WHERE Name = @CURRENT_NAME );
					SET @CHANGE_TYPE = ''UPDATE'';
				END
			ELSE
				BEGIN
					SET @GROUP_ID = NEWID();
					SET @CHANGE_TYPE = ''INSERT'';
				END
				
			INSERT INTO dbo.#Upgrade_Groups
			(
				ChangeSetId,
				ChangeType,
				Id,
				RootGroupId,
				Name,
				Description,
				GroupTemplateId,
				IsRootGroup
			)
			VALUES
			(
				@CHANGESET_ID,
				@CHANGE_TYPE,
				@GROUP_ID,
				@ROOT_GROUP_ID,
				@CURRENT_NAME,
				SUBSTRING( @CURRENT_NAME, 13, LEN(@CURRENT_NAME) ) + '' service pool group'',
				NULL,
				0
			);
		END
	
	--
	-- Ignore delete of ServiceHost Service <-> ServicePool.{Name} association
	--
	DELETE	dbo.#Upgrade_GroupGroups
	WHERE	GroupId = @SERVICE_HOST
			AND
			ChildGroupId = @GROUP_ID
			AND
			ChangeType = ''DELETE''
	
	-- GROUP PARENT		
	IF ( NOT EXISTS ( SELECT ChangeSetId FROM dbo.#Upgrade_GroupGroups WHERE dbo.#Upgrade_GroupGroups.GroupId = @SERVICE_HOST AND dbo.#Upgrade_GroupGroups.ChildGroupId = @GROUP_ID )
		 AND
		 NOT EXISTS ( SELECT ReplicationId FROM dbo.Active_GroupGroups WHERE dbo.Active_GroupGroups.GroupId = @SERVICE_HOST AND dbo.Active_GroupGroups.ChildGroupId = @GROUP_ID ) )
		BEGIN
			-- Does not exist in active configuration
			SET @CHANGE_TYPE = ''INSERT'';
			INSERT INTO dbo.#Upgrade_GroupGroups
			(
				ChangeSetId,
				ChangeType,
				RootGroupId,
				GroupId,
				ChildGroupId
			)
			VALUES
			(
				@CHANGESET_ID,
				@CHANGE_TYPE,
				@ROOT_GROUP_ID,
				@SERVICE_HOST,
				@GROUP_ID
			);
		END
	
	--
	-- Ignore delete on ServicePool.{Name} filter
	--
	DELETE	dbo.#Upgrade_Filters
	WHERE	Name = @CURRENT_NAME
			AND
			GroupId = @GROUP_ID
			AND
			ChangeType = ''DELETE''
	
	-- FILTER
	IF ( EXISTS( SELECT ChangeSetId FROM dbo.#Upgrade_Filters WHERE Name = @CURRENT_NAME AND GroupId = @GROUP_ID ) )
		BEGIN
			SET @FILTER_ID = ( SELECT TOP(1) Id FROM dbo.#Upgrade_Filters WHERE Name = @CURRENT_NAME AND GroupId = @GROUP_ID );
		END
	ELSE
		BEGIN
			IF ( EXISTS( SELECT ReplicationId FROM dbo.Active_Filters WHERE Name = @CURRENT_NAME AND GroupId = @GROUP_ID ) )
				BEGIN
					--
					SET @FILTER_ID = ( SELECT TOP(1) Id FROM dbo.Active_Filters WHERE Name = @CURRENT_NAME AND GroupId = @GROUP_ID );
					SET @CHANGE_TYPE = ''UPDATE'';
				END
			ELSE
				BEGIN
					--
					SET @CHANGE_TYPE = ''INSERT'';
					SET @FILTER_ID = NEWID();
				END
			INSERT INTO dbo.#Upgrade_Filters
			( 
				ChangeSetId,
				ChangeType,
				Id, 
				RootGroupId, 
				GroupId, 
				Name, 
				Description, 
				MachineName, 
				AppName, 
				AppPath, 
				AppConfigFilePath,
				AppVersion, 
				AppUser  
			)
			VALUES
			( 
				@CHANGESET_ID,
				@CHANGE_TYPE,
				@FILTER_ID, 
				@ROOT_GROUP_ID, 
				@GROUP_ID, 
				@CURRENT_NAME, 
				SUBSTRING( @CURRENT_NAME, 13, LEN(@CURRENT_NAME) ) + '' service pool filter'', 
				NULL, 
				NULL, 
				NULL, 
				NULL, 
				NULL, 
				NULL
			);
		END
	
	--
	-- Ignore delete of value of ServicePool.Name attribute for ServicePool.{Name} filter
	--
	DELETE	dbo.#Upgrade_FilterAttributeValues
	WHERE	FilterId = @FILTER_ID
			AND
			AttributeId = @ATTRIBUTE_ID
			AND
			ChangeType = ''DELETE''
	
	-- FILTER VALUE
	IF ( NOT EXISTS ( SELECT ChangeSetId FROM dbo.#Upgrade_FilterAttributeValues WHERE FilterId = @FILTER_ID AND AttributeId = @ATTRIBUTE_ID ) )
		BEGIN
			IF ( EXISTS ( SELECT ReplicationId FROM dbo.Active_FilterAttributeValues WHERE FilterId = @FILTER_ID AND AttributeId = @ATTRIBUTE_ID ) )
				BEGIN
					SET @CHANGE_TYPE = ''UPDATE'';
				END
			ELSE
				BEGIN
					SET @CHANGE_TYPE = ''INSERT'';
				END
			INSERT INTO dbo.#Upgrade_FilterAttributeValues
			(
				ChangeSetId,
				ChangeType,
				RootGroupId,
				FilterId,
				AttributeId,
				Value
			)
			VALUES
			(
				@CHANGESET_ID,
				@CHANGE_TYPE,
				@ROOT_GROUP_ID,
				@FILTER_ID,
				@ATTRIBUTE_ID,
				SUBSTRING( @CURRENT_NAME, 13, LEN(@CURRENT_NAME) )
			)
		END

	-- set row processed flag
	UPDATE #ServicePools SET PoolProcessed = 1 WHERE PoolId = @CURENT_ID;
END
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50528262, --3.3.0.6
	1,
	@Script
)

----
-- 3.3.0.8.01-40064.sql
----
SET	@Id = '{667BC643-0F2C-41EF-9E11-D97C7A291762}'
SET	@Script = '

--	Declare constants
DECLARE	@DEFAULT_MACRO_ID uniqueidentifier
SET		@DEFAULT_MACRO_ID = ''6C11CA6D-3402-4F1A-9754-41F82E227469''

DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

-- Upgrade GroupMacroValues to new format
update #Upgrade_GroupMacroValues 
set Value = ''<BusinessContext name="DefaultBusinessContext">'' + value + ''</BusinessContext>''
where MacroId = @DEFAULT_MACRO_ID and RootGroupId = @ROOT_GROUP_ID
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50528264, --3.3.0.8
	1,
	@Script
)

----
-- 3.3.0.8.02-42803.sql
----
SET	@Id = '{DFAAFB8E-6815-412F-8CD9-696595442FC6}'
SET	@Script =
'
--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

BEGIN TRANSACTION

--
-- Create temporary table to hold service pool-business context pairs
--
CREATE TABLE #ServicePoolBusinessContexts
(
	ChangeSet       int,
	RootGroup       uniqueidentifier,
	Fragment        uniqueidentifier,
	ServicePool     varchar( max ),
	BusinessContext varchar( max ),
	ShouldAdd       bit,
	IsRowProcessed  bit
)

--
-- Create temporary table to hold service pool fragment identification info and contents
--
CREATE TABLE #ServicePools
(
	ChangeSet        int,
	RootGroup        uniqueidentifier,
	Fragment         uniqueidentifier,
	FragmentName     varchar( 250 ),
	FragmentContents xml
);

--
-- Prepare service pool-business context pairs
--
WITH BusinessContexts_CTE
AS
(
	SELECT	ChangeSetId AS ChangeSet,
			RootGroupId AS RootGroup,
			Id AS Fragment,
			CAST( ServicePool.query( ''ServicePool'' ) AS varchar( max ) ) AS ServicePool,
			RootXmlNode,
			( CASE
				WHEN ChangeType = ''DELETE'' THEN 0
				ELSE 1
			  END) AS ShouldAdd
	FROM	#Upgrade_Fragments f
			CROSS APPLY
			f.Contents.nodes( ''.'' ) AS ServicePools( ServicePool )
	WHERE	f.RootGroupId = @ROOT_GROUP_ID
			AND
			f.RootXmlNode LIKE ''BusinessContexts/BusinessContext name="%"/ServicePools''
			AND
			f.ChangeType IN ( ''INSERT'', ''UPDATE'', ''DELETE'' ) -- Ignore all unexpected change types
	UNION	
	SELECT	ChangeSetId AS ChangeSet,
			RootGroupId AS RootGroup,
			Id AS Fragment,
			CAST( ServicePool.query( ''.'' ) AS varchar( max ) ) AS ServicePool,
			RootXmlNode,
			( CASE
				WHEN ChangeType = ''DELETE'' THEN 0
				ELSE 1
			  END) AS ShouldAdd
	FROM	#Upgrade_Fragments f
			CROSS APPLY
			f.Contents.nodes( ''ServicePools/ServicePool'' ) AS ServicePools( ServicePool )
	WHERE	f.RootGroupId = @ROOT_GROUP_ID
			AND
			f.RootXmlNode LIKE ''BusinessContexts/BusinessContext name="%"''
			AND
			f.ChangeType IN ( ''INSERT'', ''UPDATE'', ''DELETE'' ) -- Ignore all unexpected change types
)
INSERT INTO #ServicePoolBusinessContexts
(
	ChangeSet,
	RootGroup,
	Fragment,
	ServicePool,
	BusinessContext,
	ShouldAdd,
	IsRowProcessed
)
SELECT	ChangeSet,
		RootGroup,
		Fragment,
		CAST( ServicePool AS xml ).value( ''(*/@name )[ 1 ]'', ''varchar( max )'' ) AS ServicePool,
		SUBSTRING
		(
			RootXmlNode,
			CHARINDEX( ''"'', RootXmlNode, 0 ) + 1,
			CHARINDEX( ''"'', RootXmlNode, CHARINDEX( ''"'', RootXmlNode, 0 ) + 1 ) - ( CHARINDEX( ''"'', RootXmlNode, 0 ) + 1 )
		) AS BusinessContext,
		ShouldAdd,
		0 AS IsRowProcessed
FROM	BusinessContexts_CTE
ORDER BY ServicePool, BusinessContext, ShouldAdd

--
-- Prepare service pool fragment identification info and contents
--
INSERT INTO #ServicePools
(
	ChangeSet,
	RootGroup,
	Fragment,
	FragmentName,
	FragmentContents
)
SELECT	ChangeSetId,
		RootGroupId,
		Id,
		Name,
		Contents
FROM	#Upgrade_Fragments
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		Name LIKE ''ServicePool.%''
		AND
		Name NOT LIKE ''ServicePool.%.Implementation''
		AND
		Name NOT LIKE ''ServicePool.%.Services''
		AND
		Name NOT LIKE ''ServicePool.%.ServiceEndpoints''

DECLARE @ServicePool            varchar( max )
DECLARE @BusinessContext        varchar( max )
DECLARE @BusinessContextElement xml
DECLARE @ShouldAdd              bit

--
-- Process service pool-business context pairs
--
WHILE EXISTS( SELECT 1 FROM #ServicePoolBusinessContexts WHERE IsRowProcessed = 0 )
BEGIN
	--
	-- Get next row: 
	-- If there is service pool-business context pair that is marked both for addition and deletion,
	-- deletion will take precedence since it came from #Upgrade change.
	--
	SELECT TOP 1
			@ServicePool     = ServicePool,
			@BusinessContext = BusinessContext,
			@ShouldAdd = ShouldAdd
	FROM	#ServicePoolBusinessContexts
	WHERE	IsRowProcessed = 0
	ORDER BY ServicePool, BusinessContext, ShouldAdd
	
	--
	-- Mark row as processed:
	-- If there is service pool-business context pair that is marked both for addition and deletion,
	-- all rows containing the pair will be marked as processed.
	-- That way deletion will take precedence over addition and addition will be skipped.
	--
	UPDATE	#ServicePoolBusinessContexts
	SET		IsRowProcessed = 1
	WHERE	ServicePool = @ServicePool
			AND
			BusinessContext = @BusinessContext
	
	--
	-- Ensure that ServicePool element has BusinessContexts element
	--
	UPDATE	#ServicePools
	SET		FragmentContents.modify
			(
				''insert element BusinessContexts { "" }
				 as last
				 into ( ServicePool )[ 1 ]''
			)
	WHERE	FragmentName = ''ServicePool.'' + @ServicePool
			AND
			FragmentContents.exist( ''ServicePool'' ) = 1
			AND
			FragmentContents.exist( ''ServicePool/BusinessContexts'' ) = 0
	
	IF ( @ShouldAdd = 1 )
	BEGIN
		--
		-- Prepare BusinessContext element
		--
		SET		@BusinessContextElement = ''<BusinessContext name="DefaultBusinessContext">'' + @BusinessContext + ''</BusinessContext>''

		--
		-- Ensure that ServicePool/BusinessContexts has BusinessContext element 
		-- having name attribute with value of @BusinessContext variable
		--
		UPDATE	#ServicePools
		SET		FragmentContents.modify
				(
					''insert sql:variable( "@BusinessContextElement" )
					 as last
					 into ( ServicePool/BusinessContexts )[ 1 ]''
				)
		WHERE	FragmentName = ''ServicePool.'' + @ServicePool
				AND
				FragmentContents.exist( ''ServicePool/BusinessContexts'' ) = 1
				AND
				FragmentContents.exist( ''ServicePool/BusinessContexts/BusinessContext[ text() = sql:variable( "@BusinessContext" ) ]'' ) = 0
	END
	ELSE
		--
		-- Ensure that ServicePool/BusinessContexts does not have BusinessContext element 
		-- having name attribute with value of @BusinessContext variable
		--
		UPDATE	#ServicePools
		SET		FragmentContents.modify
				(
					''delete ( ServicePool/BusinessContexts/BusinessContext[ @name = sql:variable( "@BusinessContext" ) ] )''
				)
		WHERE	FragmentName = ''ServicePool.'' + @ServicePool
				AND
				FragmentContents.exist( ''ServicePool/BusinessContexts/BusinessContext[ @name = sql:variable( "@BusinessContext" ) ]'' ) = 1
END

--
-- Use prepared updates to ServicePool fragments to update rows in fragments table
--
UPDATE	#Upgrade_Fragments
SET		Contents = sp.FragmentContents
FROM	#ServicePools sp
WHERE	ChangeSetId = sp.ChangeSet
		AND
		RootGroupId = sp.RootGroup
		AND
		Id = sp.Fragment

--
-- Delete Business context fragment group associations
--
DELETE	#Upgrade_GroupFragments
FROM	#ServicePoolBusinessContexts bc
WHERE	ChangeSetId = ChangeSet
		AND
		RootGroupId = RootGroup
		AND
		FragmentId = Fragment

--
-- Delete Business context fragments
--
DELETE	#Upgrade_Fragments
FROM	#ServicePoolBusinessContexts bc
WHERE	ChangeSetId = ChangeSet
		AND
		RootGroupId = RootGroup
		AND
		Id = Fragment

--
-- Drop temporary tables
--
DROP TABLE #ServicePoolBusinessContexts
DROP TABLE #ServicePools

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50528264, --3.3.0.8
	2,
	@Script
)

----
-- 3.3.0.8.03-45348.sql --- PACKAGING
----
SET	@Id = '{DFAAFB8E-6815-412F-8CD9-696595442FC5}'
SET	@Script =
'
--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

BEGIN TRANSACTION

update 
	#Upgrade_Fragments
set
	Contents.modify(''delete ( /Services )'')
where
	Name like ''ServicePool.%'' 
	and Name like ''%.Services''
	and RootGroupId = @ROOT_GROUP_ID
	
update 
	#Upgrade_Fragments
set
	Contents.modify(''insert element Packages{""} into (/)[1]'')
where
	Name like ''ServicePool.%'' 
	and Name like ''%.Services''
	and RootGroupId = @ROOT_GROUP_ID
	AND Contents.exist( ''Packages'' ) = 0

update 
	#Upgrade_Fragments
set
	Contents.modify(''delete ( /ServiceHostData/ServicePools )'')
where
	Name like ''Service.%'' 
	and Name like ''%.ServiceHostData''
	and RootGroupId = @ROOT_GROUP_ID
	
COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50528264, --3.3.0.8
	3,
	@Script
)

----
-- 3.3.0.8.04-40399.sql
----
SET	@Id = '{911884F1-845B-47EC-8381-32A80EC52ABF}'
SET	@Script =
'
--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = ''{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}''

BEGIN TRANSACTION

--
-- Create temporary table to hold ServiceHostData fragment IDs
--
CREATE TABLE #ServiceHostDataFragments
(
	FragmentId uniqueidentifier
)

--
-- Insert ServiceHostData fragment IDs into temporary table
--
INSERT INTO #ServiceHostDataFragments
(
	FragmentId
)
SELECT DISTINCT
		f.Id
FROM	#Upgrade_Fragments f
WHERE	f.RootGroupId = @ROOT_GROUP_ID
		AND
		f.Name LIKE ''%.ServiceHostData''

--
-- Make sure ServiceHostData fragments do not have any Package element
--
UPDATE	#Upgrade_Fragments
SET		Contents.modify
		(
			''delete ( /ServiceHostData/Package )''
		)
FROM	#ServiceHostDataFragments hd
WHERE	Id = hd.FragmentId

--
-- Insert Package element into every ServiceHostData fragment
--
UPDATE	#Upgrade_Fragments
SET		Contents.modify
		(
			''insert element Package { attribute name { sql:variable( "@PackageName" ) } } as last into ( /ServiceHostData )[ 1 ]''
		)
FROM	#ServiceHostDataFragments hd
WHERE	Id = hd.FragmentId

--
-- Drop temporary table that contains ServiceHostData fragment IDs
--
DROP TABLE #ServiceHostDataFragments

COMMIT TRANSACTION
'

INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50528264, -- 3.3.0.8
	4,
	@Script
)

----
-- 3.3.0.34.01
----
SET	@Id = '{F52AE298-7685-46EC-94F8-F4D3E845B5DB}'
SET	@Script =
'
BEGIN TRANSACTION
	
-- 1. replace address = "NetDataContract" with "NewClient":
WHILE (EXISTS(  SELECT 1 FROM #Upgrade_Fragments WHERE
				RootXmlNode = ''ServicePools''
				AND 
				Contents.exist(''/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@address="NetDataContract"]'')=1 ))
	BEGIN
			UPDATE #Upgrade_Fragments 
			SET Contents.modify
			(''replace value of (/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@address=("NetDataContract")]/@address)[1]
			 with "NewClient"'')		 
			WHERE RootXmlNode = ''ServicePools''
			AND 
			Contents.exist(''/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@address="NetDataContract"]'')=1
	END
	
-- 2. replace contract = "ServiceBus.ServiceHost.RequestChannels.Wcf.INetDataContractService" 
-- with "ServiceBus.ServiceHost.RequestChannels.Wcf.IService2"
WHILE (EXISTS(  SELECT 1 FROM #Upgrade_Fragments WHERE
				RootXmlNode = ''ServicePools''
				AND
				Contents.exist(''/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@contract="ServiceBus.ServiceHost.RequestChannels.Wcf.INetDataContractService"]'')=1 ))
	BEGIN
			UPDATE #Upgrade_Fragments 
			SET Contents.modify
			(''replace value of (/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@contract=("ServiceBus.ServiceHost.RequestChannels.Wcf.INetDataContractService")]/@contract)[1]
			 with "ServiceBus.ServiceHost.RequestChannels.Wcf.IService2"'')		 
			WHERE RootXmlNode = ''ServicePools''
			AND 
			Contents.exist(''/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@contract="ServiceBus.ServiceHost.RequestChannels.Wcf.INetDataContractService"]'')=1
	END

COMMIT TRANSACTION
'
INSERT INTO [dbo].[UpgradeScripts]
(
	[Id],
	[Version],
	[Order],
	[Script]
)
VALUES
(
	@Id,
	50528290, -- 3.3.0.34
	1,
	@Script
)
GO

--
-- Return the section's state; one if completed and zero if not completed.
--

IF OBJECT_ID (N'[DataFix].[SectionState]', N'FN') IS NOT NULL
	BEGIN
	--
	-- Drop the function because we are going to create it again
	--
	DROP FUNCTION [DataFix].[SectionState]

	END
GO

CREATE FUNCTION [DataFix].[SectionState]
(
	@TrackingID uniqueidentifier,
	@Section int
)	RETURNS bit
AS
BEGIN
	DECLARE @SectionCompleted bit, @SectionNotRun bit
	SET @SectionCompleted = 1
	SET @SectionNotRun = 0

	DECLARE @SectionState bit
	SET @SectionState = @SectionCompleted
	
	IF EXISTS(SELECT * FROM DataFix.Tracking WHERE TrackingID = @TrackingID)
		IF NOT EXISTS(SELECT * FROM DataFix.Log WHERE TrackingID = @TrackingID AND Section = @Section)
			SET @SectionState = @SectionNotRun

	RETURN @SectionState
END

GO

--
-- Insert an entry into the data fix tracking table
--

IF OBJECT_ID (N'[DataFix].[Initialize]', N'P') IS NOT NULL
	BEGIN
	--
	-- Drop the procedure because we are going to create it again
	--
	DROP PROCEDURE [DataFix].[Initialize]

	END
GO

CREATE PROCEDURE [DataFix].[Initialize]
(
	@TrackingID uniqueidentifier,
	@ReferenceID nchar(10),
	@Author nvarchar(50)
)
AS
BEGIN
	IF NOT EXISTS(SELECT * FROM DataFix.Tracking WHERE TrackingID = @TrackingID)
		INSERT INTO DataFix.Tracking
		(
			TrackingID,
			ReferenceID,
			Author
		)
		VALUES
		(
			@TrackingID,
			@ReferenceID,
			@Author
		)
END;

GO

--
-- Insert an entry into the data fix log table to indicate that the section has been completed
--

IF OBJECT_ID (N'[DataFix].[SetSectionCompleted]', N'P') IS NOT NULL
	BEGIN
	--
	-- Drop the procedure because we are going to create it again
	--
	DROP PROCEDURE [DataFix].[SetSectionCompleted]

	END
GO

CREATE PROCEDURE [DataFix].[SetSectionCompleted]
(
	@TrackingID uniqueidentifier,
	@Section int,
	@Comment nvarchar(255) = NULL
)
AS
BEGIN
	IF NOT EXISTS(SELECT * FROM DataFix.Log WHERE TrackingID = @TrackingID AND Section = @Section)
		INSERT INTO DataFix.Log
		(
			TrackingID,
			Section,
			Completed,
			Comment
		)
		VALUES
		(
			@TrackingID,
			@Section,
			GETDATE(),
			@Comment
		)
END;

GO

IF OBJECT_ID( N'[dbo].[ExecuteUpgradeScripts]', N'P' ) IS NOT NULL
	DROP PROCEDURE [dbo].[ExecuteUpgradeScripts]
GO

CREATE PROCEDURE [dbo].[ExecuteUpgradeScripts]
(
	@Version     int,
	@PackageName varchar( 250 )
)
AS
BEGIN

	-- Prepare list of upgrade scripts to be executed on upgrade table(s)
	DECLARE @Scripts AS TABLE
	(
		[Version]  int,
		[Order]    int,
		Script     varchar(max),
		IsExecuted bit
	)
	INSERT INTO @Scripts
	SELECT	[Version],
			[Order],
			Script,
			0
	FROM	UpgradeScripts
	WHERE	[Version] > @Version
	ORDER BY [Version] ASC, [Order] ASC

	DECLARE @SchemaVersion int
	DECLARE @Order         int
	DECLARE @Script        nvarchar(max)

	-- Execute each upgrade script
	WHILE EXISTS( SELECT [Version] FROM @Scripts WHERE IsExecuted = 0 )
	BEGIN
		-- Select upgrade script to execute
		SELECT TOP 1
				@SchemaVersion = us.[Version],
				@Order = us.[Order],
				@Script = Script
		FROM	@Scripts us
		WHERE	IsExecuted = 0
		ORDER BY us.[Version] ASC, us.[Order] ASC
		
		-- Execute selected upgrade script
		EXEC sp_executesql @Script, N'@PackageName varchar( 250 )', @PackageName
		
		-- Mark the selected script as executed
		UPDATE	@Scripts
		SET		IsExecuted = 1
		WHERE	[Version] = @SchemaVersion
				AND
				[Order] = @Order
	END

	-- Clear list of upgrade scripts that were executed on upgrade table(s)
	DELETE FROM @Scripts
	
END
GO

-- Delete each active item except the one associated with latest change set
DELETE FROM Active_Attributes
WHERE	IsHistorical = 1

DELETE FROM Active_FilterAttributeValues
WHERE	IsHistorical = 1

DELETE FROM Active_Filters
WHERE	IsHistorical = 1

DELETE FROM Active_Fragments
WHERE	IsHistorical = 1

DELETE FROM Active_GroupFilters
WHERE	IsHistorical = 1

DELETE FROM Active_GroupFragments
WHERE	IsHistorical = 1

DELETE FROM Active_GroupGroups
WHERE	IsHistorical = 1

DELETE FROM Active_GroupMacroValues
WHERE	IsHistorical = 1

DELETE FROM Active_Groups
WHERE	IsHistorical = 1

DELETE FROM Active_Macros
WHERE	IsHistorical = 1

DELETE FROM Active_PackageDependencies
WHERE	IsHistorical = 1

DELETE FROM Active_Packages
WHERE	IsHistorical = 1

DELETE FROM Active_Sections
WHERE	IsHistorical = 1


-- Set ChangeSetId of each remaining active item to NULL
UPDATE	Active_Attributes
SET		ChangeSetId = NULL

UPDATE	Active_FilterAttributeValues
SET		ChangeSetId = NULL

UPDATE	Active_Filters
SET		ChangeSetId = NULL

UPDATE	Active_Fragments
SET		ChangeSetId = NULL

UPDATE	Active_GroupFilters
SET		ChangeSetId = NULL

UPDATE	Active_GroupFragments
SET		ChangeSetId = NULL

UPDATE	Active_GroupGroups
SET		ChangeSetId = NULL

UPDATE	Active_GroupMacroValues
SET		ChangeSetId = NULL

UPDATE	Active_Groups
SET		ChangeSetId = NULL

UPDATE	Active_Macros
SET		ChangeSetId = NULL

UPDATE	Active_PackageDependencies
SET		ChangeSetId = NULL

UPDATE	Active_Packages
SET		ChangeSetId = NULL

UPDATE	Active_Sections
SET		ChangeSetId = NULL

-- Delete each pending item
DELETE FROM	Pending_Attributes
DELETE FROM	Pending_Changesets
DELETE FROM	Pending_FilterAttributeValues
DELETE FROM	Pending_Filters
DELETE FROM	Pending_Fragments
DELETE FROM	Pending_GroupFilters
DELETE FROM	Pending_GroupFragments
DELETE FROM	Pending_GroupGroups
DELETE FROM	Pending_GroupMacroValues
DELETE FROM	Pending_Groups
DELETE FROM	Pending_Macros
DELETE FROM	Pending_PackageDependencies
DELETE FROM	Pending_Packages
DELETE FROM Pending_Sections
DELETE FROM Locks

SET IDENTITY_INSERT dbo.Pending_Changesets ON

INSERT INTO dbo.Pending_Changesets
(
	ChangeSetId,
	CreatedByUserName,
	CreatedDateTime,
	ScheduledByUserName,
	ScheduledDateTime,
	DeployedByUserName,
	DeployedDateTime,
	Comment
)
VALUES
(
	0,
	UPPER( ORIGINAL_LOGIN() ),
	GETUTCDATE(),
	NULL,
	NULL,
	UPPER( ORIGINAL_LOGIN() ),
	GETUTCDATE(),
	'This is a pending change set associated with active configuration ' +
	'that was initialized via database installation script.'
)

SET IDENTITY_INSERT dbo.Pending_Changesets OFF

DBCC CHECKIDENT ( '[dbo].[Pending_Changesets]', RESEED, 1)
GO

--
-- Configuration sections
--

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}'
SET @ReferenceID = '15634'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- 1. Create root group
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	--
	-- If there is no root group, create it now
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Groups WHERE Id = @ROOT_GROUP_ID AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus'
			SET @Description = 'Initial ServiceBus environment'
			
			INSERT INTO Active_Groups( Id, RootGroupId, Name, Description, GroupTemplateId, IsRootGroup )
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				1
			)
		END
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created root group'
	COMMIT TRANSACTION
END

--
-- Declare and initialize section ID constants
--
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE	@LOGGING uniqueidentifier
SET		@LOGGING = '{398F8990-F814-4e83-9EBC-B6AD9E1E8BB4}'

DECLARE @METERING uniqueidentifier
SET		@METERING = '{DE385948-E7CA-495b-B325-4BACC2C09C2D}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE @LOGGING_CONFIGURATION uniqueidentifier
SET		@LOGGING_CONFIGURATION = '{A7A2FFF9-616F-4bee-939B-EE6BE157BE63}'

--
-- 2. Insert sections
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that ServiceBus.Administration.Configuration section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @ADMINISTRATION_CONFIGURATION AND @ROOT_GROUP_ID = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus.Administration.Configuration'
			SET @Description = 'ServiceBus.Administration.Configuration section'
			
			INSERT INTO Active_Sections( Id, RootGroupId, SectionGroupName, Name, Description, HandlerType, ConfigFile, IsLegacySection, IsRemoteOnly, ConfigurationHelperType, SectionAttributes )
			VALUES
			(
				@ADMINISTRATION_CONFIGURATION,
				@ROOT_GROUP_ID,
				NULL,
				@Name,
				@Description,
				'ServiceBus.Administration.Infrastructure.AdministrationConfigHandler, ServiceBus.Administration.Infrastructure', -- Handler type
				'App.config',
				1, -- Is legacy configuration?
				0,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that ServiceBus.Logging section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @LOGGING AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus.Logging'
			SET @Description = 'ServiceBus.Logging section'
			
			INSERT INTO Active_Sections( Id, RootGroupId, SectionGroupName, Name, Description, HandlerType, ConfigFile, IsLegacySection, IsRemoteOnly, ConfigurationHelperType, SectionAttributes )
			VALUES
			(
				@LOGGING,
				@ROOT_GROUP_ID,
				NULL,
				@Name,
				@Description,
				'ServiceBus.ServiceHost.ServiceBusConfigHandler, ServiceBus.ServiceHost.Common', -- Handler type
				'App.config',
				1, -- Is legacy configuration?
				0,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that ServiceBus.Metering section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @METERING AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus.Metering'
			SET @Description = 'ServiceBus.Metering section'
			
			INSERT INTO Active_Sections( Id, RootGroupId, SectionGroupName, Name, Description, HandlerType, ConfigFile, IsLegacySection, IsRemoteOnly, ConfigurationHelperType, SectionAttributes )
			VALUES
			(
				@METERING,
				@ROOT_GROUP_ID,
				NULL,
				@Name,
				@Description,
				'ServiceBus.Metering.MeteringConfigHandler, ServiceBus.Metering.Common', -- Handler type
				'App.config',
				1, -- Is legacy configuration?
				0,
				NULL,
				NULL
			)
		END

	--
	-- Ensure that ServiceBus.ServiceHost section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @SERVICEHOST AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus.ServiceHost'
			SET @Description = 'ServiceBus.ServiceHost section'
			
			INSERT INTO Active_Sections( Id, RootGroupId, SectionGroupName, Name, Description, HandlerType, ConfigFile, IsLegacySection, IsRemoteOnly, ConfigurationHelperType, SectionAttributes )
			VALUES
			(
				@SERVICEHOST,
				@ROOT_GROUP_ID,
				NULL,
				@Name,
				@Description,
				'ServiceBus.ServiceHost.ServiceBusConfigHandler, ServiceBus.ServiceHost.Common', -- Handler type
				'App.config',
				1, -- Is legacy configuration?
				0,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that loggingConfiguration section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @LOGGING_CONFIGURATION AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'loggingConfiguration'
			SET @Description = 'loggingConfiguration section'
			
			INSERT INTO Active_Sections( Id, RootGroupId, SectionGroupName, Name, Description, HandlerType, ConfigFile, IsLegacySection, IsRemoteOnly, ConfigurationHelperType, SectionAttributes )
			VALUES
			(
				@LOGGING_CONFIGURATION,
				@ROOT_GROUP_ID,
				NULL,
				@Name,
				@Description,
				'Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35', -- Handler type
				'App.config',
				0, -- Is legacy configuration?
				0,
				NULL,
				'name="Logging Application Block" tracingEnabled="true" defaultCategory="General" logWarningsWhenNoCategoriesMatch="true"'
			)
		END
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted all necessary sections'
	COMMIT TRANSACTION
END

--
-- Declare and initialize macro ID constants
--
DECLARE @LOGGING_FILETARGET_FOLDER uniqueidentifier
SET		@LOGGING_FILETARGET_FOLDER = '{509BEB93-6302-4a82-9AF4-B0D4449BE616}'

DECLARE @APPPOOL_SERVER_NAME uniqueidentifier
SET		@APPPOOL_SERVER_NAME = '{E955E6D8-13FA-4194-932E-DB30A802E529}'

DECLARE @SP_SYSTEM_WCF1_PORT uniqueidentifier
SET		@SP_SYSTEM_WCF1_PORT = '{94D5EEDE-EDB7-4995-AE17-BB93524AECD3}'

DECLARE @SP_SYSTEM_WCF2_PORT uniqueidentifier
SET		@SP_SYSTEM_WCF2_PORT = '{9C11E260-7989-41A1-B303-DCBAD3C22566}'

DECLARE	@SP_SYSTEM_LOCAL uniqueidentifier
SET		@SP_SYSTEM_LOCAL = '{F1CB781D-6056-4599-9C6C-D802A84D96BA}'

DECLARE @SQL_SERVER uniqueidentifier
SET		@SQL_SERVER = '{C333BBE3-973C-47A3-A229-54ACA529D105}'

DECLARE @SQL_REQUEST_STORE_DATABASE uniqueidentifier
SET		@SQL_REQUEST_STORE_DATABASE = '{D1A923ED-7B0F-4CF7-B929-6CF0360E4A35}'

DECLARE @SQL_METERING_STORE_DATABASE uniqueidentifier
SET		@SQL_METERING_STORE_DATABASE = '{E5DA6BA8-F8E2-4666-97DB-A24926C500AE}'

DECLARE @SQL_LOGGING_STORE_DATABASE uniqueidentifier
SET		@SQL_LOGGING_STORE_DATABASE = '{9C0164DF-3C1C-46A2-A102-012A7481F153}'

DECLARE @SQL_CONFIGURATION_STORE_DATABASE uniqueidentifier
SET		@SQL_CONFIGURATION_STORE_DATABASE = '{05A241A5-59FB-43C3-832A-4EE77CF23334}'

DECLARE @SQL_USER uniqueidentifier
SET		@SQL_USER = '{1ADC84FF-F8BA-417B-9706-1C41434AAC5F}'

DECLARE @SQL_PASSWORD uniqueidentifier
SET		@SQL_PASSWORD = '{3BED3EA2-0D9C-42E8-B52B-1468AFA0E895}'

DECLARE @SQL_INTEGRATED_SECURITY uniqueidentifier
SET		@SQL_INTEGRATED_SECURITY = '{134EA7D2-A5EA-461C-8882-D054E51D40F3}'

DECLARE @RESOURCECATALOG_SHARE_SERVER uniqueidentifier
SET		@RESOURCECATALOG_SHARE_SERVER = '{679F54C2-BE5A-4B5A-A493-7CCD3A9563AC}'

DECLARE @RESOURCECATALOG_SHARE_NAME uniqueidentifier
SET		@RESOURCECATALOG_SHARE_NAME = '{45119A9D-CB7B-4E40-97A3-45383E75D0FF}'

DECLARE @LOGGING_FILENAME_LISTENER uniqueidentifier
SET		@LOGGING_FILENAME_LISTENER = '{A9B6C965-F5BB-4132-9B33-D250EF19A702}'

--
-- 3. Insert macros for the sections within this root group
--
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that LOGGING.FILETARGET.FOLDER macro is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @LOGGING_FILETARGET_FOLDER AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'LOGGING.FILETARGET.FOLDER'
			SET @Description = 'Logging File target directory path'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@LOGGING_FILETARGET_FOLDER,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that APPPOOL.SERVER.NAME macro is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @APPPOOL_SERVER_NAME AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'APPPOOL.SERVER.NAME'
			SET @Description = 'Application pool server name'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@APPPOOL_SERVER_NAME,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that SP.SYSTEM.LOCAL macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SP_SYSTEM_LOCAL AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SP.SYSTEM.LOCAL'
			SET @Description = 'Indicates whether ServicePool System is local'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SP_SYSTEM_LOCAL,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that SP.SYSTEM.WCF1.PORT macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SP_SYSTEM_WCF1_PORT AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SP.SYSTEM.WCF1.PORT'
			SET @Description = 'ServicePool System WcfServiceRequestChannel1 port'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SP_SYSTEM_WCF1_PORT,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that SP.SYSTEM.WCF2.PORT macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SP_SYSTEM_WCF2_PORT AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SP.SYSTEM.WCF2.PORT'
			SET @Description = 'ServicePool System WcfServiceRequestChannel2 port'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SP_SYSTEM_WCF2_PORT,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that SQL.SERVER macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SQL_SERVER AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.SERVER'
			SET @Description = 'SQL server name'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SQL_SERVER,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that SQL.REQUEST.STORE.DATABASE macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SQL_REQUEST_STORE_DATABASE AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.REQUEST.STORE.DATABASE'
			SET @Description = 'RequestStore database name'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SQL_REQUEST_STORE_DATABASE,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END	
	
	--
	-- Ensure that SQL.METERING.STORE.DATABASE macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SQL_METERING_STORE_DATABASE AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.METERING.STORE.DATABASE'
			SET @Description = 'MeteringStore database name'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SQL_METERING_STORE_DATABASE,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that SQL.LOGGING.STORE.DATABASE macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SQL_LOGGING_STORE_DATABASE AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.LOGGING.STORE.DATABASE'
			SET @Description = 'LoggingStore database name'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SQL_LOGGING_STORE_DATABASE,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that SQL.CONFIGURATION.STORE.DATABASE macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SQL_CONFIGURATION_STORE_DATABASE AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.CONFIGURATION.STORE.DATABASE'
			SET @Description = 'Configuration database name'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SQL_CONFIGURATION_STORE_DATABASE,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that SQL.USER macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SQL_USER AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.USER'
			SET @Description = 'SQL server user'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SQL_USER,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that SQL.PASSWORD macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SQL_PASSWORD AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.PASSWORD'
			SET @Description = 'SQL server password'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SQL_PASSWORD,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that SQL.INTEGRATED.SECURITY macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SQL_INTEGRATED_SECURITY AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.INTEGRATED.SECURITY'
			SET @Description = 'True for Windows Authentication and False for SQL Authentication'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@SQL_INTEGRATED_SECURITY,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that RESOURCECATALOG.SHARE.SERVER macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @RESOURCECATALOG_SHARE_SERVER AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'RESOURCECATALOG.SHARE.SERVER'
			SET @Description = 'Server where ResourceCatalog Repository is shared'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@RESOURCECATALOG_SHARE_SERVER,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that RESOURCECATALOG.SHARE.NAME macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @RESOURCECATALOG_SHARE_NAME AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'RESOURCECATALOG.SHARE.NAME'
			SET @Description = 'ResourceCatalog Repository share name'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@RESOURCECATALOG_SHARE_NAME,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that LOGGING.FILENAME.LISTENER macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @LOGGING_FILENAME_LISTENER AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'LOGGING.FILENAME.LISTENER'
			SET @Description = 'Logging Application Block FlatFile TraceListener file name'
			
			INSERT INTO Active_Macros( Id, RootGroupId, Name, Description, ValueType )
			VALUES
			( 
				@LOGGING_FILENAME_LISTENER,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted all necessary macros'
	COMMIT TRANSACTION
END

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--
-- 4. Create applications (child groups of the root group)
--
SET @Section = 4
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
		
	--
	-- Ensure that SERVICEHOST_SERVICE application (child group) is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Groups WHERE Id = @SERVICEHOST_SERVICE AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus ServiceHost Service'
			SET @Description = 'ServiceBus ServiceHost Windows Service'
	
			INSERT INTO Active_Groups( Id, RootGroupId, Name, Description, GroupTemplateId, IsRootGroup )	
			VALUES
			(
				@SERVICEHOST_SERVICE,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				0
			)
		END
	
	--
	-- Ensure that SERVICEHOST_SERVICE application (child group) is linked to the root group
	-- 
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupGroups WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND ChildGroupId = @SERVICEHOST_SERVICE ) )
		INSERT INTO Active_GroupGroups( RootGroupId, GroupId, ChildGroupId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE
		)

	--
	-- Ensure that DAC application (child group) is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Groups WHERE Id = @ADMINISTRATIVE_CONSOLE AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus Administrative Console'
			SET @Description = 'ServiceBus Administrative Console'
	
			INSERT INTO Active_Groups( Id, RootGroupId, Name, Description, GroupTemplateId, IsRootGroup )	
			VALUES
			(
				@ADMINISTRATIVE_CONSOLE,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				0
			)
		END
		
	--
	-- Ensure that DAC application (child group) is linked to the root group
	-- 
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupGroups WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND ChildGroupId = @ADMINISTRATIVE_CONSOLE ) )
		INSERT INTO Active_GroupGroups( RootGroupId, GroupId, ChildGroupId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created applications'
	COMMIT TRANSACTION
END

--
-- 5. Create filters for the applications
--
SET @Section = 5
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE	@FilterId uniqueidentifier
	
	--
	-- Ensure that SERVICEBUS.SERVICEHOST.SERVICE.EXE application filter for the root group is created
	--	
	SET	@FilterId = '{B17064D7-CF47-49b7-B423-0DEC58987EED}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Filters WHERE Id = @FilterId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus ServiceHost Service'
			SET @Description =
				'This filter is matched by any version of ServiceBus ServiceHost Service application ' +
				'running (as service) on any machine under any account regardless of application path and config path.'
			
			INSERT INTO Active_Filters( Id, RootGroupId, Name, Description, MachineName, AppName, AppPath, AppConfigFilePath, AppVersion, AppUser )
			VALUES
			(
				@FilterId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				'SERVICEBUS.SERVICEHOST.SERVICE',
				NULL,
				NULL,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that the ServiceBus ServiceHost Service filter is linked to the application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFilters WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FilterId = @FilterId ) )
		INSERT INTO Active_GroupFilters( RootGroupId, GroupId, FilterId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FilterId
		)
	
	--
	-- Ensure that SERVICEBUS.ADMINISTRATION.SHELL.EXE application filter for the root group is created
	--	
	SET	@FilterId = '{A674FA35-5CDC-48e3-939E-7B3C6BB11876}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Filters WHERE Id = @FilterId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus Administrative Console'
			SET @Description =
				'This filter is matched by any version of ServiceBus Administrative Console application ' +
				'running on any machine under any account regardless of application path and config path.'
			
			INSERT INTO Active_Filters( Id, RootGroupId, Name, Description, MachineName, AppName, AppPath, AppConfigFilePath, AppVersion, AppUser )
			VALUES
			(
				@FilterId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				'SERVICEBUS.ADMINISTRATION.SHELL',
				NULL,
				NULL,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that the ServiceBus Administrative Console filter is linked to the application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFilters WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FilterId = @FilterId ) )
		INSERT INTO Active_GroupFilters( RootGroupId, GroupId, FilterId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FilterId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created filters for the applications'
	COMMIT TRANSACTION
END

--
-- 6. Assign values to the macros for the applications
--
SET @Section = 6
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that value is assigned to macro LOGGING_FILETARGET_FOLDER for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @LOGGING_FILETARGET_FOLDER ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@LOGGING_FILETARGET_FOLDER,
			'C:\ServiceBus\Logging'
		)
	
	--
	-- Ensure that value is assigned to macro APPPOOL_SERVER_NAME for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @APPPOOL_SERVER_NAME ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@APPPOOL_SERVER_NAME,
			'localhost'						-- COMMENT OUT FOR SETUP
			--'{DS:MACRO:APPPOOL_SERVER_NAME}' 	-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro SP_SYSTEM_LOCAL for SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND MacroId = @SP_SYSTEM_LOCAL ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@SP_SYSTEM_LOCAL,
			'True'
		)
	
	--
	-- Ensure that value is assigned to macro SP_SYSTEM_LOCAL for ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND MacroId = @SP_SYSTEM_LOCAL ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@SP_SYSTEM_LOCAL,
			'False'
		)
	
	--
	-- Ensure that value is assigned to macro SP_SYSTEM_WCF1_PORT for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SP_SYSTEM_WCF1_PORT ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SP_SYSTEM_WCF1_PORT,
			'47100'
		)
	
	--
	-- Ensure that value is assigned to macro SP_SYSTEM_WCF2_PORT for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SP_SYSTEM_WCF2_PORT ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SP_SYSTEM_WCF2_PORT,
			'47101'
		)
	
	--
	-- Ensure that value is assigned to macro SQL_SERVER for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SQL_SERVER ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SQL_SERVER,
			--'(local)\MSSQLSERVER2008'		-- COMMENT OUT FOR SETUP
			'LSIDEV02SDSH01.lsi-dev.ad'	-- COMMENT OUT FOR SETUP
			--'{DS:MACRO:SQL_SERVER}'		 	-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro SQL_REQUEST_STORE_DATABASE for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SQL_REQUEST_STORE_DATABASE ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SQL_REQUEST_STORE_DATABASE,
			--'ServiceBusServiceHost_DEV'	-- UNCOMMENT OUT FOR DailyBuild
			'ServiceBusServiceHost'		 	-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro SQL_METERING_STORE_DATABASE for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SQL_METERING_STORE_DATABASE ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SQL_METERING_STORE_DATABASE,
			--'ServiceBusMetering_DEV'			-- UNCOMMENT OUT FOR DailyBuild
			'ServiceBusMetering'	 			-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro SQL_LOGGING_STORE_DATABASE for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SQL_LOGGING_STORE_DATABASE ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SQL_LOGGING_STORE_DATABASE,
			--'ServiceBusLogging_DEV'			-- UNCOMMENT OUT FOR DailyBuild
			'ServiceBusLogging' 				-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro SQL_CONFIGURATION_STORE_DATABASE for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SQL_CONFIGURATION_STORE_DATABASE ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SQL_CONFIGURATION_STORE_DATABASE,
			--'ServiceBusConfiguration_DEV'		-- UNCOMMENT OUT FOR DailyBuild
			'ServiceBusConfiguration' 			-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro SQL_USER for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SQL_USER ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SQL_USER,
			'api'							-- COMMENT OUT FOR SETUP
			--'{DS:MACRO:SQL_USER}' 			-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro SQL_PASSWORD for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SQL_PASSWORD ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SQL_PASSWORD,
			'api1234!'					-- COMMENT OUT FOR SETUP
			--'{DS:MACRO:SQL_PASSWORD}' 		-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro SQL_INTEGRATED_SECURITY for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SQL_INTEGRATED_SECURITY ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SQL_INTEGRATED_SECURITY,
			'False'								-- COMMENT OUT FOR SETUP
			--'{DS:MACRO:SQL_INTEGRATED_SECURITY}' 	-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro RESOURCECATALOG_SHARE_SERVER for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @RESOURCECATALOG_SHARE_SERVER ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@RESOURCECATALOG_SHARE_SERVER,
			--'localhost'						-- COMMENT OUT FOR SETUP
			'LSIDEV02SDSH01.lsi-dev.ad'		-- UNCOMMENT OUT FOR DailyBuild
			--'{DS:MACRO:APP_SERVER_NAME}' 		-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro RESOURCECATALOG_SHARE_NAME for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @RESOURCECATALOG_SHARE_NAME ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@RESOURCECATALOG_SHARE_NAME,
			--'ResourceCatalogRepository_DEV'	-- UNCOMMENT OUT FOR DailyBuild
			'ResourceCatalogRepository' 		-- UNCOMMENT FOR SETUP
		)
	
	--
	-- Ensure that value is assigned to macro LOGGING_FILENAME_LISTENER for SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND MacroId = @LOGGING_FILENAME_LISTENER ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@LOGGING_FILENAME_LISTENER,
			'C:\ServiceBus\Logging\ServiceHost_Service.txt'
		)
	
	--
	-- Ensure that value is assigned to macro LOGGING_FILENAME_LISTENER for ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND MacroId = @LOGGING_FILENAME_LISTENER ) )
		INSERT INTO Active_GroupMacroValues( RootGroupId, GroupId, MacroId, Value )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@LOGGING_FILENAME_LISTENER,
			'C:\ServiceBus\Logging\AdministrativeConsole.txt'
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Assigned values to the macros for the applications'
	COMMIT TRANSACTION
END

--
-- 7. Create fragments and link them to appropriate section(s)
--
SET @Section = 7
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @FragmentId uniqueidentifier

	--
	-- Ensure that AssembliesDirectory fragment is created for ADMINISTRATION_CONFIGURATION section
	--
	SET	@FragmentId = '{A8F7F5B1-9E5A-4ddf-A41F-F662BC2D1E95}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'AssembliesDirectory'
			SET @Description = 'Assemblies directory'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				NULL,
				'<AssembliesDirectory>.</AssembliesDirectory>'
			)
		END

	--
	-- Ensure that AssembliesDirectory fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that EditableConfigSections fragment is created for ADMINISTRATION_CONFIGURATION section
	--
	SET	@FragmentId = '{ADF72DF7-265A-4398-A1BD-C851ED060400}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'EditableConfigSections'
			SET @Description = 'Editable configuration sections'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				NULL,
				'
<EditableConfigSections>
  <section name="ServiceBus.Metering" />
  <section name="ServiceBus.Utility" />
  <section name="ServiceBus.ServiceHost" />
  <section name="ServiceBus.Administration.Configuration" />
</EditableConfigSections>
				'
			)
		END
	
	--
	-- Ensure that EditableConfigSections fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that Controls fragment is created for ADMINISTRATION_CONFIGURATION section
	--
	SET	@FragmentId = '{98EB1790-63FF-4121-A290-5286F5A722BD}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Controls'
			SET @Description = 'Administrative Console Modules'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				NULL,
				'
<Controls>
  <Control name="SectionsControl">
    <ConfigurationPath>configSections</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.SectionsControl.dll</FileName>
      <Bytes />
      <Type>ServiceBus.Administration.Configuration.SectionsControl</Type>
    </Implementation>
  </Control>
  <Control name="ServiceHostDataControl">
    <ConfigurationPath>ServiceBus.ServiceHost/Services(/ServiceGroup(\[[^\[\]]+\])?)+/Service\[([^\[\]]*)\]/ServiceHostData</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ServiceCatalog.dll</FileName>
      <Bytes />
      <Type>ServiceBus.Administration.Configuration.ServiceHostDataControl</Type>
    </Implementation>
  </Control>
  <Control name="ArgumentsControl">
    <ConfigurationPath>ServiceBus.ServiceHost/Services(/ServiceGroup(\[[^\[\]]+\])?)+/Service(\[[^\[\]]+\])?/ServicePublicContract/Arguments</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ServiceControl.dll</FileName>
      <Bytes />
      <Type>ServiceBus.Administration.Configuration.ArgumentsControl</Type>
    </Implementation>
  </Control>
  <Control name="ResultsControl">
    <ConfigurationPath>ServiceBus.ServiceHost/Services(/ServiceGroup(\[[^\[\]]+\])?)+/Service(\[[^\[\]]+\])?/ServicePublicContract/Results</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ServiceControl.dll</FileName>
      <Bytes />
      <Type>ServiceBus.Administration.Configuration.ArgumentsControl</Type>
    </Implementation>
  </Control>
  <Control name="ResourceCatalog">
    <ConfigurationPath>ServiceBus.ServiceHost/ResourceCatalog</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ResourceCatalog.dll</FileName>
      <Type>ServiceBus.Administration.Configuration.ResourceCatalog</Type>
    </Implementation>
    <ControlData>
      <AutoUploadMissingResourceFromLocalFile>True</AutoUploadMissingResourceFromLocalFile>
      <Observer name="StepCatalog">
        <Implementation>
          <FileName>.\Modules\ServiceBus.Administration.Modules.StepCatalog.dll</FileName>
          <Type>ServiceBus.Administration.Modules.StepResourceObserver</Type>
        </Implementation>
      </Observer>
      <Observer name="Types">
        <Implementation>
          <FileName>.\Modules\ServiceBus.Administration.Modules.ContractResolver.dll</FileName>
          <Type>ServiceBus.Administration.Modules.ContractResourceObserver</Type>
        </Implementation>
      </Observer>
    </ControlData>
  </Control>
  <Control name="ContractResolver">
    <ConfigurationPath>ServiceBus.ServiceHost/Contracts</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ContractResolver.dll</FileName>
      <Bytes />
      <Type>ServiceBus.Administration.Configuration.ContractResolver</Type>
    </Implementation>
    <ControlData>
      <Observer name="Types" />
    </ControlData>
  </Control>
  <Control name="StepCatalog">
    <ConfigurationPath>ServiceBus.Administration.Configuration/StepCatalog</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.StepCatalog.dll</FileName>
      <Type>ServiceBus.Administration.Configuration.StepCatalog</Type>
    </Implementation>
    <ControlData>
      <Observer name="ServiceCatalog">
        <Implementation>
          <FileName>.\Modules\ServiceBus.Administration.Modules.ServiceCatalog.dll</FileName>
          <Type>ServiceBus.Administration.Modules.ServiceStepObserver</Type>
        </Implementation>
      </Observer>
    </ControlData>
  </Control>
  <Control name="ServiceStepCatalog">
    <ConfigurationPath>ServiceBus.ServiceHost/Services(/ServiceGroup(\[[^\[\]]+\])?)+/Service\[([^\[\]]*)\]/ServiceFactoryData\[([^\[\]]*)\]/Steps</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ServiceStepCatalog.dll</FileName>
      <Type>ServiceBus.Administration.Configuration.ServiceStepCatalog</Type>
    </Implementation>
  </Control>
  <Control name="ServiceStepControl">
    <ConfigurationPath>ServiceBus.ServiceHost/Services(/ServiceGroup(\[[^\[\]]+\])?)+/Service\[([^\[\]]*)\]/ServiceFactoryData\[([^\[\]]*)\]/Steps/Step\[([^\[\]]*)\]</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ServiceStepCatalog.dll</FileName>
      <Type>ServiceBus.Administration.Configuration.ServiceStepControl</Type>
    </Implementation>
  </Control>
  <Control name="ServiceStepsRouting">
    <ConfigurationPath>ServiceBus.ServiceHost/Services(/ServiceGroup(\[[^\[\]]+\])?)+/Service\[([^\[\]]*)\]/ServiceFactoryData\[([^\[\]]*)\]/Steps/Step\[([^\[\]]*)\]/Routes</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ServiceStepCatalog.dll</FileName>
      <Type>ServiceBus.Administration.Configuration.ServiceStepsRouting</Type>
    </Implementation>
  </Control>
  <Control name="ServiceCachingControl">
    <ConfigurationPath>ServiceBus.ServiceHost/Services(/ServiceGroup(\[[^\[\]]+\])?)+/Service\[([^\[\]]*)\]/ServicePublicContract/Cache</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ServiceControl.dll</FileName>
      <Type>ServiceBus.Administration.Configuration.ServiceCachingControl</Type>
    </Implementation>
  </Control>
  <Control name="TestControl">
    <ConfigurationPath>ServiceBus.ServiceHost/ServicesX</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ServiceControl.dll</FileName>
      <Type>ServiceBus.Administration.Configuration.ServiceCachingControl</Type>
    </Implementation>
  </Control>
  <Control name="ServiceCatalog">
    <ConfigurationPath>ServiceBus.ServiceHost/Services</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.ServiceCatalog.dll</FileName>
      <Bytes />
      <Type>ServiceBus.Administration.Configuration.ServiceCatalog</Type>
    </Implementation>
  </Control>
  <Control name="FactoryCatalog">
    <ConfigurationPath>ServiceBus.ServiceHost/Factories</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Configuration.FactoryCatalog.dll</FileName>
      <Type>ServiceBus.Administration.Configuration.FactoryCatalog</Type>
    </Implementation>
  </Control>
  <Control name="LogViewer">
    <ConfigurationPath>ServiceBus.ServiceHost/Services/Logging</ConfigurationPath>
    <Implementation>
      <FileName>.\Modules\ServiceBus.Administration.Logging.Common.dll</FileName>
      <Type>ServiceBus.Administration.Logging.LogViewer</Type>
    </Implementation>
    <ControlData>
      <CommandTimeout>250</CommandTimeout>
      <PageSize>100</PageSize>
      <RefreshIntervalInMinutes>5</RefreshIntervalInMinutes>
      <IsStandAlone>false</IsStandAlone>
    </ControlData>
  </Control>
</Controls>
				'
			)
		END
		
	--
	-- Ensure that Controls fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that StepCatalog fragment is created for ADMINISTRATION_CONFIGURATION section
	--
	SET	@FragmentId = '{E5CA5C41-BEBF-42b9-84F8-ADDEE38BCC35}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepCatalog'
			SET @Description = 'Step catalog'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				NULL,
				'<StepCatalog />'
			)
		END
		
	--
	-- Ensure that StepCatalog fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that ObserverData fragment is created for ADMINISTRATION_CONFIGURATION section
	--
	SET	@FragmentId = '{87B47C8D-7172-47c3-9780-E813E05FAEB9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ObserverData'
			SET @Description = 'Step resource observer, contract resource observer and service step observer'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				NULL,
				'
<ObserverData>
  <StepResourceObserver />
  <ContractResourceObserver />
  <ServiceStepObserver />
</ObserverData>
				'
			)
		END
		
	--
	-- Ensure that ObserverData fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that AC.Properties fragment is created for LOGGING section
	--
	SET	@FragmentId = '{5465EE3D-E08A-4053-B79B-62BCFDC577D2}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'AC.Properties'
			SET @Description = 'Logging properties for Administrative Console'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING,
				NULL,
				'
<Properties>
	<Property name="Level">Warning</Property>
	<!--
		<Property name="MachineName">Dev</Property>
		<Property name="ApplicationName">TestApp</Property>
	-->
	<Property name="AttributeCodeSize">80</Property>
	<Property name="AttributeValueSize">250</Property>
	<Property name="CommandTimeout">250</Property>
</Properties>
				'
			)
		END
		
	--
	-- Ensure that AC.Properties fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that AC.Targets fragment is created for LOGGING section
	--
	SET	@FragmentId = '{514B163C-D68C-4696-9DDC-59D878742BAE}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'AC.Targets'
			SET @Description = 'Logging targets for Administrative Console'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING,
				NULL,
				'
<Targets>
	<Target name="ServiceHost">
		<Assembly>ServiceBus.Logging.Targets.ServiceHost.dll,ServiceBus.Logging.ServiceHostTarget</Assembly>
		<Properties>
			<LogInternalException>False</LogInternalException>
		</Properties>
		<Filter>
			<LogLevel>
				<Value>Warning</Value>
				<Match>GreaterThenOrEqual</Match>
			</LogLevel>
		</Filter>
		<SubTargets>
			<Target name="File">
				<Assembly>ServiceBus.Logging.Targets.File.dll,ServiceBus.Logging.FileTarget</Assembly>
				<Properties>
					<Property name="DirectoryPath">[DSCS:MACRO:LOGGING.FILETARGET.FOLDER]</Property>
					<Property name="MaxFileSize">10240</Property>
				</Properties>
			</Target>
		</SubTargets>
	</Target>
</Targets>
				'
			)
		END
		
	--
	-- Ensure that AC.Targets fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that SH.Properties fragment is created for LOGGING section
	--
	SET	@FragmentId = '{AD22143F-914F-489e-9221-8DC14AF62A56}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SH.Properties'
			SET @Description = 'Logging properties for ServiceHost Windows service'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING,
				NULL,
				'
<Properties>
	<Property name="Level">Debug</Property>
	<!--
		<Property name="MachineName">Dev</Property>
		<Property name="ApplicationName">TestApp</Property>
	-->
	<Property name="AttributeCodeSize">80</Property>
	<Property name="AttributeValueSize">250</Property>
	<Property name="CommandTimeout">250</Property>
</Properties>
				'
			)
		END
		
	--
	-- Ensure that SH.Properties fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that SH.Targets fragment is created for LOGGING section
	--
	SET	@FragmentId = '{2101CFAD-A213-47da-B677-4B1D0DB779A4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SH.Targets'
			SET @Description = 'Logging targets for ServiceHost Windows service'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING,
				NULL,
				'
<Targets>
	<Target name="ForwardedByService-Database">
		<Assembly>ServiceBus.Logging.Targets.Database.dll,ServiceBus.Logging.DatabaseTarget</Assembly>
		<Properties>
			<LogInternalException>False</LogInternalException>
		</Properties>
		<Filter>
			<Flags>
				<Flag name="ForwardedByService">
					<IsSet>True</IsSet>
				</Flag>
			</Flags>
		</Filter>
		<SubTargets>
			<Target name="File">
				<Assembly>ServiceBus.Logging.Targets.File.dll,ServiceBus.Logging.FileTarget</Assembly>
				<Properties>
					<Property name="DirectoryPath">[DSCS:MACRO:LOGGING.FILETARGET.FOLDER]</Property>
					<Property name="MaxFileSize">10240</Property>
				</Properties>
			</Target>
		</SubTargets>
	</Target>
	<Target name="NonLoggingPools-MSMQ">
		<Assembly>ServiceBus.Logging.Targets.MSMQ.dll,ServiceBus.Logging.MSMQTarget</Assembly>
		<Properties>
			<LogInternalException>True</LogInternalException>
			<Property name="QueuePath">.\Private$\ServiceBus.logging</Property>
		</Properties>
		<Filter>
			<LogLevel>
				<Value>Debug</Value>
				<Match>GreaterThenOrEqual</Match>
			</LogLevel>
			<Flags>
				<Flag name="ForwardedByService">
					<IsSet>False</IsSet>
				</Flag>
			</Flags>
		</Filter>
		<SubTargets>
			<Target name="Database">
				<Assembly>ServiceBus.Logging.Targets.Database.dll,ServiceBus.Logging.DatabaseTarget</Assembly>
				<Properties>
					<LogInternalException>False</LogInternalException>
				</Properties>
				<SubTargets>
					<Target name="File">
						<Assembly>ServiceBus.Logging.Targets.File.dll,ServiceBus.Logging.FileTarget</Assembly>
						<Properties>
							<Property name="DirectoryPath">[DSCS:MACRO:LOGGING.FILETARGET.FOLDER]</Property>
							<Property name="MaxFileSize">10240</Property>
						</Properties>
					</Target>
				</SubTargets>
			</Target>
		</SubTargets>
	</Target>
</Targets>
				'
			)
		END
		
	--
	-- Ensure that SH.Targets fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Enabled fragment is created for METERING section
	--
	SET	@FragmentId = '{5F35D4D2-2644-4900-BCD5-D1DEE87F4009}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Enabled'
			SET @Description = 'Indicates whether metering is enabled'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@METERING,
				NULL,
				'<Enabled>True</Enabled>'
			)
		END
		
	--
	-- Ensure that Enabled fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Enabled fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that MeteringPoints fragment is created for METERING section
	--
	SET	@FragmentId = '{4A53E4F5-FAF5-4dd2-9609-8C861895190D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'MeteringPoints'
			SET @Description = 'Metering points'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@METERING,
				NULL,
				'
<MeteringPoints>
	<!-- ServiceRequestChannel metering points -->
	<MeteringPoint name="ServiceRequest.Received.PerChannel.Count">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="ServiceRequest.Received" />
			<MeteringType name="Counter" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.RequestChannels.Wcf.ServiceRequestChannel" />
				<CallerType name="ServiceBus.ServiceHost.RequestChannels.Remoting.ServiceRequestChannel" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="ServiceRequestChannelName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\ServiceRequestChannel\ServiceRequest.Received</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="ServiceRequest.RoundTrip.PerChannel.Duration">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="ServiceRequest.RoundTrip" />
			<MeteringType name="Duration" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.RequestChannels.Wcf.ServiceRequestChannel" />
				<CallerType name="ServiceBus.ServiceHost.RequestChannels.Remoting.ServiceRequestChannel" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="ServiceRequestChannelName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\ServiceRequestChannel\ServiceRequest.RoundTrip</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<!-- ServicePool metering points -->
	<MeteringPoint name="ServiceRequest.Received.Total.Count">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="ServiceRequest.Received" />
			<MeteringType name="Counter" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.ServicePool" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\ServicePool\ServiceRequest.Received</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="ServiceRequest.RoundTrip.Total.Duration">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="ServiceRequest.RoundTrip" />
			<MeteringType name="Duration" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.ServicePool" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\ServicePool\ServiceRequest.RoundTrip</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="ServiceRequest.InProcessing.Level">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="ServiceRequest.InProcessing" />
			<MeteringType name="Level" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.ServicePool" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\ServicePool\ServiceRequest.InProcessing</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="ServiceResponse.Published.Total.Count">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="ServiceResponse.Published" />
			<MeteringType name="Counter" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.ServicePool" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\ServicePool\ServiceResponse.Published</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<!-- ThreadPool metering points -->
	<MeteringPoint name="ServiceRequest.Scheduled.Count">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="ServiceRequest.Scheduled" />
			<MeteringType name="Counter" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.RequestSchedulers.ThreadPool" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\ThreadPool\ServiceRequest.Scheduled</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="WorkerThread.Active.Level">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="WorkerThread.Active" />
			<MeteringType name="Level" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.RequestSchedulers.ThreadPool" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\ThreadPool\WorkerThread.Active</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="WorkerThread.Total.Level">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="WorkerThread.Total" />
			<MeteringType name="Level" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.RequestSchedulers.ThreadPool" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\ThreadPool\WorkerThread.Total</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<!-- RequestQueue metering points -->
	<MeteringPoint name="RequestQueue.Busy.Level">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="RequestQueue.Busy" />
			<MeteringType name="Level" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.RequestSchedulers.RequestQueueState" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="RequestQueueName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\RequestQueue\RequestQueue.Busy</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="RequestQueue.Unused.Level">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="RequestQueue.Unused" />
			<MeteringType name="Level" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.RequestSchedulers.RequestQueueState" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="RequestQueueName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\RequestQueue\RequestQueue.Unused</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="RequestQueue.BorrowedFromFloating.Level">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="RequestQueue.BorrowedFromFloating" />
			<MeteringType name="Level" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.RequestSchedulers.RequestQueueState" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="RequestQueueName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\RequestQueue\RequestQueue.BorrowedFromFloating</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="RequestQueue.Extended.Level">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="RequestQueue.Extended" />
			<MeteringType name="Level" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.RequestSchedulers.RequestQueueState" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="RequestQueueName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\RequestQueue\RequestQueue.Extended</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<!-- Service metering points -->
	<MeteringPoint name="Service.Invocation.Count">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="Service.Invocation" />
			<MeteringType name="Counter" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.DSE.Service" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="ServiceName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\Service\Service.Invocation</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="Service.Execution.Succeeded.Count">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="Service.Execution.Succeeded" />
			<MeteringType name="Counter" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.DSE.Service" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="ServiceName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\Service\Service.Execution.Succeeded</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="Service.Execution.Failed.Count">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="Service.Execution.Failed" />
			<MeteringType name="Counter" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.DSE.Service" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="ServiceName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\Service\Service.Execution.Failed</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="Service.Execution.Duration">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="Service.Execution" />
			<MeteringType name="Duration" />
			<CallerTypes>
				<CallerType name="ServiceBus.ServiceHost.DSE.Service" />
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="ServiceName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\Service\Service.Execution</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<!-- Step metering points -->
	<MeteringPoint name="Step.Invocation.Count">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="Step.Invocation" />
			<MeteringType name="Counter" />
			<CallerTypes>
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="StepName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\Step\Step.Invocation</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="Step.Execution.Succeeded.Count">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="Step.Execution.Succeeded" />
			<MeteringType name="Counter" />
			<CallerTypes>
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="StepName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\Step\Step.Execution.Succeeded</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="Step.Execution.Failed.Count">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="Step.Execution.Failed" />
			<MeteringType name="Counter" />
			<CallerTypes>
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="StepName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\Step\Step.Execution.Failed</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
	<MeteringPoint name="Step.Execution.Duration">
		<IsEnabled>True</IsEnabled>
		<MeteringPointQueryFilters>
			<Code name="Step.Execution" />
			<MeteringType name="Duration" />
			<CallerTypes>
			</CallerTypes>
			<ContextAttributes>
				<ContextAttribute name="MachineName" />
				<ContextAttribute name="ServicePoolName" />
				<ContextAttribute name="ServicePoolInstanceId" />
				<ContextAttribute name="StepName" />
			</ContextAttributes>
		</MeteringPointQueryFilters>
		<PublishedName>ServiceBus.ServiceHost\Step\Step.Execution</PublishedName>
		<PublishInterval>00:15:00.000</PublishInterval>
		<Targets>
			<Target name="ServiceHost" />
		</Targets>
	</MeteringPoint>
</MeteringPoints>
				'
			)
		END
		
	--
	-- Ensure that MeteringPoints fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that MeteringPoints fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Targets fragment is created for METERING section
	--
	SET	@FragmentId = '{B6F78D94-C8E9-48d7-9B4D-4A1168378C01}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Targets'
			SET @Description = 'Metering targets'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@METERING,
				NULL,
				'
<Targets>
	<Target name="ServiceHost">
		<SaveInterval>00:30:00.000</SaveInterval>
		<TargetFactoryData name="ServiceHostFactory">
			<Service>ServiceBus.System.Metering.MeteringPoint.Save</Service>
		</TargetFactoryData>
	</Target>
	<Target name="Logging">
		<SaveInterval>00:30:00.000</SaveInterval>
		<TargetFactoryData name="LoggingFactory">
			<Severity>Information</Severity>
			<Message>Logging</Message>
			<Prefix>MeteringPoint</Prefix>
		</TargetFactoryData>
	</Target>
</Targets>
				'
			)
		END
		
	--
	-- Ensure that Targets fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Targets fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Factories fragment is created for METERING section
	--
	SET	@FragmentId = '{60287C21-71B5-4fe4-9196-7571E71A9A70}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Factories'
			SET @Description = 'Metering target factories'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@METERING,
				NULL,
				'
<Factories>
	<TargetFactories>
		<TargetFactory name="ServiceHostFactory">
			<Implementation>
				<Resource name="ServiceBus.Metering.Targets.ServiceHost.dll" />
				<Type>ServiceBus.Metering.Targets.ServiceHostTargetFactory</Type>
			</Implementation>
		</TargetFactory>
		<TargetFactory name="LoggingFactory">
			<Implementation>
				<Resource name="ServiceBus.Metering.Targets.Logging.dll" />
				<Type>ServiceBus.Metering.Targets.LoggingTargetFactory</Type>
			</Implementation>
		</TargetFactory>
	</TargetFactories>
</Factories>
				'
			)
		END
		
	--
	-- Ensure that Factories fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Factories fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that AsyncServiceInvocationTimeout fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{235230CB-5248-4591-82FE-5E2585828F31}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'AsyncServiceInvocationTimeout'
			SET @Description = 'Timeout that indicates how long to wait for a service response receipt via PubSub'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'<AsyncServiceInvocationTimeout>00:00:30</AsyncServiceInvocationTimeout>'
			)
		END
		
	--
	-- Ensure that AsyncServiceInvocationTimeout fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that AsyncServiceInvocationTimeout fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that PersistenceProviders fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{1F2C6DA7-3669-463e-A76A-2AA804D5847C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'PersistenceProviders'
			SET @Description = 'Persistence providers used to manage service requests, metering point values and log entries'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'
<PersistenceProviders>
	<PersistenceProvider name="RequestStore">
		<PersistenceProviderFactoryData name="PersistenceProviderFactory">
			<Database name="RequestStore" />
		</PersistenceProviderFactoryData>
	</PersistenceProvider>
	<PersistenceProvider name="MeteringPointStore">
		<PersistenceProviderFactoryData name="MeteringPointPersistenceProviderFactory">
			<Database name="MeteringPointStore" />
		</PersistenceProviderFactoryData>
	</PersistenceProvider>
	<PersistenceProvider name="Logging">
		<PersistenceProviderFactoryData name="LoggingPersistenceProviderFactory">
			<Database name="Logging" />
		</PersistenceProviderFactoryData>
	</PersistenceProvider>
</PersistenceProviders>
				'
			)
		END
		
	--
	-- Ensure that PersistenceProviders fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that PersistenceProviders fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that ServiceDefinitionManager fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{428D1F22-8BC4-42f3-9ED7-8D1AE2C97669}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceDefinitionManager'
			SET @Description = 'Includes list of filters that will hide services if all services should not be displayed'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'
<ServiceDefinitionManager>
	<ServicesFilter>
		<Filter name="System">ServiceBus.System</Filter>
		<Filter name="BseModules">ServiceBus.ServiceHost.BseModule</Filter>
	</ServicesFilter>
</ServiceDefinitionManager>
				'
			)
		END
		
	--
	-- Ensure that ServiceDefinitionManager fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that ServiceDefinitionManager fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that ServiceRequestChannelManager fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{680E642F-5D9C-4039-8F67-E06D3C1BA553}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceRequestChannelManager'
			SET @Description = 'Specifies minimum invocation retry count used by alternate channel logic'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'
<ServiceRequestChannelManager>
	<MinimumInvocationRetryCount>5</MinimumInvocationRetryCount>
</ServiceRequestChannelManager>
				'
			)
		END
		
	--
	-- Ensure that ServiceRequestChannelManager fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that ServiceRequestChannelManager fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that ContextManager fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{D7945F95-D22B-40c4-B6A7-13DD5F8DA636}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ContextManager'
			SET @Description = 'Configured business, security, logging and metering contexts'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'
<ContextManager>
	<ContextGroups>
		<BusinessContexts>
			<Context name="BusinessContext">
				<ContextFactoryData name="BusinessContextFactory">
					<DefaultBusinessContext name="ServiceHost" />
				</ContextFactoryData>
			</Context>
		</BusinessContexts>
		<LoggingContexts>
			<Context name="LoggingContext">
				<ContextFactoryData name="LoggingContextFactory" />
			</Context>
		</LoggingContexts>
		<SecurityContexts>
			<Context name="SecurityContext">
				<ContextFactoryData name="SecurityContextFactory">
					<Disabled>True</Disabled>
				</ContextFactoryData>
			</Context>
			<Context name="SecurityContext2">
				<ContextFactoryData name="SecurityContextFactory">
					<Disabled>True</Disabled>
				</ContextFactoryData>
			</Context>
		</SecurityContexts>
		<MeteringContexts>
			<Context name="MeteringContext">
				<ContextFactoryData name="MeteringContextFactory" />
			</Context>
		</MeteringContexts>
	</ContextGroups>
</ContextManager>
				'
			)
		END
		
	--
	-- Ensure that ContextManager fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that ContextManager fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Factories fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{21344742-5675-4e34-B97A-89F0183A8816}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Factories'
			SET @Description =
				'Configured service, service synchronization, request channel, request queue, request classifier, request scheduler, ' +
				'persistence provider, context and watchdog factories'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'
<Factories>
	<ServiceFactories>
		<ServiceFactory name="DSE">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.DSE.Common.dll" />
				<Type>ServiceBus.ServiceHost.DSE.ServiceFactory</Type>
			</Implementation>
		</ServiceFactory>
		<ServiceFactory name="BSE">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.BSE.Common.dll" />
				<Type>ServiceBus.ServiceHost.BSE.ServiceFactory</Type>
			</Implementation>
		</ServiceFactory>
	</ServiceFactories>
	<ServiceSynchronizationFactories>
		<ServiceSynchronizationFactory name="SingleThreadedService">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll" />
				<Type>ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedServiceFactory</Type>
			</Implementation>
		</ServiceSynchronizationFactory>
	</ServiceSynchronizationFactories>
	<RequestChannelFactories>
		<RequestChannelFactory name="WCF">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.RequestChannels.Wcf.dll" />
				<Type>ServiceBus.ServiceHost.RequestChannels.Wcf.ServiceRequestChannelFactory</Type>
			</Implementation>
		</RequestChannelFactory>
		<RequestChannelFactory name="Remoting">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.RequestChannels.Remoting.dll" />
				<Type>ServiceBus.ServiceHost.RequestChannels.Remoting.ServiceRequestChannelFactory</Type>
			</Implementation>
		</RequestChannelFactory>
	</RequestChannelFactories>
	<RequestQueueFactories>
		<RequestQueueFactory name="Msmq">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll" />
				<Type>ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueueFactory</Type>
			</Implementation>
		</RequestQueueFactory>
		<RequestQueueFactory name="PassThrough">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll" />
				<Type>ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueueFactory</Type>
			</Implementation>
		</RequestQueueFactory>
	</RequestQueueFactories>
	<RequestClassifierFactories>
		<RequestClassifierFactory name="RandomClassifier">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.RequestClassifiers.Random.dll" />
				<Type>ServiceBus.ServiceHost.RequestClassifiers.RandomRequestClassifierFactory</Type>
			</Implementation>
		</RequestClassifierFactory>
		<RequestClassifierFactory name="CSharpClassifier">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll" />
				<Type>ServiceBus.ServiceHost.RequestClassifiers.CSharpRequestClassifierFactory</Type>
			</Implementation>
		</RequestClassifierFactory>
		<RequestClassifierFactory name="SingleQueueClassifier">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll" />
				<Type>ServiceBus.ServiceHost.RequestClassifiers.SingleQueueRequestClassifierFactory</Type>
			</Implementation>
		</RequestClassifierFactory>
	</RequestClassifierFactories>
	<RequestSchedulerFactories>
		<RequestSchedulerFactory name="ThreadPool">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll" />
				<Type>ServiceBus.ServiceHost.RequestSchedulers.ThreadPoolRequestSchedulerFactory</Type>
			</Implementation>
		</RequestSchedulerFactory>
	</RequestSchedulerFactories>
	<PersistenceProviderFactories>
		<PersistenceProviderFactory name="PersistenceProviderFactory">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.PersistenceProviders.Request.dll" />
				<Type>ServiceBus.ServiceHost.PersistenceProviders.Request.PersistenceProviderFactory</Type>
			</Implementation>
		</PersistenceProviderFactory>
		<PersistenceProviderFactory name="MeteringPointPersistenceProviderFactory">
			<Implementation>
				<Resource name="ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll" />
				<Type>ServiceBus.Metering.PersistenceProviders.MeteringPointValue.PersistenceProviderFactory</Type>
			</Implementation>
		</PersistenceProviderFactory>
		<PersistenceProviderFactory name="LoggingPersistenceProviderFactory">
			<Implementation>
				<Resource name="ServiceBus.Logging.PersistenceProviders.LogEntry.dll" />
				<Type>ServiceBus.Logging.PersistenceProviders.LogEntry.PersistenceProviderFactory</Type>
			</Implementation>
		</PersistenceProviderFactory>
	</PersistenceProviderFactories>
	<ContextFactories>
		<ContextFactory name="BusinessContextFactory">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.Contexts.BusinessContext.dll" />
				<Type>ServiceBus.ServiceHost.Contexts.BusinessContextFactory</Type>
			</Implementation>
		</ContextFactory>
		<ContextFactory name="LoggingContextFactory">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.Contexts.LoggingContext.dll" />
				<Type>ServiceBus.ServiceHost.Contexts.LoggingContextFactory</Type>
			</Implementation>
		</ContextFactory>
		<ContextFactory name="SecurityContextFactory">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll" />
				<Type>ServiceBus.ServiceHost.Contexts.DomainSecurityContextFactory</Type>
			</Implementation>
		</ContextFactory>
		<ContextFactory name="MeteringContextFactory">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.Contexts.MeteringContext.dll" />
				<Type>ServiceBus.ServiceHost.Contexts.MeteringContextFactory</Type>
			</Implementation>
		</ContextFactory>
	</ContextFactories>
	<WatchdogFactories>
		<WatchdogFactory name="WDF">
			<Implementation>
				<Resource name="ServiceBus.ServiceHost.Watchdogs.Watchdog.dll" />
				<Type>ServiceBus.ServiceHost.Watchdogs.WatchdogFactory</Type>
			</Implementation>
		</WatchdogFactory>
	</WatchdogFactories>
</Factories>
				'
			)
		END
		
	--
	-- Ensure that Factories fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Factories fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)	

	--
	-- Ensure that Databases fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{33FEC1DD-4119-4c95-A8F1-B684ABE6822B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Databases'
			SET @Description = 'Connection strings for ServiceHost, Metering, Logging, Configuration and AdventureWorks databases'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'
<Databases>
	<Database name="AdventureWorks">
		<ConnectionString>Data Source=ekarabeg-d1.lsi-fnf.net;Initial Catalog=AdventureWorks;user=api;password=api1234!</ConnectionString>
	</Database>
	<Database name="RequestStore">
		<ConnectionString>Data Source=[DSCS:MACRO:SQL.SERVER]; Initial Catalog=[DSCS:MACRO:SQL.REQUEST.STORE.DATABASE]; Integrated Security=[DSCS:MACRO:SQL.INTEGRATED.SECURITY]; User=[DSCS:MACRO:SQL.USER]; Password=[DSCS:MACRO:SQL.PASSWORD]</ConnectionString>
	</Database>
	<Database name="MeteringPointStore">
		<ConnectionString>Data Source=[DSCS:MACRO:SQL.SERVER]; Initial Catalog=[DSCS:MACRO:SQL.METERING.STORE.DATABASE]; Integrated Security=[DSCS:MACRO:SQL.INTEGRATED.SECURITY]; User=[DSCS:MACRO:SQL.USER]; Password=[DSCS:MACRO:SQL.PASSWORD]</ConnectionString>
	</Database>
	<Database name="Logging">
		<ConnectionString>Data Source=[DSCS:MACRO:SQL.SERVER]; Initial Catalog=[DSCS:MACRO:SQL.LOGGING.STORE.DATABASE]; Integrated Security=[DSCS:MACRO:SQL.INTEGRATED.SECURITY]; User=[DSCS:MACRO:SQL.USER]; Password=[DSCS:MACRO:SQL.PASSWORD]</ConnectionString>
	</Database>
	<!-- Configuration database is added only temporarily to trigger section changed event -->
	<Database name="Configuration">
		<ConnectionString>Data Source=[DSCS:MACRO:SQL.SERVER]; Initial Catalog=[DSCS:MACRO:SQL.CONFIGURATION.STORE.DATABASE]; Integrated Security=[DSCS:MACRO:SQL.INTEGRATED.SECURITY]; User=[DSCS:MACRO:SQL.USER]; Password=[DSCS:MACRO:SQL.PASSWORD]</ConnectionString>
	</Database>
</Databases>
				'
			)
		END
		
	--
	-- Ensure that Databases fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Databases fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Shares fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{53B43449-923D-4c5a-AD19-46AFC8DDC7CF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Shares'
			SET @Description = 'List of accessible share locations'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'
<Shares>
	<Share name="ResourceCatalog.Repository">
		<SharePath>\\[DSCS:MACRO:RESOURCECATALOG.SHARE.SERVER]\[DSCS:MACRO:RESOURCECATALOG.SHARE.NAME]</SharePath>
	</Share>
</Shares>
				'
			)
		END
		
	--
	-- Ensure that Shares fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Shares fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Caching fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{15F84726-8F40-43d9-96A8-CB62A0A74BA4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Caching'
			SET @Description =
				'Caching configuration for definitions, contexts, services, DSE steps, service results, factories, assemblies and persistence providers. ' +
				'Default caching configuration is included, too.'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'
<Caching>
	<Cache name="Services">
		<!-- Check if cache is enabled -->
		<Enabled>True</Enabled>
		<!-- Check if cache will return copy of object-->
		<IsCloneable>False</IsCloneable>
		<!-- Check if is serializable to count memory-->
		<IsSerializable>False</IsSerializable>
		<!-- EXP - Expiration by time created, AcessEXP - Expiration by last time accessed -->
		<!--<ExpirationType>
						<Method name="EXP">
							<TimeOut>00:03:00</TimeOut>
						</Method>
						<Method name="AccessEXP">
							<TimeOut>00:00:10</TimeOut>
						</Method>
					</ExpirationType>-->
		<!-- Cleaning types, LRU - Least recently used, MRU - Most recently used,  LastAdded - Last added
						 FirstAdded - First added, OldestAccess - Oldest accessed  -->
		<CleaningType>
			<Method name="LRU">
				<MaximumMemory>2000000</MaximumMemory>
				<MaximumCount>500</MaximumCount>
			</Method>
		</CleaningType>
	</Cache>
	<Cache name="TargetFactories">
		<Enabled>True</Enabled>
		<IsCloneable>False</IsCloneable>
		<IsSerializable>False</IsSerializable>
		<CleaningType>
			<Method name="LRU">
				<MaximumMemory>2000000</MaximumMemory>
				<MaximumCount>500</MaximumCount>
			</Method>
		</CleaningType>
	</Cache>
	<Cache name="Default">
		<Enabled>True</Enabled>
		<IsCloneable>False</IsCloneable>
		<IsSerializable>False</IsSerializable>
		<CleaningType>
			<Method name="LRU">
				<MaximumMemory>2000000</MaximumMemory>
				<MaximumCount>500</MaximumCount>
			</Method>
		</CleaningType>
	</Cache>
	<Cache name="DSE.Steps">
		<Enabled>True</Enabled>
		<IsCloneable>False</IsCloneable>
		<IsSerializable>False</IsSerializable>
		<CleaningType>
			<Method name="LRU">
				<MaximumMemory>2000000</MaximumMemory>
				<MaximumCount>500</MaximumCount>
			</Method>
		</CleaningType>
	</Cache>
	<Cache name="ServiceResults">
		<Enabled>True</Enabled>
		<IsCloneable>False</IsCloneable>
		<IsSerializable>False</IsSerializable>
		<CleaningType>
			<Method name="LRU">
				<MaximumMemory>2000000</MaximumMemory>
				<MaximumCount>500</MaximumCount>
			</Method>
		</CleaningType>
	</Cache>
	<Cache name="Definitions">
		<Enabled>True</Enabled>
		<IsCloneable>False</IsCloneable>
		<IsSerializable>False</IsSerializable>
		<CleaningType>
			<Method name="LRU">
				<MaximumMemory>2000000</MaximumMemory>
				<MaximumCount>500</MaximumCount>
			</Method>
		</CleaningType>
	</Cache>
	<Cache name="Contexts">
		<Enabled>True</Enabled>
		<IsCloneable>False</IsCloneable>
		<IsSerializable>False</IsSerializable>
		<CleaningType>
			<Method name="LRU">
				<MaximumMemory>2000000</MaximumMemory>
				<MaximumCount>500</MaximumCount>
			</Method>
		</CleaningType>
	</Cache>
	<Cache name="PersistenceProviders">
		<Enabled>True</Enabled>
		<IsCloneable>False</IsCloneable>
		<IsSerializable>False</IsSerializable>
		<CleaningType>
			<Method name="LRU">
				<MaximumMemory>2000000</MaximumMemory>
				<MaximumCount>500</MaximumCount>
			</Method>
		</CleaningType>
	</Cache>
	<Cache name="Factories">
		<Enabled>True</Enabled>
		<IsCloneable>False</IsCloneable>
		<IsSerializable>False</IsSerializable>
		<CleaningType>
			<Method name="LRU">
				<MaximumMemory>2000000</MaximumMemory>
				<MaximumCount>500</MaximumCount>
			</Method>
		</CleaningType>
	</Cache>
	<Cache name="Assemblies">
		<Enabled>True</Enabled>
		<IsCloneable>False</IsCloneable>
		<IsSerializable>False</IsSerializable>
		<CleaningType>
			<Method name="LRU">
				<MaximumMemory>2000000</MaximumMemory>
				<MaximumCount>500</MaximumCount>
			</Method>
		</CleaningType>
	</Cache>
</Caching>
				'
			)
		END
		
	--
	-- Ensure that Caching fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Caching fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Logging fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{E2D12736-565C-4a3e-8FB6-7ED948D9F9E2}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Logging'
			SET @Description = 'Configures whether ServiceBus Logging and Microsoft Enterprise Library Logging should be used'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'
<Logging>
	<UseDSLogging>True</UseDSLogging>
	<UseMSLogging>False</UseMSLogging>
</Logging>
				'
			)
		END
		
	--
	-- Ensure that Logging fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Logging fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Contracts fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{8DBF8AF6-DEA0-444e-9199-181C9AA9845F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Contracts'
			SET @Description = 'Contracts configured for ServiceBus.Utility.Assembly.Loader'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'
<Contracts>
	<Implementation name="ServiceBus.ServiceHost.IServiceHostExceptionManagement">
		<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
		<Type>ServiceBus.ServiceHost.RequestManagement.ServiceHostExceptionManagement</Type>
		<Lifetime>Singleton</Lifetime>
	</Implementation>
	<Implementation name="ServiceBus.ServiceHost.IResourceManagement">
		<Resource name="ServiceBus.ServiceHost.ResourceManagement.dll" />
		<Type>ServiceBus.ServiceHost.ResourceManagement.ResourceManagement</Type>
		<Lifetime>Singleton</Lifetime>
	</Implementation>
	<Implementation name="ServiceBus.Metering.IMeteringPointManagement">
		<Resource name="ServiceBus.Metering.MeteringPointManagement.dll" />
		<Type>ServiceBus.Metering.MeteringPointManagement.MeteringPointManagement</Type>
		<Lifetime>Singleton</Lifetime>
	</Implementation>
	<Implementation name="ServiceBus.Logging.ILoggingManagement">
		<Resource name="ServiceBus.Logging.LoggingManagement.dll" />
		<Type>ServiceBus.Logging.LoggingManagement</Type>
		<Lifetime>Singleton</Lifetime>
	</Implementation>
	<!-- Following contract is added only temporarily to enable access to configuration XML from observers -->
	<Implementation name="TEMP:ServiceBus.Administration.Configuration.IShellControl">
		<Resource name="ServiceBus.Administration.Configuration.Common.dll" />
		<Type>ServiceBus.Administration.Configuration.ShellControl</Type>
		<Lifetime>Singleton</Lifetime>
	</Implementation>
</Contracts>
				'
			)
		END
		
	--
	-- Ensure that Contracts fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Contracts fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that ServicePool.System fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{c0a29a9a-54cf-4997-b497-5f229df8014e}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServicePool.System'
			SET @Description = 'System service pool'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ServicePools',
				'
<ServicePool name="System">
	<Local>[DSCS:MACRO:SP.SYSTEM.LOCAL]</Local>
	<ProcessLoader>
		<UseProcessLoader>False</UseProcessLoader>
		<DisplayDebugMessages>True</DisplayDebugMessages>
		<Implementation>
			<Resource name="ServiceBus.ServiceHost.ServicePoolLoader.exe" />
		</Implementation>
	</ProcessLoader>
	<RequestChannels>
		<RequestChannel name="WcfServiceRequestChannel1">
			<RetryPeriod>00:00:10</RetryPeriod>
			<RequestChannelFactoryData name="WCF">
				<Address>net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SP.SYSTEM.WCF1.PORT]/MyService</Address>
				<SmartStopTimeout>00:00:30</SmartStopTimeout>
				<BindingXml>
					<bindings>
						<customBinding>
							<binding name="CustomTcpBinding" openTimeout="00:00:01" sendTimeout="00:01:00">
								<reliableSession maxRetryCount="8" acknowledgementInterval="00:00:00.2000000" flowControlEnabled="true" inactivityTimeout="00:10:00" maxPendingChannels="3000" maxTransferWindowSize="4096" ordered="true" />
								<binaryMessageEncoding maxReadPoolSize="64" maxWritePoolSize="32" maxSessionSize="4096">
									<readerQuotas maxDepth="64" maxStringContentLength="131072" maxArrayLength="104857600" maxBytesPerRead="16384" maxNameTableCharCount="32768" />
								</binaryMessageEncoding>
								<tcpTransport manualAddressing="false" maxBufferPoolSize="524288" maxReceivedMessageSize="10485760" connectionBufferSize="65536" hostNameComparisonMode="StrongWildcard" channelInitializationTimeout="00:00:05" maxBufferSize="10485760" maxPendingConnections="3000" maxOutputDelay="00:00:00.2000000" maxPendingAccepts="3000" transferMode="Buffered" listenBacklog="3000" portSharingEnabled="false" teredoEnabled="false">
									<connectionPoolSettings groupName="default" leaseTimeout="00:05:00" idleTimeout="00:02:00" maxOutboundConnectionsPerEndpoint="5000" />
								</tcpTransport>
							</binding>
						</customBinding>
					</bindings>
				</BindingXml>
			</RequestChannelFactoryData>
		</RequestChannel>
		<RequestChannel name="WcfServiceRequestChannel2">
			<RetryPeriod>00:00:20</RetryPeriod>
			<RequestChannelFactoryData name="WCF">
				<Address>net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SP.SYSTEM.WCF2.PORT]/MyService</Address>
				<SmartStopTimeout>00:00:30</SmartStopTimeout>
				<BindingXml>
					<bindings>
						<customBinding>
							<binding name="CustomTcpBinding" openTimeout="00:00:01" sendTimeout="00:01:00">
								<reliableSession maxRetryCount="8" acknowledgementInterval="00:00:00.2000000" flowControlEnabled="true" inactivityTimeout="00:10:00" maxPendingChannels="3000" maxTransferWindowSize="4096" ordered="true" />
								<binaryMessageEncoding maxReadPoolSize="64" maxWritePoolSize="32" maxSessionSize="4096">
									<readerQuotas maxDepth="64" maxStringContentLength="131072" maxArrayLength="104857600" maxBytesPerRead="16384" maxNameTableCharCount="32768" />
								</binaryMessageEncoding>
								<tcpTransport manualAddressing="false" maxBufferPoolSize="524288" maxReceivedMessageSize="10485760" connectionBufferSize="65536" hostNameComparisonMode="StrongWildcard" channelInitializationTimeout="00:00:05" maxBufferSize="10485760" maxPendingConnections="3000" maxOutputDelay="00:00:00.2000000" maxPendingAccepts="3000" transferMode="Buffered" listenBacklog="3000" portSharingEnabled="false" teredoEnabled="false">
									<connectionPoolSettings groupName="default" leaseTimeout="00:05:00" idleTimeout="00:02:00" maxOutboundConnectionsPerEndpoint="5000" />
								</tcpTransport>
							</binding>
						</customBinding>
					</bindings>
				</BindingXml>
			</RequestChannelFactoryData>
		</RequestChannel>
	</RequestChannels>
	<Watchdog>
		<WatchdogFactoryData name="WDF">
			<IsEnabled>True</IsEnabled>
			<!-- Watchdog scan period -->
			<ScanFrequency>00:00:02</ScanFrequency>
			<!-- Maximum time a thread is allowed to run -->
			<MaximumServiceExecutionTime>00:15:05.0</MaximumServiceExecutionTime>
		</WatchdogFactoryData>
	</Watchdog>
	<ServiceRequestManager>
		<RequestQueues>
			<RequestQueue name="Sync">
				<RequestQueueFactoryData name="PassThrough" />
			</RequestQueue>
		</RequestQueues>
		<RequestClassifier>
			<RequestClassifierFactoryData name="SingleQueueClassifier">
				<RequestQueues>
					<RequestQueue name="Sync" />
				</RequestQueues>
			</RequestClassifierFactoryData>
		</RequestClassifier>
		<RequestScheduler>
			<!-- not implementation specific elements -->
			<RequestSchedulerFactoryData name="ThreadPool">
				<FloatingThreads>5</FloatingThreads>
				<RequestQueues>
					<RequestQueue name="Sync">
						<ThreadCleanupMode>Synchronous</ThreadCleanupMode>
						<ReservedThreads>10</ReservedThreads>
						<MaxThreads>15</MaxThreads>
					</RequestQueue>
				</RequestQueues>
			</RequestSchedulerFactoryData>
		</RequestScheduler>
	</ServiceRequestManager>
	<ServiceSynchronizationManager>
		<ServiceSynchronization name="SingleThreadedService">
			<ServiceSynchronizationFactoryData name="SingleThreadedService" />
		</ServiceSynchronization>
	</ServiceSynchronizationManager>
	<!-- Temporary node that holds list of service pool base resources - these resources need to be copied to SP folder as well -->
	<Implementation>
		<!--<Resource name="ServiceBus.Logging.Core.dll"/>-->
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Resource name="ServiceBus.Logging.Common.dll" />
		<Resource name="ServiceBus.PubSub.Common.dll" />
		<Resource name="ServiceBus.Metering.Common.dll" />
		<Resource name="ServiceBus.ServiceHost.PersistenceProviders.Request.dll" />
		<Resource name="ServiceBus.ServiceHost.Contexts.BusinessContext.dll" />
		<Resource name="ServiceBus.ServiceHost.Contexts.LoggingContext.dll" />
		<Resource name="ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll" />
		<Resource name="ServiceBus.ServiceHost.Contexts.MeteringContext.dll" />
		<Resource name="ServiceBus.Metering.Targets.ServiceHost.dll" />
	</Implementation>
</ServicePool>
				'
			)
		END
		
	--
	-- Ensure that ServicePool.System fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that ServicePool.System fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that BusinessContext.ServicePool.System fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{c289229a-61f6-4235-bb1e-0dfff5461325}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'BusinessContext.ServicePool.System'
			SET @Description = 'Business context for System service pool'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'BusinessContexts/BusinessContext name="ServiceHost"/ServicePools',
				'<ServicePool name="System" />'
			)
		END
		
	--
	-- Ensure that BusinessContext.ServicePool.System fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that BusinessContext.ServicePool.System fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Service.ServiceBus.System.DSE.ServiceInvokeStep fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{9839E30B-E225-46D1-BF3A-D89F3FEA8B33}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.DSE.ServiceInvokeStep'
			SET @Description = 'ServiceBus.System.DSE.ServiceInvokeStep service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Common"',
				'
<Service name="ServiceBus.System.DSE.ServiceInvokeStep">
	<ServicePublicContract>
		<Description>Invokes custom service using service name, Inputs and results definition</Description>
		<Inputs>
			<Input name="ServiceName">
				<Description>Name of the service that is being invoked</Description>
				<MapTo>SN</MapTo>
				<Required>True</Required>
				<DefaultValue></DefaultValue>
			</Input>
			<Input name="ServiceInputs">
				<Description>XML that defines Inputs of the service that is being invoked</Description>
				<MapTo>SA</MapTo>
				<DefaultValue>
					<Inputs>
						<Input name="Number">
							<DefaultValue>150</DefaultValue>
						</Input>
						<Input name="Divider">
							<DefaultValue>100</DefaultValue>
						</Input>
					</Inputs>
				</DefaultValue>
			</Input>
			<Input name="ServiceResults">
				<Description>XML that defines results of the service that is being invoked</Description>
				<MapTo>SR</MapTo>
				<DefaultValue>
					<Results>
						<Result name="Result">
							<MapTo>X</MapTo>
						</Result>
					</Results>
				</DefaultValue>
			</Input>
			<!-- Not implemented yet... -->
			<Input name="WaitForServiceResults">
				<Description>Specifies is the service going to be invoked synchronously or asynchronously (Not implemented yet...)</Description>
				<Required>True</Required>
				<MapTo>WSR</MapTo>
				<DefaultValue>True</DefaultValue>
			</Input>
		</Inputs>
		<Results>
			<Result name="X">
				<MapTo>X</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="Invoke">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.DSE.Common.dll" />
					<Type>ServiceBus.ServiceHost.DSE.ServiceInvokeStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="ServiceName">
						<MapTo>SN</MapTo>
					</Argument>
					<Argument name="ServiceInputs">
						<MapTo>SA</MapTo>
					</Argument>
					<Argument name="ServiceResults">
						<MapTo>SR</MapTo>
					</Argument>
					<!-- Not implemented yet... -->
					<Argument name="WaitForServiceResults">
						<MapTo>WSR</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
	<ServicePermissions>
		<AllowAll>True</AllowAll>
		<DenyAll>False</DenyAll>
	</ServicePermissions>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.DSE.ServiceInvokeStep fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.DSE.ServiceInvokeStep fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithFailed fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{C356987B-2C31-42C6-8701-DB07F6BA3F0C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithFailed'
			SET @Description = 'ServiceBus.System.ServiceRequestExplorer.CompleteWithFailed service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ServiceRequestExplorer.CompleteWithFailed">
	<ServicePublicContract>
		<Description>Tries to complete selected service request with Failed status</Description>
		<Inputs>
			<Input name="RequestId">
				<Description>Id of request to be used for service invocation</Description>
				<MapTo>RequestId</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<MaximumProcessingTime>0.00:01:00.000</MaximumProcessingTime>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="SSE" />
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithFailed fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithFailed fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithSucceeded fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{2303B3F8-AE58-4C84-874D-292557E9D5A5}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithSucceeded'
			SET @Description = 'ServiceBus.System.ServiceRequestExplorer.CompleteWithSucceeded service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ServiceRequestExplorer.CompleteWithSucceeded">
	<ServicePublicContract>
		<Description>Tries to complete selected service request with Succeeded status</Description>
		<Inputs>
			<Input name="RequestId">
				<Description>Id of request to be completed with Succeeded status</Description>
				<MapTo>RequestId</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<MaximumProcessingTime>0.00:01:00.000</MaximumProcessingTime>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="SSE" />
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithSucceeded fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithSucceeded fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithAbort fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{E85BD088-E4F3-47E8-8C6D-8D3715E7EF4D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithAbort'
			SET @Description = 'ServiceBus.System.ServiceRequestExplorer.CompleteWithAbort service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ServiceRequestExplorer.CompleteWithAbort">
	<ServicePublicContract>
		<Description>Completes selected service request with Aborted status</Description>
		<Inputs>
			<Input name="RequestId">
				<Description>Id of request to be completed with Aborted status</Description>
				<MapTo>RequestId</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<MaximumProcessingTime>0.00:01:00.000</MaximumProcessingTime>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="SSE" />
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithAbort fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithAbort fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.AttemptToPublish fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{ACA73A53-3D4E-48A6-BBA7-6640BA021D56}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceRequestExplorer.AttemptToPublish'
			SET @Description = 'ServiceBus.System.ServiceRequestExplorer.AttemptToPublish service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ServiceRequestExplorer.AttemptToPublish">
	<ServicePublicContract>
		<Description>Tries to publishes ServiceResponse of selected ServiceRequest</Description>
		<Inputs>
			<Input name="RequestId">
				<Description>Id of request that should contain saved ServiceResponse</Description>
				<MapTo>RequestId</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<MaximumProcessingTime>0.00:01:00.000</MaximumProcessingTime>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="SSE" />
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.AttemptToPublish fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.AttemptToPublish fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.Abort fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{1078D593-4E69-43D9-B7BC-2D246105A7EB}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceRequestExplorer.Abort'
			SET @Description = 'ServiceBus.System.ServiceRequestExplorer.Abort service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ServiceRequestExplorer.Abort">
	<ServicePublicContract>
		<Description>Aborts pending or active service request</Description>
		<Inputs>
			<Input name="RequestId">
				<Description>Id of pending or active request that should be aborted</Description>
				<MapTo>RequestId</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<MaximumProcessingTime>0.00:01:00.000</MaximumProcessingTime>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="SSE" />
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.Abort fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceRequestExplorer.Abort fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationList fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{8632800E-DB6C-4827-A3D8-5FDE9BFC8439}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationList'
			SET @Description = 'ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationList service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationList">
	<ServicePublicContract>
		<Description>Retrieves list of objects used to show failed requests in exception management console</Description>
		<Inputs>
			<Input name="Category">
				<Description>Failed requests filter</Description>
				<MapTo>Category</MapTo>
			</Input>
			<Input name="Title">
				<Description>Failed requests filter</Description>
				<MapTo>Title</MapTo>
			</Input>
			<Input name="Desc">
				<Description>Failed requests filter</Description>
				<MapTo>Desc</MapTo>
			</Input>
			<Input name="From">
				<Description>Failed requests filter</Description>
				<MapTo>From</MapTo>
			</Input>
			<Input name="To">
				<Description>Failed requests filter</Description>
				<MapTo>To</MapTo>
			</Input>
			<Input name="BoundaryId">
				<Description>Boundary failed request persistence id</Description>
				<MapTo>BoundaryId</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="Page">
				<Description>Page that should be retrieved</Description>
				<MapTo>Page</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="PageSize">
				<Description>Size of retrieved page</Description>
				<MapTo>PageSize</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="IncludePendingRequests">
				<Description>Indicates whether pending request should be included in summary</Description>
				<MapTo>IncludePendingRequests</MapTo>
			</Input>
			<Input name="IncludeActiveRequests">
				<Description>Indicates whether active request should be included in summary</Description>
				<MapTo>IncludeActiveRequests</MapTo>
			</Input>
			<Input name="IncludeCompletedRequests">
				<Description>Indicates whether completed request should be included in summary</Description>
				<MapTo>IncludeCompletedRequests</MapTo>
			</Input>
			<Input name="IncludeSuspendedRequests">
				<Description>Indicates whether suspended request should be included in summary</Description>
				<MapTo>IncludeSuspendedRequests</MapTo>
			</Input>
		</Inputs>
		<Results>
			<Result name="TotalCount">
				<Description>List of objects used to show failed requests in exception management console</Description>
				<MapTo>TotalCount</MapTo>
			</Result>
			<Result name="CategorizationList">
				<Description>List of objects used to show failed requests in exception management console</Description>
				<MapTo>Result</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<PersistPending>False</PersistPending>
		<PersistActive>False</PersistActive>
		<!-- Maximum processing time allowed for this service execution -->
		<MaximumProcessingTime>00:00:15</MaximumProcessingTime>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="GetFailedRequestsCategorizationList">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="Category">
						<Description>Failed requests filter</Description>
						<MapTo>Category</MapTo>
					</Argument>
					<Argument name="Title">
						<Description>Failed requests filter</Description>
						<MapTo>Title</MapTo>
					</Argument>
					<Argument name="Desc">
						<Description>Failed requests filter</Description>
						<MapTo>Desc</MapTo>
					</Argument>
					<Argument name="From">
						<Description>Failed requests filter</Description>
						<MapTo>From</MapTo>
					</Argument>
					<Argument name="To">
						<Description>Failed requests filter</Description>
						<MapTo>To</MapTo>
					</Argument>
					<Argument name="BoundaryId">
						<Description>Boundary failed request persistence id</Description>
						<MapTo>BoundaryId</MapTo>
					</Argument>
					<Argument name="Page">
						<Description>Page that should be retrieved</Description>
						<MapTo>Page</MapTo>
					</Argument>
					<Argument name="PageSize">
						<Description>Size of retrieved page</Description>
						<MapTo>PageSize</MapTo>
					</Argument>
					<Argument name="IncludePendingRequests">
						<Description>Indicates whether pending request should be included in summary</Description>
						<MapTo>IncludePendingRequests</MapTo>
					</Argument>
					<Argument name="IncludeActiveRequests">
						<Description>Indicates whether active request should be included in summary</Description>
						<MapTo>IncludeActiveRequests</MapTo>
					</Argument>
					<Argument name="IncludeCompletedRequests">
						<Description>Indicates whether completed request should be included in summary</Description>
						<MapTo>IncludeCompletedRequests</MapTo>
					</Argument>
					<Argument name="IncludeSuspendedRequests">
						<Description>Indicates whether suspended request should be included in summary</Description>
						<MapTo>IncludeSuspendedRequests</MapTo>
					</Argument>
					<Argument name="TotalCount">
						<Description>List of objects used to show failed requests in exception management console</Description>
						<MapTo>TotalCount</MapTo>
					</Argument>
					<Argument name="CategorizationList">
						<Description>List of objects used to show failed requests in exception management console</Description>
						<MapTo>Result</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationList fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationList fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationSummary fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{5AD958FB-78DE-46E7-BAB8-4B2EF9622D45}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationSummary'
			SET @Description = 'ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationSummary service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationSummary">
	<ServicePublicContract>
		<Description>Retrieves list of objects used to show failed requests in exception management console</Description>
		<Inputs>
			<Input name="Recent">
				<Description>Date that marks requests as recent</Description>
				<MapTo>Recent</MapTo>
			</Input>
			<Input name="From">
				<Description>From Date</Description>
				<MapTo>From</MapTo>
			</Input>
			<Input name="To">
				<Description>To Date</Description>
				<MapTo>To</MapTo>
			</Input>
			<Input name="IncludePendingRequests">
				<Description>Indicates whether pending request should be included in summary</Description>
				<MapTo>IncludePendingRequests</MapTo>
			</Input>
			<Input name="IncludeActiveRequests">
				<Description>Indicates whether active request should be included in summary</Description>
				<MapTo>IncludeActiveRequests</MapTo>
			</Input>
			<Input name="IncludeCompletedRequests">
				<Description>Indicates whether completed request should be included in summary</Description>
				<MapTo>IncludeCompletedRequests</MapTo>
			</Input>
			<Input name="IncludeSuspendedRequests">
				<Description>Indicates whether suspended request should be included in summary</Description>
				<MapTo>IncludeSuspendedRequests</MapTo>
			</Input>
		</Inputs>
		<Results>
			<Result name="CategorizationSummary">
				<Description>List of objects used to show failed requests in exception management console</Description>
				<MapTo>Result</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<PersistPending>False</PersistPending>
		<PersistActive>False</PersistActive>
		<!-- Maximum processing time allowed for this service execution -->
		<MaximumProcessingTime>00:00:15</MaximumProcessingTime>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="GetFailedRequestsCategorizationSummaryStep">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="Recent">
						<Description>Date that marks requests as recent</Description>
						<MapTo>Recent</MapTo>
					</Argument>
					<Argument name="From">
						<Description>From Date</Description>
						<MapTo>From</MapTo>
					</Argument>
					<Argument name="To">
						<Description>To Date</Description>
						<MapTo>To</MapTo>
					</Argument>
					<Argument name="IncludePendingRequests">
						<Description>Indicates whether pending request should be included in summary</Description>
						<MapTo>IncludePendingRequests</MapTo>
					</Argument>
					<Argument name="IncludeActiveRequests">
						<Description>Indicates whether active request should be included in summary</Description>
						<MapTo>IncludeActiveRequests</MapTo>
					</Argument>
					<Argument name="IncludeCompletedRequests">
						<Description>Indicates whether completed request should be included in summary</Description>
						<MapTo>IncludeCompletedRequests</MapTo>
					</Argument>
					<Argument name="IncludeSuspendedRequests">
						<Description>Indicates whether suspended request should be included in summary</Description>
						<MapTo>IncludeSuspendedRequests</MapTo>
					</Argument>
					<Argument name="CategorizationSummary">
						<Description>List of objects used to show failed requests in exception management console</Description>
						<MapTo>Result</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationSummary fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationSummary fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Light fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{A55EA547-932A-49E9-B872-910C0A4B41F1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Light'
			SET @Description = 'ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Light service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Light">
	<ServicePublicContract>
		<Description>Invokes service using failed service request</Description>
		<Inputs>
			<Input name="RequestId">
				<Description>Id of request to be used for service invocation</Description>
				<MapTo>RequestId</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="Action">
				<Description>Service invocation type</Description>
				<MapTo>Action</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="CheckpointId">
				<Description>Id of checkpoint to be used when invoking service</Description>
				<MapTo>CheckpointId</MapTo>
				<Required>True</Required>
				<DefaultValue>00000000-0000-0000-0000-000000000000</DefaultValue>
			</Input>
		</Inputs>
		<Results>
			<Result name="ServiceResponse">
				<Description>Service response received from invoked service</Description>
				<MapTo>ServiceResponse</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="GetRequestById">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="RequestId">
						<Description>Id of request to be obtained</Description>
						<MapTo>RequestId</MapTo>
					</Argument>
					<Argument name="ServiceRequest">
						<Description>Service request identified by passed request id</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
				</Arguments>
			</Step>
			<Step name="GetCheckpointById">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="CheckpointId">
						<Description>Id of checkpoint to be obtained</Description>
						<MapTo>CheckpointId</MapTo>
					</Argument>
					<Argument name="ServiceRequest">
						<Description>Service request from which to get checkpoint</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
					<Argument name="Action">
						<Description>Action to be performed using checkpoint</Description>
						<MapTo>Action</MapTo>
					</Argument>
					<Argument name="Checkpoint">
						<Description>Execution checkpoint retrieved from service request</Description>
						<MapTo>Checkpoint</MapTo>
					</Argument>
				</Arguments>
				<Routes>
					<Route name="Succeeded">
						<Action name="RouteTo">
							<Step>PrepareRequest</Step>
						</Action>
					</Route>
					<Route name="Custom">
						<Code>CheckpointIdNotSelected</Code>
						<Action name="RouteTo">
							<Step>GetLastMatchingCheckpointId</Step>
						</Action>
					</Route>
				</Routes>
			</Step>
			<Step name="GetLastMatchingCheckpointId">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="ServiceRequest">
						<Description>Service request from which to retrieve checkpoint id</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
					<Argument name="Action">
						<Description>Action to be performed using checkpoint</Description>
						<MapTo>Action</MapTo>
					</Argument>
					<Argument name="CheckpointId">
						<Description>Last matching checkpoint id</Description>
						<MapTo>CheckpointId</MapTo>
					</Argument>
				</Arguments>
				<Routes>
					<Route name="Succeeded">
						<Action name="RouteTo">
							<Step>GetCheckpointById</Step>
						</Action>
					</Route>
				</Routes>
			</Step>
			<Step name="PrepareRequest">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="ServiceRequest">
						<Description>Service request to be prepared for reprocessing</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
					<Argument name="Checkpoint">
						<Description>Execution checkpoint to be used for service request reprocessing</Description>
						<MapTo>Checkpoint</MapTo>
					</Argument>
					<Argument name="Action">
						<Description>Type of service invocation</Description>
						<MapTo>Action</MapTo>
					</Argument>
				</Arguments>
			</Step>
			<Step name="DeleteRequestById">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="RequestId">
						<Description>Id of request to be deleted</Description>
						<MapTo>RequestId</MapTo>
					</Argument>
					<Argument name="ServiceRequestDeleted">
						<Description>Indicates whether service request was deleted successfully</Description>
						<MapTo>IsRequestDeleted</MapTo>
					</Argument>
				</Arguments>
			</Step>
			<Step name="InvokeService">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="ServiceRequest">
						<Description>Service request prepared for reprocessing</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
					<Argument name="ServiceResponse">
						<Description>Service response receieved from service that reprocessed service request</Description>
						<MapTo>ServiceResponse</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Light fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Light fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Heavy fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{24169F9D-C6E8-41FC-9D6F-D7972F36CF16}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Heavy'
			SET @Description = 'ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Heavy service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Heavy">
	<ServicePublicContract>
		<Description>Invokes service using failed service request</Description>
		<Inputs>
			<Input name="ServiceRequest">
				<Description>Service request to be used for service invocation</Description>
				<MapTo>ServiceRequest</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="Action">
				<Description>Service invocation type</Description>
				<MapTo>Action</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="Checkpoint">
				<Description>Checkpoint to be used when invoking service</Description>
				<MapTo>Checkpoint</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
		<Results>
			<Result name="ServiceResponse">
				<Description>Service response received from invoked service</Description>
				<MapTo>ServiceResponse</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="PrepareRequest">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="ServiceRequest">
						<Description>Service request to be prepared for reprocessing</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
					<Argument name="Action">
						<Description>Type of service invocation</Description>
						<MapTo>Action</MapTo>
					</Argument>
					<Argument name="Checkpoint">
						<Description>Execution checkpoint to be used for service request reprocessing</Description>
						<MapTo>Checkpoint</MapTo>
					</Argument>
				</Arguments>
				<Routes>
					<Route name="Succeeded">
						<Action name="RouteTo">
							<Step>GetRequestId</Step>
						</Action>
					</Route>
					<Route name="Custom">
						<Code>CheckpointIdNotSelected</Code>
						<Action name="RouteTo">
							<Step>GetLastMatchingCheckpointId</Step>
						</Action>
					</Route>
				</Routes>
			</Step>
			<Step name="GetCheckpointById">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="CheckpointId">
						<Description>Id of checkpoint to be obtained</Description>
						<MapTo>CheckpointId</MapTo>
					</Argument>
					<Argument name="ServiceRequest">
						<Description>Service request from which to get checkpoint</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
					<Argument name="Action">
						<Description>Action to be performed using checkpoint</Description>
						<MapTo>Action</MapTo>
					</Argument>
					<Argument name="Checkpoint">
						<Description>Execution checkpoint retrieved from service request</Description>
						<MapTo>Checkpoint</MapTo>
					</Argument>
				</Arguments>
				<Routes>
					<Route name="Succeeded">
						<Action name="RouteTo">
							<Step>PrepareRequest</Step>
						</Action>
					</Route>
					<Route name="Custom">
						<Code>CheckpointIdNotSelected</Code>
						<Action name="RouteTo">
							<Step>GetLastMatchingCheckpointId</Step>
						</Action>
					</Route>
				</Routes>
			</Step>
			<Step name="GetLastMatchingCheckpointId">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="ServiceRequest">
						<Description>Service request from which to retrieve checkpoint id</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
					<Argument name="Action">
						<Description>Action to be performed using checkpoint</Description>
						<MapTo>Action</MapTo>
					</Argument>
					<Argument name="CheckpointId">
						<Description>Last matching checkpoint id</Description>
						<MapTo>CheckpointId</MapTo>
					</Argument>
				</Arguments>
				<Routes>
					<Route name="Succeeded">
						<Action name="RouteTo">
							<Step>GetCheckpointById</Step>
						</Action>
					</Route>
				</Routes>
			</Step>
			<Step name="GetRequestId">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="ServiceRequest">
						<Description>Service request from which to retrieve id</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
					<Argument name="RequestId">
						<Description>Retrieved request id</Description>
						<MapTo>RequestId</MapTo>
					</Argument>
				</Arguments>
			</Step>
			<Step name="DeleteRequestById">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="RequestId">
						<Description>Id of request to be deleted</Description>
						<MapTo>RequestId</MapTo>
					</Argument>
					<Argument name="ServiceRequestDeleted">
						<Description>Indicates whether service request was deleted successfully</Description>
						<MapTo>IsRequestDeleted</MapTo>
					</Argument>
				</Arguments>
			</Step>
			<Step name="InvokeService">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="ServiceRequest">
						<Description>Service request prepared for reprocessing</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
					<Argument name="ServiceResponse">
						<Description>Service response receieved from service that reprocessed service request</Description>
						<MapTo>ServiceResponse</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Heavy fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Heavy fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.Save fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{AC869E60-0FD5-4A27-B001-0C9D75DFED26}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Requests.Save'
			SET @Description = 'ServiceBus.System.ServiceHost.Requests.Save service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ServiceHost.Requests.Save">
	<ServicePublicContract>
		<Description>Saves service request</Description>
		<Inputs>
			<Input name="ServiceRequest">
				<Description>Service request to be saved</Description>
				<MapTo>ServiceRequest</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
		<Results>
			<Result name="PersistenceId">
				<Description>Persistence ID of saved service request</Description>
				<MapTo>Result</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="SaveRequest">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.SaveRequestStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="ServiceRequest">
						<Description>Service request to be saved</Description>
						<MapTo>ServiceRequest</MapTo>
					</Argument>
					<Argument name="PersistenceId">
						<Description>Persistence ID of saved service request</Description>
						<MapTo>Result</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.Save fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.Save fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.GetById fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{214E816B-796A-4362-8089-DD80221FA177}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Requests.GetById'
			SET @Description = 'ServiceBus.System.ServiceHost.Requests.GetById service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ServiceHost.Requests.GetById">
	<ServicePublicContract>
		<Description>Retrieves service request identified by passed request id</Description>
		<Inputs>
			<Input name="RequestId">
				<Description>Id of request to be obtained</Description>
				<MapTo>Id</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
		<Results>
			<Result name="ServiceRequest">
				<Description>Service request identified by passed request id</Description>
				<MapTo>Result</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="GetRequestById">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="RequestId">
						<Description>Id of request to be obtained</Description>
						<MapTo>Id</MapTo>
					</Argument>
					<Argument name="ServiceRequest">
						<Description>Service request identified by passed request id</Description>
						<MapTo>Result</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.GetById fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.GetById fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.DeleteById fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{85B1447F-9EA4-428D-8EC0-C4E18524AD5C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Requests.DeleteById'
			SET @Description = 'ServiceBus.System.ServiceHost.Requests.DeleteById service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ServiceHost.Requests.DeleteById">
	<ServicePublicContract>
		<Description>Deletes service request identified by passed request id</Description>
		<Inputs>
			<Input name="RequestId">
				<Description>Id of request to be deleted</Description>
				<MapTo>Id</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
		<Results>
			<Result name="ServiceRequestDeleted">
				<Description>Indicates whether service request was deleted successfully</Description>
				<MapTo>Result</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="DeleteRequestById">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="RequestId">
						<Description>Id of request to be deleted</Description>
						<MapTo>Id</MapTo>
					</Argument>
					<Argument name="ServiceRequestDeleted">
						<Description>Indicates whether service request was deleted successfully</Description>
						<MapTo>Result</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.DeleteById fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.DeleteById fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.DeleteFailedRequests fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{C24E980E-1A96-42E0-83A4-5143A77AB4AC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Requests.DeleteFailedRequests'
			SET @Description = 'ServiceBus.System.ServiceHost.Requests.DeleteFailedRequests service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ServiceHost.Requests.DeleteFailedRequests">
	<ServicePublicContract>
		<Description>Delete all exceptions from table</Description>
		<Inputs>
			<Input name="TableName">
				<Description>Table name</Description>
				<MapTo>TableName</MapTo>
				<Required>True</Required>
				<DefaultValue>FailedRequest</DefaultValue>
			</Input>
		</Inputs>
		<Results>
			<Result name="Exception">
				<Description>Returns exception result</Description>
				<MapTo>Exception</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="DeleteFailedRequests">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
					<Type>ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="TableName">
						<Description>Table name</Description>
						<MapTo>TableName</MapTo>
					</Argument>
					<Argument name="Exception">
						<Description>Exception argument</Description>
						<MapTo>Exception</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.DeleteFailedRequests fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Requests.DeleteFailedRequests fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Resources.Upload fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{CCFEAA18-E503-48F9-89D5-CEDD2D43515A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Resources.Upload'
			SET @Description = 'ServiceBus.System.ServiceHost.Resources.Upload service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Resources"',
				'
<Service name="ServiceBus.System.ServiceHost.Resources.Upload">
	<ServicePublicContract>
		<Description>Saves resource</Description>
		<Inputs>
			<Input name="Id">
				<Description>Resource ID (from Resource Catalog)</Description>
				<MapTo>Id</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="SourcePath">
				<Description>Path inside repository share where resource is stored</Description>
				<MapTo>SourcePath</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="Bytes">
				<Description>Resource content to be saved</Description>
				<MapTo>Bytes</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
		<Results>
			<Result name="ResourceUploaded">
				<Description>Indicates whether resource was saved successfully</Description>
				<MapTo>ResourceUploaded</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="SaveResource">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.ResourceManagement.dll" />
					<Type>ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="Id">
						<Description>Resource ID (from Resource Catalog)</Description>
						<MapTo>Id</MapTo>
					</Argument>
					<Argument name="SourcePath">
						<Description>Path inside repository share where resource is stored</Description>
						<MapTo>SourcePath</MapTo>
					</Argument>
					<Argument name="Bytes">
						<Description>Resource content to be saved</Description>
						<MapTo>Bytes</MapTo>
					</Argument>
					<Argument name="ResourceUploaded">
						<Description>Indicates whether resource was saved successfully</Description>
						<MapTo>ResourceUploaded</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Resources.Upload fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Resources.Upload fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Resources.Download fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{3F72B691-5E73-45FF-A156-2258326E588A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Resources.Download'
			SET @Description = 'ServiceBus.System.ServiceHost.Resources.Download service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Resources"',
				'
<Service name="ServiceBus.System.ServiceHost.Resources.Download">
	<ServicePublicContract>
		<Description>Retrieves resource identified by passed persistence id</Description>
		<Inputs>
			<Input name="Id">
				<Description>Resource ID (from Resource Catalog)</Description>
				<MapTo>Id</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="SourcePath">
				<Description>Path inside repository share where resource is stored</Description>
				<MapTo>SourcePath</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
		<Results>
			<Result name="ResourceBytes">
				<Description>Resource content. Null if resource could not be obtained</Description>
				<MapTo>ResourceBytes</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="GetResourceById">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.ResourceManagement.dll" />
					<Type>ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="Id">
						<Description>Resource ID (from Resource Catalog)</Description>
						<MapTo>Id</MapTo>
					</Argument>
					<Argument name="SourcePath">
						<Description>Path inside repository share where resource is stored</Description>
						<MapTo>SourcePath</MapTo>
					</Argument>
					<Argument name="ResourceBytes">
						<Description>Resource content. Null if resource could not be obtained</Description>
						<MapTo>ResourceBytes</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Resources.Download fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Resources.Download fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Resources.Delete fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{5C79CF8C-71B4-40EA-BD36-35A3E91CB3B2}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Resources.Delete'
			SET @Description = 'ServiceBus.System.ServiceHost.Resources.Delete service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Resources"',
				'
<Service name="ServiceBus.System.ServiceHost.Resources.Delete">
	<ServicePublicContract>
		<Description>Deletes resource identified by passed persistence id</Description>
		<Inputs>
			<Input name="Id">
				<Description>Resource ID (from Resource Catalog)</Description>
				<MapTo>Id</MapTo>
				<Required>True</Required>
			</Input>
			<Input name="SourcePath">
				<Description>Path inside repository share where resource is stored</Description>
				<MapTo>SourcePath</MapTo>
				<Required>True</Required>
			</Input>
		</Inputs>
		<Results>
			<Result name="ResourceDeleted">
				<Description>Indicates whether resource was deleted successfully</Description>
				<MapTo>ResourceDeleted</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="DeleteResourceById">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.ResourceManagement.dll" />
					<Type>ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="Id">
						<Description>Resource ID (from Resource Catalog)</Description>
						<MapTo>Id</MapTo>
					</Argument>
					<Argument name="SourcePath">
						<Description>Path inside repository share where resource is stored</Description>
						<MapTo>SourcePath</MapTo>
					</Argument>
					<Argument name="ResourceDeleted">
						<Description>Indicates whether resource was deleted successfully</Description>
						<MapTo>ResourceDeleted</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Resources.Delete fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.ServiceHost.Resources.Delete fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Metering.MeteringPoint.Save fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{6C8A1598-C2A8-4BE5-9C0F-0D33D95D8B49}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.Metering.MeteringPoint.Save'
			SET @Description = 'ServiceBus.System.Metering.MeteringPoint.Save service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Metering"',
				'
<Service name="ServiceBus.System.Metering.MeteringPoint.Save">
	<ServicePublicContract>
		<Description>Save values to metering persistence</Description>
		<IsCacheable>False</IsCacheable>
		<Inputs>
			<Input name="MeteringPointValues">
				<Description>Metering point values</Description>
				<MapTo>MeteringPointValues</MapTo>
				<Required>True</Required>
				<DefaultValue>0</DefaultValue>
			</Input>
		</Inputs>
		<Results>
			<Result name="Result">
				<Description>Result if save is suceeded</Description>
				<MapTo>MeteringResult</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<!-- Maximum processing time allowed for this service execution -->
		<MaximumProcessingTime>00:00:30</MaximumProcessingTime>
		<ServiceRequestPersistence>
			<Persist>False</Persist>
		</ServiceRequestPersistence>
		<IsMultithreaded>True</IsMultithreaded>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="SaveStep">
				<Implementation>
					<Resource name="ServiceBus.Metering.MeteringPointManagement.dll" />
					<Type>ServiceBus.Metering.MeteringPointManagement.SaveStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="MeteringPointValues">
						<Description>Value of metering points</Description>
						<MapTo>MeteringPointValues</MapTo>
						<DefaultValue />
					</Argument>
					<Argument name="Result">
						<Description>Result if save is suceeded</Description>
						<MapTo>MeteringResult</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.Metering.MeteringPoint.Save fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Metering.MeteringPoint.Save fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Metering.MeteringPoint.GetFilteredList fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{97F8E7B5-7C7E-4D0C-B4F7-F6707E996298}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.Metering.MeteringPoint.GetFilteredList'
			SET @Description = 'ServiceBus.System.Metering.MeteringPoint.GetFilteredList service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Metering"',
				'
<Service name="ServiceBus.System.Metering.MeteringPoint.GetFilteredList">
	<ServicePublicContract>
		<Description>Retrieves list of objects used to show filtered metering points in management console</Description>
		<Inputs>
			<Input name="MeteringPointInstanceId">
				<Description>Filtering by MeteringPointInstanceId</Description>
				<MapTo>InstanceId</MapTo>
			</Input>
			<Input name="Name">
				<Description>Filtering by Name of metering points</Description>
				<MapTo>Name</MapTo>
			</Input>
			<Input name="Code">
				<Description>Filtering by metering point group codes</Description>
				<MapTo>Code</MapTo>
			</Input>
			<Input name="MeteringType">
				<Description>Filtering by metering point types</Description>
				<MapTo>MeteringType</MapTo>
			</Input>
			<Input name="CallerType">
				<Description>Filtering by caller type (full class name) that uses metering point</Description>
				<MapTo>CallerType</MapTo>
			</Input>
			<Input name="PublishedName">
				<Description>Filtering by metering point published names</Description>
				<MapTo>PublishedName</MapTo>
			</Input>
			<Input name="DateFrom">
				<Description>Filtering by DateCreated of metering points</Description>
				<MapTo>FromDate</MapTo>
			</Input>
			<Input name="DateTo">
				<Description>Filtering by DateCreated of metering points</Description>
				<MapTo>ToDate</MapTo>
			</Input>
			<Input name="SelectedAttributes">
				<Description>Filtering by names and values of attribute</Description>
				<MapTo>SelectedAttributes</MapTo>
			</Input>
			<Input name="LastSelectedMeteringID">
				<Description>Last selected metering ID</Description>
				<MapTo>LastSelectedMeteringID</MapTo>
			</Input>
			<Input name="PagingDirection">
				<Description>Paging direction</Description>
				<MapTo>PagingDirection</MapTo>
			</Input>
			<Input name="PageSize">
				<Description>Size of page</Description>
				<MapTo>PageSize</MapTo>
				<Required>True</Required>
				<DefaultValue>1</DefaultValue>
			</Input>
		</Inputs>
		<Results>
			<Result name="FilteredMeteringPointList">
				<Description>List of objects used to show filtered metering points in management console</Description>
				<MapTo>Result</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<!-- Maximum processing time allowed for this service execution -->
		<MaximumProcessingTime>00:00:30</MaximumProcessingTime>
		<ServiceRequestPersistence>
			<Persist>False</Persist>
		</ServiceRequestPersistence>
		<IsMultithreaded>True</IsMultithreaded>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="GetFilteredMeteringPointListStep">
				<Implementation>
					<Resource name="ServiceBus.Metering.MeteringPointManagement.dll" />
					<Type>ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="MeteringPointInstanceId">
						<Description>Filtering by MeteringPointInstanceId</Description>
						<MapTo>InstanceId</MapTo>
					</Argument>
					<Argument name="Name">
						<Description>Filtering by Name of metering points</Description>
						<MapTo>Name</MapTo>
					</Argument>
					<Argument name="Code">
						<Description>Filtering by metering point group codes</Description>
						<MapTo>Code</MapTo>
					</Argument>
					<Argument name="MeteringType">
						<Description>Filtering by metering point types</Description>
						<MapTo>MeteringType</MapTo>
					</Argument>
					<Argument name="CallerType">
						<Description>Filtering by caller type (full class name) that uses metering point</Description>
						<MapTo>CallerType</MapTo>
					</Argument>
					<Argument name="PublishedName">
						<Description>Filtering by metering point published names</Description>
						<MapTo>PublishedName</MapTo>
					</Argument>
					<Argument name="DateFrom">
						<Description>Filtering by DateCreated of metering points</Description>
						<MapTo>FromDate</MapTo>
					</Argument>
					<Argument name="DateTo">
						<Description>Filtering by DateCreated of metering points</Description>
						<MapTo>ToDate</MapTo>
					</Argument>
					<Argument name="SelectedAttributes">
						<Description>Filtering by names and values of attribute</Description>
						<MapTo>SelectedAttributes</MapTo>
					</Argument>
					<Argument name="LastSelectedMeteringID">
						<Description>Last selected metering ID</Description>
						<MapTo>LastSelectedMeteringID</MapTo>
					</Argument>
					<Argument name="PagingDirection">
						<Description>Paging direction</Description>
						<MapTo>PagingDirection</MapTo>
					</Argument>
					<Argument name="PageSize">
						<Description>Size of page</Description>
						<MapTo>PageSize</MapTo>
					</Argument>
					<Argument name="FilteredMeteringPointList">
						<Description>List of objects used to show filtered metering points in management console</Description>
						<MapTo>Result</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.Metering.MeteringPoint.GetFilteredList fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Metering.MeteringPoint.GetFilteredList fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Metering.MeteringPoint.GetPublishedNameList fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{57FB61F1-1B55-45AF-9E84-0D7E679BADFC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.Metering.MeteringPoint.GetPublishedNameList'
			SET @Description = 'ServiceBus.System.Metering.MeteringPoint.GetPublishedNameList service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Metering"',
				'
<Service name="ServiceBus.System.Metering.MeteringPoint.GetPublishedNameList">
	<ServicePublicContract>
		<Description>Get list of metering point published names</Description>
		<Inputs />
		<Results>
			<Result name="PublishedNameList">
				<Description>List of metering point published names</Description>
				<MapTo>Result</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<!-- Maximum processing time allowed for this service execution -->
		<MaximumProcessingTime>00:00:20</MaximumProcessingTime>
		<ServiceRequestPersistence>
			<Persist>False</Persist>
		</ServiceRequestPersistence>
		<IsMultithreaded>True</IsMultithreaded>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="GetMeteringPointPublishedNameListStep">
				<Implementation>
					<Resource name="ServiceBus.Metering.MeteringPointManagement.dll" />
					<Type>ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="PublishedNameList">
						<Description>List of metering point published names</Description>
						<MapTo>Result</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.Metering.MeteringPoint.GetPublishedNameList fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Metering.MeteringPoint.GetPublishedNameList fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.PickupLogEntries fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{7A031131-7959-4515-B750-153330E43278}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.ServiceHost.BseModule.PickupLogEntries'
			SET @Description = 'ServiceBus.ServiceHost.BseModule.PickupLogEntries service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Logging"',
				'
<Service name="ServiceBus.ServiceHost.BseModule.PickupLogEntries">
	<ServicePublicContract>
		<Description>Monitors designated MSMQ for log entries. Collects log entries from the queue and sends them to specified service.</Description>
	</ServicePublicContract>
	<ServiceHostData>
		<LoadOnServicePoolStart>True</LoadOnServicePoolStart>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="BSE">
		<Implementation>
			<Resource name="ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll" />
			<Type>ServiceBus.ServiceHost.BseModule.PickupLogEntries</Type>
		</Implementation>
		<StartConfig>
			<QueuePath>.\Private$\ServiceBus.logging</QueuePath>
			<LogEntryCollectionSize>100</LogEntryCollectionSize>
			<CleanupInterval>00:10:00</CleanupInterval>
			<InvokeService>
				<ServiceName>ServiceBus.System.Logging.LoggingService</ServiceName>
				<Input>LogEntryCollection</Input>
			</InvokeService>
		</StartConfig>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.PickupLogEntries fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.PickupLogEntries fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Logging.GetPage fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{C4898072-052C-4EAB-9A95-BC321BB9D968}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.Logging.GetPage'
			SET @Description = 'ServiceBus.System.Logging.GetPage service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Logging"',
				'
<Service name="ServiceBus.System.Logging.GetPage">
	<ServicePublicContract>
		<Description>Gets page for Log Viewer from Logging database</Description>
		<Inputs>
			<Input name="lastLogEntryTime">
				<Description>UTC time</Description>
				<MapTo>lastLogEntryTime</MapTo>
			</Input>
			<Input name="lastLogEntryId">
				<Description>Log Entry Id</Description>
				<MapTo>lastLogEntryId</MapTo>
			</Input>
			<Input name="pageSize">
				<Description>Default page size</Description>
				<MapTo>pageSize</MapTo>
				<Required>True</Required>
				<DefaultValue>100</DefaultValue>
			</Input>
			<Input name="filter">
				<Description>Filter for search LogEntry data</Description>
				<MapTo>filter</MapTo>
			</Input>
			<Input name="pagingDirection">
				<Description>Paging direction</Description>
				<MapTo>pagingDirection</MapTo>
			</Input>
		</Inputs>
		<Results>
			<Result name="PageResult">
				<Description>Dataset used to show log viewer page</Description>
				<MapTo>Result</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<!-- Maximum processing time allowed for this service execution -->
		<MaximumProcessingTime>00:00:10</MaximumProcessingTime>
		<ServiceRequestPersistence>
			<Persist>False</Persist>
		</ServiceRequestPersistence>
		<IsMultithreaded>True</IsMultithreaded>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="GetPageStep">
				<Implementation>
					<Resource name="ServiceBus.Logging.LoggingManagement.dll" />
					<Type>ServiceBus.Logging.GetPageStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="lastLogEntryTime">
						<Description>UTC time</Description>
						<MapTo>lastLogEntryTime</MapTo>
					</Argument>
					<Argument name="lastLogEntryId">
						<Description>Log Entry Id</Description>
						<MapTo>lastLogEntryId</MapTo>
					</Argument>
					<Argument name="pageSize">
						<Description>Default page size</Description>
						<MapTo>pageSize</MapTo>
						<Required>True</Required>
						<DefaultValue>100</DefaultValue>
					</Argument>
					<Argument name="filter">
						<Description>Filter for search LogEntry data</Description>
						<MapTo>filter</MapTo>
					</Argument>
					<Argument name="pagingDirection">
						<Description>Paging direction</Description>
						<MapTo>pagingDirection</MapTo>
					</Argument>
					<Argument name="PageResult">
						<Description>Dataset used to show log viewer page</Description>
						<MapTo>Result</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.Logging.GetPage fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Logging.GetPage fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Logging.GetContextMachineCounts fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{659439DB-4074-42A7-BB84-03EFBC0F01A0}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.Logging.GetContextMachineCounts'
			SET @Description = 'ServiceBus.System.Logging.GetContextMachineCounts service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Logging"',
				'
<Service name="ServiceBus.System.Logging.GetContextMachineCounts">
	<ServicePublicContract>
		<Description>Gets context machine counts for Log Viewer from Logging database</Description>
		<Results>
			<Result name="Result">
				<Description>Dataset used to show log viewer context categorization</Description>
				<MapTo>Result</MapTo>
			</Result>
		</Results>
	</ServicePublicContract>
	<ServiceHostData>
		<!-- Maximum processing time allowed for this service execution -->
		<MaximumProcessingTime>00:00:10</MaximumProcessingTime>
		<ServiceRequestPersistence>
			<Persist>False</Persist>
		</ServiceRequestPersistence>
		<IsMultithreaded>True</IsMultithreaded>
		<ExecutionType>Synchronous</ExecutionType>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="GetContextCategorizationStep">
				<Implementation>
					<Resource name="ServiceBus.Logging.LoggingManagement.dll" />
					<Type>ServiceBus.Logging.GetContextCategorizationStep</Type>
				</Implementation>
				<Arguments>
					<Argument name="Result">
						<Description>Dataset used to show log viewer context categorization</Description>
						<MapTo>Result</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.Logging.GetContextMachineCounts fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Logging.GetContextMachineCounts fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Logging.LoggingService fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{C1152418-ECF5-44FE-AE0D-AD0E18665906}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.Logging.LoggingService'
			SET @Description = 'ServiceBus.System.Logging.LoggingService service'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Logging"',
				'
<Service name="ServiceBus.System.Logging.LoggingService">
	<ServicePublicContract>
		<Description />
		<Inputs>
			<Input name="LogEntryCollection">
				<Description>Collection of log entries</Description>
				<MapTo>LogEntryCollection</MapTo>
			</Input>
		</Inputs>
	</ServicePublicContract>
	<ServiceHostData>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="DSE">
		<Steps>
			<Step name="LogStep">
				<Implementation>
					<Resource name="ServiceBus.Logging.LogStep.dll" />
					<Type>ServiceBus.Logging.LogStep</Type>
				</Implementation>
				<MaximumProcessingTime>00:00:30</MaximumProcessingTime>
				<Arguments>
					<Argument name="LogEntryCollection">
						<Description>Collection of log entries</Description>
						<MapTo>LogEntryCollection</MapTo>
					</Argument>
				</Arguments>
			</Step>
		</Steps>
	</ServiceFactoryData>
</Service>
				'
			)
		END

	--
	-- Ensure that Service.ServiceBus.System.Logging.LoggingService fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.System.Logging.LoggingService fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Resource.Microsoft.Ccr.Core.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{0FE3ED46-1B9E-4805-856A-E801AEF4F330}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.Microsoft.Ccr.Core.dll'
			SET @Description = 'Microsoft.Ccr.Core.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Microsoft"',
				'
<Resource name="Microsoft.Ccr.Core.dll" id="348cda47-c697-4c26-af92-5ddc55b0bcc8">
	<FileName>Microsoft.Ccr.Core.dll</FileName>
	<DestinationPath>Microsoft.Ccr.Core.dll</DestinationPath>
	<Bytes />
	<SourcePath>Microsoft.Ccr.Core.dll</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.Microsoft.Ccr.Core.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Ccr.Core.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Practices.EnterpriseLibrary.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{E3F1B36C-C74C-4AF0-853D-461D19492C36}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.Microsoft.Practices.EnterpriseLibrary.Common.dll'
			SET @Description = 'Microsoft.Practices.EnterpriseLibrary.Common.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Microsoft"',
				'
<Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" id="465dd2cf-82d9-4eea-b4bf-a392f5dba7de">
	<FileName>Microsoft.Practices.EnterpriseLibrary.Common.dll</FileName>
	<DestinationPath>Microsoft.Practices.EnterpriseLibrary.Common.dll</DestinationPath>
	<Bytes />
	<SourcePath>Microsoft.Practices.EnterpriseLibrary.Common.dll</SourcePath>
	<Dependencies>
		<Resource name="Microsoft.Practices.ObjectBuilder2.dll" />
		<Resource name="Microsoft.Practices.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.Microsoft.Practices.EnterpriseLibrary.Common.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Practices.EnterpriseLibrary.Common.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Practices.EnterpriseLibrary.Logging.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{69A16C4F-8C04-4D5F-B8FA-8F9CD5C94020}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.Microsoft.Practices.EnterpriseLibrary.Logging.dll'
			SET @Description = 'Microsoft.Practices.EnterpriseLibrary.Logging.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Microsoft"',
				'
<Resource name="Microsoft.Practices.EnterpriseLibrary.Logging.dll" id="2d99c465-03a2-4eda-a52e-18455134ee15">
	<FileName>Microsoft.Practices.EnterpriseLibrary.Logging.dll</FileName>
	<DestinationPath>Microsoft.Practices.EnterpriseLibrary.Logging.dll</DestinationPath>
	<Bytes />
	<SourcePath>Microsoft.Practices.EnterpriseLibrary.Logging.dll</SourcePath>
	<Dependencies>
		<Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" />
		<Resource name="Microsoft.Practices.ObjectBuilder2.dll" />
		<Resource name="Microsoft.Practices.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.Microsoft.Practices.EnterpriseLibrary.Logging.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Practices.EnterpriseLibrary.Logging.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Practices.ObjectBuilder2.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{E9A14733-4D20-4AC1-9184-9CB9DD99B608}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.Microsoft.Practices.ObjectBuilder2.dll'
			SET @Description = 'Microsoft.Practices.ObjectBuilder2.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Microsoft"',
				'
<Resource name="Microsoft.Practices.ObjectBuilder2.dll" id="e62f97cf-abf4-4809-90a3-b804670a282e">
	<FileName>Microsoft.Practices.ObjectBuilder2.dll</FileName>
	<DestinationPath>Microsoft.Practices.ObjectBuilder2.dll</DestinationPath>
	<Bytes />
	<SourcePath>Microsoft.Practices.ObjectBuilder2.dll</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.Microsoft.Practices.ObjectBuilder2.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Practices.ObjectBuilder2.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Practices.Unity.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{512B71E4-CD36-4A65-B930-44C7C689D35C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.Microsoft.Practices.Unity.dll'
			SET @Description = 'Microsoft.Practices.Unity.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Microsoft"',
				'
<Resource name="Microsoft.Practices.Unity.dll" id="b1a9cfaa-fbb5-4470-9e85-54ddb7fb3460">
	<FileName>Microsoft.Practices.Unity.dll</FileName>
	<DestinationPath>Microsoft.Practices.Unity.dll</DestinationPath>
	<Bytes />
	<SourcePath>Microsoft.Practices.Unity.dll</SourcePath>
	<Dependencies>
		<Resource name="Microsoft.Practices.ObjectBuilder2.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.Microsoft.Practices.Unity.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Practices.Unity.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Practices.Unity.Configuration.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{F9EAF395-52A4-46B2-973F-007C67C66BC6}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.Microsoft.Practices.Unity.Configuration.dll'
			SET @Description = 'Microsoft.Practices.Unity.Configuration.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Microsoft"',
				'
<Resource name="Microsoft.Practices.Unity.Configuration.dll" id="80e6c824-aa9d-4ab1-a11c-ae0f398716af">
	<FileName>Microsoft.Practices.Unity.Configuration.dll</FileName>
	<DestinationPath>Microsoft.Practices.Unity.Configuration.dll</DestinationPath>
	<Bytes />
	<SourcePath>Microsoft.Practices.Unity.Configuration.dll</SourcePath>
	<Dependencies>
		<Resource name="Microsoft.Practices.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.Microsoft.Practices.Unity.Configuration.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Microsoft.Practices.Unity.Configuration.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.PubSub.Interfaces.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{20C165E6-4C46-4889-BF31-2C7F05F52A56}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.PubSub.Interfaces.dll'
			SET @Description = 'ServiceBus.PubSub.Interfaces.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="PubSub"',
				'
<Resource name="ServiceBus.PubSub.Interfaces.dll" id="96d006d8-b15e-48bf-a0ce-ccde67960088">
	<FileName>ServiceBus.PubSub.Interfaces.dll</FileName>
	<DestinationPath>ServiceBus.PubSub.Interfaces.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.PubSub.Interfaces.dll</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.PubSub.Interfaces.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.PubSub.Interfaces.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.PubSub.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{0C265D21-4CDC-4195-8380-2F749FDBD3C9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.PubSub.Common.dll'
			SET @Description = 'ServiceBus.PubSub.Common.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="PubSub"',
				'
<Resource name="ServiceBus.PubSub.Common.dll" id="f9f6706b-f7fc-4c6d-9340-fcc233371d74">
	<FileName>ServiceBus.PubSub.Common.dll</FileName>
	<DestinationPath>ServiceBus.PubSub.Common.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.PubSub.Common.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.PubSub.Interfaces.dll" />
		<Resource name="Microsoft.Ccr.Core.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.PubSub.Common.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.PubSub.Common.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe.config fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{62E5ABF3-1252-4EC2-8362-1250E2DB68A0}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe.config'
			SET @Description = 'ServiceBus.ServiceHost.ServicePoolLoader.exe.config resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.ServiceHost.ServicePoolLoader.exe.config" id="51263738-bc9b-436e-83dd-f23742e7b1ed">
	<FileName>ServiceBus.ServiceHost.ServicePoolLoader.exe.config</FileName>
	<DestinationPath>ServiceBus.ServiceHost.ServicePoolLoader.exe.config</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.ServicePoolLoader.exe.config</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe.config fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe.config fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.config fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{EBEB4CA7-F23F-4AF8-BB2C-2A9357A73CF6}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.config'
			SET @Description = 'ServiceBus.ServiceHost.config resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.ServiceHost.config" id="5b56fd74-3107-4274-9609-22e1fd1037c4">
	<FileName>ServiceBus.ServiceHost.config</FileName>
	<DestinationPath>ServiceBus.ServiceHost.config</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.config</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.config fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.config fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.config fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{C0491DF2-62AB-464E-AC33-AEA29F6CBAE6}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Logging.config'
			SET @Description = 'ServiceBus.Logging.config resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.Logging.config" id="be7aab39-f5f5-420f-be83-65a8763f27f9">
	<FileName>ServiceBus.Logging.config</FileName>
	<DestinationPath>ServiceBus.Logging.config</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Logging.config</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Logging.config fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.config fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.PubSub.config fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{9B962060-0984-462F-AC76-DE055FBBFEFC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.PubSub.config'
			SET @Description = 'ServiceBus.PubSub.config resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.PubSub.config" id="6ddf734f-7aa5-459b-bf8d-8f99215c2936">
	<FileName>ServiceBus.PubSub.config</FileName>
	<DestinationPath>ServiceBus.PubSub.config</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.PubSub.config</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.PubSub.config fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.PubSub.config fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.config fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{4A39F686-592D-4989-9163-06EEBEAF6A3B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Metering.config'
			SET @Description = 'ServiceBus.Metering.config resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.Metering.config" id="f40f2938-e6c4-48d4-8684-4f1670f7f358">
	<FileName>ServiceBus.Metering.config</FileName>
	<DestinationPath>ServiceBus.Metering.config</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Metering.config</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Metering.config fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.config fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.unityConfiguration.config fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{3234FC2F-ECE5-4558-8E2E-DE465A30C5CA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.unityConfiguration.config'
			SET @Description = 'unityConfiguration.config resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="unityConfiguration.config" id="a8f38c7f-dd17-4f09-ba2c-b907e2d37e68">
	<FileName>unityConfiguration.config</FileName>
	<DestinationPath>unityConfiguration.config</DestinationPath>
	<Bytes />
	<SourcePath>unityConfiguration.config</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.unityConfiguration.config fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.unityConfiguration.config fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Interfaces.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{BA5A2ED5-5E8F-47B3-9A2C-60CB2D3E67D3}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.Interfaces.dll'
			SET @Description = 'ServiceBus.ServiceHost.Interfaces.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.ServiceHost.Interfaces.dll" id="0b2dad2f-9a7b-4d5a-9b02-c155224ba2e2">
	<FileName>ServiceBus.ServiceHost.Interfaces.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.Interfaces.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.Interfaces.dll</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Interfaces.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Interfaces.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{3C97C2AF-8143-4DB5-833A-4505732D729B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.Common.dll'
			SET @Description = 'ServiceBus.ServiceHost.Common.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.ServiceHost.Common.dll" id="6e0d4aba-58c5-4fc3-97ef-3a58f4a4f4b4">
	<FileName>ServiceBus.ServiceHost.Common.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.Common.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.Common.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.PubSub.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Assembly.dll" />
		<Resource name="ServiceBus.Utility.Cache.dll" />
		<Resource name="ServiceBus.Utility.Configuration.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="Microsoft.Practices.ObjectBuilder2.dll" />
		<Resource name="Microsoft.Practices.Unity.dll" />
		<Resource name="Microsoft.Practices.Unity.Configuration.dll" />
		<Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" />
		<Resource name="ServiceBus.ServiceHost.DSE.Common.dll" />
		<Resource name="ServiceBus.Metering.Common.dll" />
		<Resource name="ServiceBus.Metering.MeteringPointManagement.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Common.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Common.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DSE.Interfaces.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{4B59943F-DDE1-4567-BBED-5E0780DE862A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DSE.Interfaces.dll'
			SET @Description = 'ServiceBus.ServiceHost.DSE.Interfaces.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" id="0aec128e-7119-4825-8919-f68927b41965">
	<FileName>ServiceBus.ServiceHost.DSE.Interfaces.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DSE.Interfaces.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DSE.Interfaces.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DSE.Interfaces.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DSE.Interfaces.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DSE.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{221A4740-90FF-44A6-BE87-AB4EF08403FC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DSE.Common.dll'
			SET @Description = 'ServiceBus.ServiceHost.DSE.Common.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.ServiceHost.DSE.Common.dll" id="320f9208-436c-4cd6-8107-6a877e62d41e">
	<FileName>ServiceBus.ServiceHost.DSE.Common.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DSE.Common.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DSE.Common.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Assembly.dll" />
		<Resource name="ServiceBus.Utility.Cache.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Resource name="ServiceBus.Metering.Common.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DSE.Common.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DSE.Common.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BSE.Interfaces.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{1CCF74AB-F28B-4758-B221-10AD9D494B41}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.BSE.Interfaces.dll'
			SET @Description = 'ServiceBus.ServiceHost.BSE.Interfaces.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.ServiceHost.BSE.Interfaces.dll" id="ffec128e-7119-4825-8919-f68927b41965">
	<FileName>ServiceBus.ServiceHost.BSE.Interfaces.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.BSE.Interfaces.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.BSE.Interfaces.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BSE.Interfaces.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BSE.Interfaces.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BSE.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{1C6BDB88-CEB6-4E42-9D48-27FC21B15F06}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.BSE.Common.dll'
			SET @Description = 'ServiceBus.ServiceHost.BSE.Common.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.ServiceHost.BSE.Common.dll" id="ff0f9208-436c-4cd6-8107-6a877e62d41e">
	<FileName>ServiceBus.ServiceHost.BSE.Common.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.BSE.Common.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.BSE.Common.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.BSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Assembly.dll" />
		<Resource name="ServiceBus.Utility.Cache.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Resource name="ServiceBus.Metering.Common.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BSE.Common.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BSE.Common.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{C3A5D216-5CA8-4200-A6DA-E66DD7A41500}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe'
			SET @Description = 'ServiceBus.ServiceHost.ServicePoolLoader.exe resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.ServiceHost.ServicePoolLoader.exe" id="0351febb-6c49-482d-bd42-7c13e964094d">
	<FileName>ServiceBus.ServiceHost.ServicePoolLoader.exe</FileName>
	<DestinationPath>ServiceBus.ServiceHost.ServicePoolLoader.exe</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.ServicePoolLoader.exe</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Assembly.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.ServiceHost.ServicePoolLoader.exe.config" />
		<Resource name="ServiceBus.ServiceHost.config" />
		<Resource name="ServiceBus.Logging.config" />
		<Resource name="ServiceBus.PubSub.config" />
		<Resource name="ServiceBus.Metering.config" />
		<Resource name="unityConfiguration.config" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Watchdogs.Watchdog.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{200C9030-377D-48D4-9CDF-30B53DED00E5}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.Watchdogs.Watchdog.dll'
			SET @Description = 'ServiceBus.ServiceHost.Watchdogs.Watchdog.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
<Resource name="ServiceBus.ServiceHost.Watchdogs.Watchdog.dll" id="538cfea2-4a14-4303-be33-ef1aa2f072c4">
	<FileName>ServiceBus.ServiceHost.Watchdogs.Watchdog.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.Watchdogs.Watchdog.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.Watchdogs.Watchdog.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Watchdogs.Watchdog.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Watchdogs.Watchdog.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Configuration.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{8B1D121F-CA75-4652-9DB2-23542F19D893}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Configuration.Common.dll'
			SET @Description = 'ServiceBus.Configuration.Common.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Configuration"',
				'
<Resource name="ServiceBus.Configuration.Common.dll" id="9eac18d1-5406-42c2-ac9f-efb8afd48a74">
	<FileName>ServiceBus.Configuration.Common.dll</FileName>
	<DestinationPath>ServiceBus.Configuration.Common.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Configuration.Common.dll</SourcePath>
	<Dependencies>
		<Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Configuration.Common.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Configuration.Common.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Configuration.Client.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{3BB71F36-403A-47AB-AA39-94193CA59BAD}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Configuration.Client.dll'
			SET @Description = 'ServiceBus.Configuration.Client.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Configuration"',
				'
<Resource name="ServiceBus.Configuration.Client.dll" id="60b9d6a4-83a6-46a4-b634-8f7ac3563ecb">
	<FileName>ServiceBus.Configuration.Client.dll</FileName>
	<DestinationPath>ServiceBus.Configuration.Client.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Configuration.Client.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Configuration.Common.dll" />
		<Resource name="ServiceBus.PubSub.Interfaces.dll" />
		<Resource name="ServiceBus.PubSub.Common.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="Microsoft.Ccr.Core.dll" />
		<Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" />
		<Resource name="Microsoft.Practices.EnterpriseLibrary.Logging.dll" />
		<Resource name="Microsoft.Practices.Unity.dll" />
		<Resource name="Microsoft.Practices.Unity.Configuration.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Configuration.Client.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Configuration.Client.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{715F9267-D09D-4642-8EE9-E4D9429643E0}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll'
			SET @Description = 'ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll" id="87fce95a-fd31-4ffa-b070-96a986b7e569">
	<FileName>ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.BSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.LogStep.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{C303C9BC-019D-4416-A06E-7CCEC471E2FC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Logging.LogStep.dll'
			SET @Description = 'ServiceBus.Logging.LogStep.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="ServiceBus.Logging.LogStep.dll" id="feeb72da-78c1-4814-9611-9747a1073717">
	<FileName>ServiceBus.Logging.LogStep.dll</FileName>
	<DestinationPath>ServiceBus.Logging.LogStep.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Logging.LogStep.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.DSE.Common.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Logging.LogStep.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.LogStep.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{DC9126EA-831D-493A-B5EF-AD13E324EA36}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Logging.Common.dll'
			SET @Description = 'ServiceBus.Logging.Common.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="ServiceBus.Logging.Common.dll" id="1e88a08c-9f14-46a0-95db-0f0505c974c8">
	<FileName>ServiceBus.Logging.Common.dll</FileName>
	<DestinationPath>ServiceBus.Logging.Common.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Logging.Common.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Utility.Database.dll" />
		<Resource name="ServiceBus.Logging.Targets.BlackHole.dll" />
		<Resource name="ServiceBus.Logging.Targets.Database.dll" />
		<Resource name="ServiceBus.Logging.Targets.File.dll" />
		<Resource name="ServiceBus.Logging.Targets.MSMQ.dll" />
		<Resource name="ServiceBus.Utility.Configuration.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Logging.Common.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Common.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Interfaces.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{2FC9175A-ECD4-4634-A9CE-8935E52156EF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Logging.Interfaces.dll'
			SET @Description = 'ServiceBus.Logging.Interfaces.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="ServiceBus.Logging.Interfaces.dll" id="0af12c87-de81-4337-a48a-0016306adce9">
	<FileName>ServiceBus.Logging.Interfaces.dll</FileName>
	<DestinationPath>ServiceBus.Logging.Interfaces.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Logging.Interfaces.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Logging.Interfaces.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Interfaces.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.PersistenceProviders.LogEntry.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{736F4108-955C-46F6-914C-ADC942FB6015}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Logging.PersistenceProviders.LogEntry.dll'
			SET @Description = 'ServiceBus.Logging.PersistenceProviders.LogEntry.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="ServiceBus.Logging.PersistenceProviders.LogEntry.dll" id="40b0ac63-845c-4e4a-add5-100c99813989">
	<FileName>ServiceBus.Logging.PersistenceProviders.LogEntry.dll</FileName>
	<DestinationPath>ServiceBus.Logging.PersistenceProviders.LogEntry.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Logging.PersistenceProviders.LogEntry.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Database.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Utility.Configuration.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Logging.PersistenceProviders.LogEntry.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.PersistenceProviders.LogEntry.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.LoggingManagement.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{0189C1D7-0EC0-4CEF-B98E-06BB0199C2EC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Logging.LoggingManagement.dll'
			SET @Description = 'ServiceBus.Logging.LoggingManagement.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="ServiceBus.Logging.LoggingManagement.dll" id="535f3764-075a-48ac-bd22-4801a8d5ec11">
	<FileName>ServiceBus.Logging.LoggingManagement.dll</FileName>
	<DestinationPath>ServiceBus.Logging.LoggingManagement.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Logging.LoggingManagement.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.DSE.Common.dll" />
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Assembly.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Logging.PersistenceProviders.LogEntry.dll" />
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Logging.LoggingManagement.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.LoggingManagement.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.BlackHole.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{BD153046-670E-4971-89FE-0FE7AC0816BE}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Logging.Targets.BlackHole.dll'
			SET @Description = 'ServiceBus.Logging.Targets.BlackHole.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="ServiceBus.Logging.Targets.BlackHole.dll" id="4318de6a-0c1f-4c57-8066-9333ccd54ec3">
	<FileName>ServiceBus.Logging.Targets.BlackHole.dll</FileName>
	<DestinationPath>ServiceBus.Logging.Targets.BlackHole.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Logging.Targets.BlackHole.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.BlackHole.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.BlackHole.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.Database.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{F5043A70-B090-465C-ADEB-B051EA0075CD}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Logging.Targets.Database.dll'
			SET @Description = 'ServiceBus.Logging.Targets.Database.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="ServiceBus.Logging.Targets.Database.dll" id="65631cb6-b8f8-4b8a-a28c-6e7c8b2011ab">
	<FileName>ServiceBus.Logging.Targets.Database.dll</FileName>
	<DestinationPath>ServiceBus.Logging.Targets.Database.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Logging.Targets.Database.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Database.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.Database.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.Database.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.File.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{1327D973-F839-4FF3-825A-90D3C429D236}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Logging.Targets.File.dll'
			SET @Description = 'ServiceBus.Logging.Targets.File.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="ServiceBus.Logging.Targets.File.dll" id="9faefa3c-6307-4236-a39a-8e023e7bcf9d">
	<FileName>ServiceBus.Logging.Targets.File.dll</FileName>
	<DestinationPath>ServiceBus.Logging.Targets.File.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Logging.Targets.File.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.File.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.File.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.MSMQ.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{3B6B31C1-165A-4C61-933D-B94188639BCA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Logging.Targets.MSMQ.dll'
			SET @Description = 'ServiceBus.Logging.Targets.MSMQ.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="ServiceBus.Logging.Targets.MSMQ.dll" id="c823700c-ca81-4bb2-b294-19f297b1138e">
	<FileName>ServiceBus.Logging.Targets.MSMQ.dll</FileName>
	<DestinationPath>ServiceBus.Logging.Targets.MSMQ.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Logging.Targets.MSMQ.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
		<Resource name="Interop.MSMQ.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.MSMQ.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Logging.Targets.MSMQ.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Interop.MSMQ.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{6B9A1B96-731C-4C0E-8839-8AB9A4833673}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.Interop.MSMQ.dll'
			SET @Description = 'Interop.MSMQ.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Logging"',
				'
<Resource name="Interop.MSMQ.dll" id="d8610f19-b276-460b-a2f9-457be986ba69">
	<FileName>Interop.MSMQ.dll</FileName>
	<DestinationPath>Interop.MSMQ.dll</DestinationPath>
	<Bytes />
	<SourcePath>Interop.MSMQ.dll</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.Interop.MSMQ.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.Interop.MSMQ.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.Interfaces.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{CECBDF38-3662-41E2-83C7-3DE991D875F4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Metering.Interfaces.dll'
			SET @Description = 'ServiceBus.Metering.Interfaces.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Metering"',
				'
<Resource name="ServiceBus.Metering.Interfaces.dll" id="52f14717-11eb-4d85-ae6d-933288cd7120">
	<FileName>ServiceBus.Metering.Interfaces.dll</FileName>
	<DestinationPath>ServiceBus.Metering.Interfaces.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Metering.Interfaces.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Metering.Interfaces.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.Interfaces.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{06AA48E9-B4E9-4228-95CE-8D725D1B81E0}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Metering.Common.dll'
			SET @Description = 'ServiceBus.Metering.Common.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Metering"',
				'
<Resource name="ServiceBus.Metering.Common.dll" id="6e9d5963-a2f3-45e9-b972-6e610dac97a4">
	<FileName>ServiceBus.Metering.Common.dll</FileName>
	<DestinationPath>ServiceBus.Metering.Common.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Metering.Common.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Assembly.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Utility.Cache.dll" />
		<Resource name="ServiceBus.Utility.Timer.dll" />
		<Resource name="ServiceBus.Utility.Configuration.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Metering.Common.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.Common.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.Targets.ServiceHost.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{33F0D1F8-104C-4EB4-966A-C6ED003373CC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Metering.Targets.ServiceHost.dll'
			SET @Description = 'ServiceBus.Metering.Targets.ServiceHost.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Metering"',
				'
<Resource name="ServiceBus.Metering.Targets.ServiceHost.dll" id="9487bc00-1ef1-4dd7-b43c-5d3d1b97b174">
	<FileName>ServiceBus.Metering.Targets.ServiceHost.dll</FileName>
	<DestinationPath>ServiceBus.Metering.Targets.ServiceHost.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Metering.Targets.ServiceHost.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Metering.Targets.ServiceHost.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.Targets.ServiceHost.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.Targets.Logging.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{646223D8-4AA9-4D8E-8A09-645E07715FD8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Metering.Targets.Logging.dll'
			SET @Description = 'ServiceBus.Metering.Targets.Logging.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Metering"',
				'
<Resource name="ServiceBus.Metering.Targets.Logging.dll" id="ca6c3d83-0f9d-4564-9169-140268c4b8b8">
	<FileName>ServiceBus.Metering.Targets.Logging.dll</FileName>
	<DestinationPath>ServiceBus.Metering.Targets.Logging.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Metering.Targets.Logging.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Metering.Targets.Logging.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.Targets.Logging.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestManagement.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{CC32B0FA-F91E-432C-BF47-9E4E51930104}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.RequestManagement.dll'
			SET @Description = 'ServiceBus.ServiceHost.RequestManagement.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="RequestManagement"',
				'
<Resource name="ServiceBus.ServiceHost.RequestManagement.dll" id="f120b17b-01e3-47c6-adac-b4cfe54217ee">
	<FileName>ServiceBus.ServiceHost.RequestManagement.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.RequestManagement.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.RequestManagement.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.DSE.Common.dll" />
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.ServiceHost.PersistenceProviders.Request.dll" />
		<Implementation name="ServiceBus.ServiceHost.IResourceManagement" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestManagement.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestManagement.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ResourceManagement.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{FBD341EE-D841-4A2D-8E35-BD2B34C4B46F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.ResourceManagement.dll'
			SET @Description = 'ServiceBus.ServiceHost.ResourceManagement.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ResourceManagement"',
				'
<Resource name="ServiceBus.ServiceHost.ResourceManagement.dll" id="0d1d18b4-807b-45c3-bdde-1cd821325817">
	<FileName>ServiceBus.ServiceHost.ResourceManagement.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.ResourceManagement.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.ResourceManagement.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.DSE.Common.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ResourceManagement.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ResourceManagement.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Configuration.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{E23E6C42-DDA3-449D-BAFF-21AE8CF74EA8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Utility.Configuration.dll'
			SET @Description = 'ServiceBus.Utility.Configuration.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'
<Resource name="ServiceBus.Utility.Configuration.dll" id="af348ee9-7cb1-42f6-83ab-d7d8c31cab73">
	<FileName>ServiceBus.Utility.Configuration.dll</FileName>
	<DestinationPath>ServiceBus.Utility.Configuration.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Utility.Configuration.dll</SourcePath>
	<Dependencies>
		<Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" />
		<Resource name="ServiceBus.Configuration.Common.dll" />
		<Resource name="ServiceBus.Configuration.Client.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Utility.Configuration.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Configuration.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Assembly.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{CF0BF3A9-681F-45F3-A7A9-784231A162E3}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Utility.Assembly.dll'
			SET @Description = 'ServiceBus.Utility.Assembly.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'
<Resource name="ServiceBus.Utility.Assembly.dll" id="f4b450dd-91a4-45eb-828e-8ca97d0b350f">
	<FileName>ServiceBus.Utility.Assembly.dll</FileName>
	<DestinationPath>ServiceBus.Utility.Assembly.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Utility.Assembly.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Utility.Cache.dll" />
		<Resource name="ServiceBus.Utility.Configuration.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Utility.Assembly.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Assembly.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Database.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{90C25534-609F-4EDB-A90A-77136B99B15F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Utility.Database.dll'
			SET @Description = 'ServiceBus.Utility.Database.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'
<Resource name="ServiceBus.Utility.Database.dll" id="e9f00371-d9bb-4867-8605-2dfb2b2a2bfd">
	<FileName>ServiceBus.Utility.Database.dll</FileName>
	<DestinationPath>ServiceBus.Utility.Database.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Utility.Database.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Utility.Configuration.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Utility.Database.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Database.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Cache.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{B3F1AF33-8EBE-4063-9F9A-F4DFF6C8D598}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Utility.Cache.dll'
			SET @Description = 'ServiceBus.Utility.Cache.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'
<Resource name="ServiceBus.Utility.Cache.dll" id="940fccf3-e5c2-4ef9-8355-d2a7e24300db">
	<FileName>ServiceBus.Utility.Cache.dll</FileName>
	<DestinationPath>ServiceBus.Utility.Cache.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Utility.Cache.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Configuration.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Utility.Cache.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Cache.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Logging.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{7FA39457-6372-454C-A8F7-458F918FF488}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Utility.Logging.dll'
			SET @Description = 'ServiceBus.Utility.Logging.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'
<Resource name="ServiceBus.Utility.Logging.dll" id="8af3ebca-621a-4830-b3b9-dc9d1d14515f">
	<FileName>ServiceBus.Utility.Logging.dll</FileName>
	<DestinationPath>ServiceBus.Utility.Logging.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Utility.Logging.dll</SourcePath>
	<Dependencies>
		<Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" />
		<Resource name="Microsoft.Practices.EnterpriseLibrary.Logging.dll" />
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Utility.Configuration.dll" />
		<Resource name="ServiceBus.Logging.Common.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Utility.Logging.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Logging.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Unity.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{9F941A37-683C-45AB-9988-8326B3AE3410}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Utility.Unity.dll'
			SET @Description = 'ServiceBus.Utility.Unity.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'
<Resource name="ServiceBus.Utility.Unity.dll" id="41d82bc4-2366-4e87-9120-a7e04f5707db">
	<FileName>ServiceBus.Utility.Unity.dll</FileName>
	<DestinationPath>ServiceBus.Utility.Unity.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Utility.Unity.dll</SourcePath>
	<Dependencies>
		<Resource name="Microsoft.Practices.ObjectBuilder2.dll" />
		<Resource name="Microsoft.Practices.Unity.dll" />
		<Resource name="Microsoft.Practices.Unity.Configuration.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Utility.Unity.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Unity.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Timer.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{F672853A-7FB9-4328-9E6F-C238C4866A2D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Utility.Timer.dll'
			SET @Description = 'ServiceBus.Utility.Timer.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'
<Resource name="ServiceBus.Utility.Timer.dll" id="08e02aaa-533b-4f9a-978e-c1f11c9353fd">
	<FileName>ServiceBus.Utility.Timer.dll</FileName>
	<DestinationPath>ServiceBus.Utility.Timer.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Utility.Timer.dll</SourcePath>
	<Dependencies />
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Utility.Timer.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Timer.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Sharing.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{2FB220C2-0D6E-4BD5-912D-742BA96C686A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Utility.Sharing.dll'
			SET @Description = 'ServiceBus.Utility.Sharing.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'
<Resource name="ServiceBus.Utility.Sharing.dll" id="4577a50b-5507-4767-8d86-a3985f7236da">
	<FileName>ServiceBus.Utility.Sharing.dll</FileName>
	<DestinationPath>ServiceBus.Utility.Sharing.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Utility.Sharing.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Utility.Configuration.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Utility.Sharing.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Sharing.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.MeteringPointManagement.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{99DF21CB-7327-4B6E-9347-49F361F58B8F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Metering.MeteringPointManagement.dll'
			SET @Description = 'ServiceBus.Metering.MeteringPointManagement.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Metering"',
				'
<Resource name="ServiceBus.Metering.MeteringPointManagement.dll" id="2ea6162a-fba7-4dbc-9109-16f065918af3">
	<FileName>ServiceBus.Metering.MeteringPointManagement.dll</FileName>
	<DestinationPath>ServiceBus.Metering.MeteringPointManagement.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Metering.MeteringPointManagement.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll" />
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.DSE.Common.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Database.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Metering.MeteringPointManagement.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.MeteringPointManagement.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.BooleanExpression.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{73711DE5-FB38-4FFA-8A3F-EE43FE08828D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.BooleanExpression.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.BooleanExpression.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.BooleanExpression.dll" id="4958DDD3-5EA2-40f2-B5BE-758AABEDEEF2">
	<FileName>ServiceBus.ServiceHost.DseStep.BooleanExpression.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.BooleanExpression.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.BooleanExpression.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.BooleanExpression.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.BooleanExpression.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{B8D202EC-F394-4C93-AB40-80C0AD6D1EF3}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll" id="FE755192-A5C6-429a-8BD6-8388B252374C">
	<FileName>ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.BytesToString.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{C5445E57-2950-42D5-972D-CA12540EBFD4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.BytesToString.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.BytesToString.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.BytesToString.dll" id="320f9208-436c-4c99-8107-6a877e62d41e">
	<FileName>ServiceBus.ServiceHost.DseStep.BytesToString.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.BytesToString.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.BytesToString.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.BytesToString.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.BytesToString.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{1C58E3D6-52D3-49C4-A03F-1D269466B90B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll" id="EEF8092D-AF63-4b2b-8822-7D2377342F7A">
	<FileName>ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.RegexMatch.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{47B5C0FA-B685-4956-9394-F837BCB09A17}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.RegexMatch.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.RegexMatch.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.RegexMatch.dll" id="636D3CEE-69B2-40d4-AE7D-82293A9FBEFB">
	<FileName>ServiceBus.ServiceHost.DseStep.RegexMatch.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.RegexMatch.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.RegexMatch.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.RegexMatch.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.RegexMatch.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{065DF6DD-E9FC-4C58-B73B-F6738ADB3422}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll" id="320f9208-436c-4c99-8107-6a877e33d41e">
	<FileName>ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{11645079-CB88-4861-A5EF-99AD28CC3FAA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll" id="65F4B0A7-63DD-441c-8311-FDD9FF8C3205">
	<FileName>ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{D2B365C7-5415-4B26-8805-AB3F80E637FE}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll" id="B93F0AE4-7FA0-41c7-8718-6D129D5B0A91">
	<FileName>ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{D8A35B7B-B2A6-414C-B948-E180CA7FDC4D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll" id="B33F0AE4-7FA0-41c7-9191-6D129D5B0A49">
	<FileName>ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{622FA166-A070-4393-8D28-712B81DCD434}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll" id="d72af957-7093-4175-9684-bf1a279b2a30">
	<FileName>ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{F00317FA-6893-4E18-B445-AE5F2E8B356B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll" id="d72af957-7093-4175-9684-bf1a279b2a30">
	<FileName>ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlDocToString.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{E584B2C0-53AD-4871-AC53-147F291E7DEA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.XmlDocToString.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.XmlDocToString.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.XmlDocToString.dll" id="d72af957-7093-4175-9684-bf1a27111a30">
	<FileName>ServiceBus.ServiceHost.DseStep.XmlDocToString.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.XmlDocToString.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.XmlDocToString.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlDocToString.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlDocToString.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{9752FCAA-B968-42AB-AD22-CFEDFA112105}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll" id="d72af957-7093-4175-4484-bf1a279b2a30">
	<FileName>ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{B2D4C0DE-EDAE-491B-B754-CFCA220F6368}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll" id="d72af957-7093-4175-2284-bf1a279b2a30">
	<FileName>ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.StringToBinary.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{A26442C5-FD8A-45B6-AAFE-FF11575383DE}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.StringToBinary.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.StringToBinary.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.StringToBinary.dll" id="d72af237-7093-4175-2284-bf1a27911a30">
	<FileName>ServiceBus.ServiceHost.DseStep.StringToBinary.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.StringToBinary.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.StringToBinary.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.StringToBinary.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.StringToBinary.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{E70B9CBD-72D1-4B08-9AEE-A28F1CA4E202}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll" id="CE64637F-60B1-4bdb-A7F9-2E5CB3DDAC57">
	<FileName>ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{B744FEFE-0A2D-44C5-B7D2-F20E240F1C42}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll" id="64b79af8-9aa0-4e79-938c-b06bface1224">
	<FileName>ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlNodeName.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{79F647E5-21BB-42BA-A934-EED45A5B29EE}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.DseStep.XmlNodeName.dll'
			SET @Description = 'ServiceBus.ServiceHost.DseStep.XmlNodeName.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="DseSteps"',
				'
<Resource name="ServiceBus.ServiceHost.DseStep.XmlNodeName.dll" id="513585e4-44fb-4f06-9db7-9e2c797fbacb">
	<FileName>ServiceBus.ServiceHost.DseStep.XmlNodeName.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.DseStep.XmlNodeName.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.DseStep.XmlNodeName.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlNodeName.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.DseStep.XmlNodeName.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestChannels.Wcf.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{4283AAD5-2E47-4E46-ACB2-25C4C6206CC9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.RequestChannels.Wcf.dll'
			SET @Description = 'ServiceBus.ServiceHost.RequestChannels.Wcf.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="RequestChannels"',
				'
<Resource name="ServiceBus.ServiceHost.RequestChannels.Wcf.dll" id="66bcc508-996f-49ff-ae71-4ef1d714832e">
	<FileName>ServiceBus.ServiceHost.RequestChannels.Wcf.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.RequestChannels.Wcf.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.RequestChannels.Wcf.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Resource name="ServiceBus.Metering.Common.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestChannels.Wcf.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestChannels.Wcf.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestChannels.Remoting.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{3FD5C274-8F83-4DC7-92DF-3D2EA7073B06}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.RequestChannels.Remoting.dll'
			SET @Description = 'ServiceBus.ServiceHost.RequestChannels.Remoting.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="RequestChannels"',
				'
<Resource name="ServiceBus.ServiceHost.RequestChannels.Remoting.dll" id="7abe25da-22d2-4d62-9842-34c113df2e33">
	<FileName>ServiceBus.ServiceHost.RequestChannels.Remoting.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.RequestChannels.Remoting.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.RequestChannels.Remoting.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Resource name="ServiceBus.Metering.Common.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestChannels.Remoting.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestChannels.Remoting.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{63B2057D-F7C6-4E77-8C27-7E5CB3D7F436}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll'
			SET @Description = 'ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceRequestManager"',
				'
<Resource name="ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll" id="459c6115-ea13-41dd-bfa8-88270da8751e">
	<FileName>ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.Metering.Common.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{AC4426D3-AB0E-4CAB-BB71-6C9E439A4688}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll'
			SET @Description = 'ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceRequestManager"',
				'
<Resource name="ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll" id="080d3c44-481e-4a93-acf1-0b744ae55783">
	<FileName>ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestClassifiers.Random.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{151DA6AE-A65E-49F7-8B73-D75939CB7D01}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.RequestClassifiers.Random.dll'
			SET @Description = 'ServiceBus.ServiceHost.RequestClassifiers.Random.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceRequestManager"',
				'
<Resource name="ServiceBus.ServiceHost.RequestClassifiers.Random.dll" id="cdf31d08-1fe0-4610-94a2-06f946a12385">
	<FileName>ServiceBus.ServiceHost.RequestClassifiers.Random.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.RequestClassifiers.Random.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.RequestClassifiers.Random.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestClassifiers.Random.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestClassifiers.Random.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{ACC0ECB1-B9B1-4F86-965A-5DEC79A8CB4A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll'
			SET @Description = 'ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceRequestManager"',
				'
<Resource name="ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll" id="d26c71ce-d011-4292-9cc9-a601b8bb65d0">
	<FileName>ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{03C5383A-F870-4957-9B91-935C82E2E092}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll'
			SET @Description = 'ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceRequestManager"',
				'
<Resource name="ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll" id="22d9962e-c43c-4a6e-b235-d5b47aeb342c">
	<FileName>ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{F2B55C04-5D60-4B67-9E9E-529D608EC8FF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll'
			SET @Description = 'ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceRequestManager"',
				'
<Resource name="ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll" id="bd4d4f6f-4bda-4bfd-bc0c-fc464377a94e">
	<FileName>ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Metering.Common.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.BusinessContext.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{F97742D4-1F01-482D-8A2D-A5858DEA479F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.Contexts.BusinessContext.dll'
			SET @Description = 'ServiceBus.ServiceHost.Contexts.BusinessContext.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Contexts"',
				'
<Resource name="ServiceBus.ServiceHost.Contexts.BusinessContext.dll" id="7909440a-bee6-45bd-8886-65ba3ec7d994">
	<FileName>ServiceBus.ServiceHost.Contexts.BusinessContext.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.Contexts.BusinessContext.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.Contexts.BusinessContext.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.BusinessContext.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.BusinessContext.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.LoggingContext.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{C47E8D83-E863-408C-A2D4-0B81DE3F4128}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.Contexts.LoggingContext.dll'
			SET @Description = 'ServiceBus.ServiceHost.Contexts.LoggingContext.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Contexts"',
				'
<Resource name="ServiceBus.ServiceHost.Contexts.LoggingContext.dll" id="a0ac3d43-222c-4504-91e6-3110541bc7d2">
	<FileName>ServiceBus.ServiceHost.Contexts.LoggingContext.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.Contexts.LoggingContext.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.Contexts.LoggingContext.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Logging.Common.dll" />
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" />
		<Resource name="Microsoft.Practices.EnterpriseLibrary.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.LoggingContext.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.LoggingContext.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{FD23D216-21FE-48EA-9365-21000A790FC1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll'
			SET @Description = 'ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Contexts"',
				'
<Resource name="ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll" id="5b3a3709-37e5-4665-85af-c70fe088c462">
	<FileName>ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.Utility.Configuration.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.MeteringContext.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{A48DEEE1-AA80-4A6A-AEBF-D8A001AAE3DC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.Contexts.MeteringContext.dll'
			SET @Description = 'ServiceBus.ServiceHost.Contexts.MeteringContext.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Contexts"',
				'
<Resource name="ServiceBus.ServiceHost.Contexts.MeteringContext.dll" id="3eb086d0-5dd1-4842-aa1f-cc645b706478">
	<FileName>ServiceBus.ServiceHost.Contexts.MeteringContext.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.Contexts.MeteringContext.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.Contexts.MeteringContext.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.MeteringContext.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.MeteringContext.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{10E0D20B-4D70-447C-B38D-D4581F54DC4D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll'
			SET @Description = 'ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Synchronization"',
				'
<Resource name="ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll" id="e4677c6d-0370-43e5-9f86-bcfe59055799">
	<FileName>ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.PersistenceProviders.Request.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{8CC270A0-1256-4880-AE98-59253EB81238}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.PersistenceProviders.Request.dll'
			SET @Description = 'ServiceBus.ServiceHost.PersistenceProviders.Request.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="PersistenceProviders"',
				'
<Resource name="ServiceBus.ServiceHost.PersistenceProviders.Request.dll" id="33eb9691-d68f-4ff7-b37f-fafdd2e37c48">
	<FileName>ServiceBus.ServiceHost.PersistenceProviders.Request.dll</FileName>
	<DestinationPath>ServiceBus.ServiceHost.PersistenceProviders.Request.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.ServiceHost.PersistenceProviders.Request.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Configuration.dll" />
		<Resource name="ServiceBus.Utility.Database.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.PersistenceProviders.Request.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.PersistenceProviders.Request.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{64F91A56-84E5-4A04-8276-45E0B343A7DC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll'
			SET @Description = 'ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll resource'
 
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="PersistenceProviders"',
				'
<Resource name="ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll" id="04e332d7-9548-44ff-ad36-62e440559017">
	<FileName>ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll</FileName>
	<DestinationPath>ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll</DestinationPath>
	<Bytes />
	<SourcePath>ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll</SourcePath>
	<Dependencies>
		<Resource name="ServiceBus.Metering.Interfaces.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Utility.Database.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that Listeners fragment is created for LOGGING_CONFIGURATION section
	--
	SET	@FragmentId = '{A34E9763-E209-4468-B4EC-DFE0A9119893}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Listeners'
			SET @Description = 'Logging configuration listeners'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING_CONFIGURATION,
				NULL,
				'
<listeners>
	<add fileName="[DSCS:MACRO:LOGGING.FILENAME.LISTENER]" header="- - - - - - - - - - - - - - - - - - - - -" footer="- - - - - - - - - - - - - - - - - - - - -" formatter="Text Formatter" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" traceOutputOptions="None" filter="All" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="FlatFile TraceListener" />
	<add source="Enterprise Library Logging" formatter="Text Formatter" log="Application" machineName="" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" traceOutputOptions="None" filter="All" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Formatted EventLog TraceListener" />
</listeners>
				'
			)
		END
		
	--
	-- Ensure that Listeners fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Listeners fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Formatters fragment is created for LOGGING_CONFIGURATION section
	--
	SET	@FragmentId = '{AD05810A-757A-4e70-A937-3C46E2A79055}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Formatters'
			SET @Description = 'Logging configuration formatters'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING_CONFIGURATION,
				NULL,
				'
<formatters>
	<add template="Timestamp: {timestamp}&#xD;&#xA;Message: {message}&#xD;&#xA;Category: {category}&#xD;&#xA;Priority: {priority}&#xD;&#xA;EventId: {eventid}&#xD;&#xA;Severity: {severity}&#xD;&#xA;Title:{title}&#xD;&#xA;Machine: {machine}&#xD;&#xA;Application Domain: {appDomain}&#xD;&#xA;Process Id: {processId}&#xD;&#xA;Process Name: {processName}&#xD;&#xA;Win32 Thread Id: {win32ThreadId}&#xD;&#xA;Thread Name: {threadName}&#xD;&#xA;Extended Properties:{newline}{dictionary({key} - {value}&#xD;&#xA;)}" type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Text Formatter" />
</formatters>
				'
			)
		END
		
	--
	-- Ensure that Formatters fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Formatters fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that LogFilters fragment is created for LOGGING_CONFIGURATION section
	--
	SET	@FragmentId = '{576EFDCD-8833-4b6b-ABD1-B80C1EB87227}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'LogFilters'
			SET @Description = 'Logging configuration log filters'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING_CONFIGURATION,
				NULL,
				'
<logFilters>
	<add enabled="true" type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="LogEnabled Filter" />
</logFilters>
				'
			)
		END
		
	--
	-- Ensure that LogFilters fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that LogFilters fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that CategorySources fragment is created for LOGGING_CONFIGURATION section
	--
	SET	@FragmentId = '{DB3BA5A6-C993-41eb-A2EF-68423AE5DD42}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'CategorySources'
			SET @Description = 'Logging configuration category sources'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING_CONFIGURATION,
				NULL,
				'
<categorySources>
	<add switchValue="All" name="General">
		<listeners>
			<add name="FlatFile TraceListener" />
			<add name="Formatted EventLog TraceListener" />
		</listeners>
	</add>
</categorySources>
				'
			)
		END
		
	--
	-- Ensure that CategorySources fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that CategorySources fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that SpecialSources fragment is created for LOGGING_CONFIGURATION section
	--
	SET	@FragmentId = '{5F924412-B136-48f5-BA35-87E667907FF7}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SpecialSources'
			SET @Description = 'Logging configuration special sources'
			
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING_CONFIGURATION,
				NULL,
				'
<specialSources>
	<allEvents switchValue="All" name="All Events">
		<listeners>
			<add name="Formatted EventLog TraceListener" />
		</listeners>
	</allEvents>
	<notProcessed switchValue="All" name="Unprocessed Category" />
	<errors switchValue="All" name="Logging Errors &amp; Warnings" />
</specialSources>
				'
			)
		END
		
	--
	-- Ensure that SpecialSources fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that SpecialSources fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created fragments and linked them to appropriate sections'
	COMMIT TRANSACTION
END

GO

--
-- ServiceBusConfiguration - Rename "Service Public Contract" node to "Service Contract"
--

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{87F0CBDC-AB33-45e1-83A4-780480CBD355}'
SET @ReferenceID = '16240'
SET @Author = 'Haris Priganica'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @Section = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	UPDATE Active_Fragments
	   SET Contents = REPLACE( CONVERT( varchar(max), Contents), 'ServicePublicContract', 'ServiceContract')
	 WHERE Contents.exist( './/Service/ServicePublicContract' ) = 1
	   AND SUBSTRING(RootXmlNode,1, 8)= 'Services'
	 
	UPDATE Active_Fragments
	   SET Contents = REPLACE( CONVERT( varchar(max), Contents), 'ServicePublicContract', 'ServiceContract')
	 WHERE Name = 'Controls' 
	   AND SectionId IN ( SELECT Id
							FROM Active_Sections
						   WHERE Name = 'ServiceBus.Administration.Configuration' )
	   AND Contents.exist( './Controls' ) = 1

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Renamed "Service Public Contract" node to "Service Contract"'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{D4F72549-EA20-4432-B2B7-F058C6C461C1}'
SET @TrackingID = '{1078F815-91E2-4608-8E30-6BB26C5534CD}'
SET @ReferenceID = '17435'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 4

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize PUBSUB_CONFIGURATION section ID constant
--
DECLARE	@PUBSUB_CONFIGURATION uniqueidentifier
SET		@PUBSUB_CONFIGURATION = '{4C93E0C6-A9A6-46ec-81CD-4AAE4F3608BB}'

--
-- Declare and initialize CONFIGURATION_SERVICE application (child group) id constant
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

--
-- 1. Create CONFIGURATION_SERVICE application as a child group of the root group
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
		
	--
	-- Ensure that CONFIGURATION_SERVICE application (child group) is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Groups WHERE Id = @CONFIGURATION_SERVICE AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus Configuration Service'
			SET @Description = 'ServiceBus Configuration Windows Service'
	
			INSERT INTO Active_Groups
			(
				Id,
				RootGroupId,
				Name,
				Description,
				GroupTemplateId,
				IsRootGroup
			)	
			VALUES
			(
				@CONFIGURATION_SERVICE,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				0
			)
		END
	
	--
	-- Ensure that CONFIGURATION_SERVICE application (child group) is linked to the root group
	-- 
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupGroups WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND ChildGroupId = @CONFIGURATION_SERVICE ) )
		INSERT INTO Active_GroupGroups
		(
			RootGroupId,
			GroupId,
			ChildGroupId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created CONFIGURATION_SERVICE application'
	COMMIT TRANSACTION
END

--
-- 2. Create filter for the CONFIGURATION_SERVICE application
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE	@FilterId uniqueidentifier

	--
	-- Ensure that SERVICEBUS.CONFIGURATION.SERVICE.EXE application filter for the root group is created
	--	
	SET	@FilterId = '{6F7ECC31-E86F-42e8-B835-DC9D9C5A0A27}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Filters WHERE Id = @FilterId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus Configuration Service'
			SET @Description =
				'This filter is matched by any version of ServiceBus Configuration Service application ' +
				'running (as service) on any machine under any account regardless of application path and config path.'
			
			INSERT INTO Active_Filters
			(
				Id,
				RootGroupId,
				Name,
				Description,
				MachineName,
				AppName,
				AppPath,
				AppConfigFilePath,
				AppVersion,
				AppUser
			)
			VALUES
			(
				@FilterId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				'SERVICEBUS.CONFIGURATION.SERVICE',
				NULL,
				NULL,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that the ServiceBus Configuration Service filter is linked to the application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFilters WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FilterId = @FilterId ) )
		INSERT INTO Active_GroupFilters
		(
			RootGroupId,
			GroupId,
			FilterId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FilterId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created filter for CONFIGURATION_SERVICE application'
	COMMIT TRANSACTION
END

--
-- 3. Create fragments and link them to appropriate section
--
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @FragmentId uniqueidentifier
	
	--
	-- Ensure that Topic.Any fragment is created for PUBSUB_CONFIGURATION section
	--
	SET	@FragmentId = '{E2896FFA-5ABB-4fbb-99EF-6217A13E9CD5}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Topic.Any'
			SET @Description = 'PubSubConfiguration topic'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@PUBSUB_CONFIGURATION,
				'Topics',
				'
<Topic>
	<Name>*</Name>
	<PublicationChannel>TestChannel</PublicationChannel>
	<SubscriptionChannel>TestChannel</SubscriptionChannel>
</Topic>
				'
			)
		END
	
	--
	-- Ensure that Topic.Any fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Channel.TestChannel fragment is created for PUBSUB_CONFIGURATION section
	--
	SET	@FragmentId = '{D4F33EB0-F6B1-494f-9F03-8DEEBF061FC8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Channel.TestChannel'
			SET @Description = 'PubSub client communication channel'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@PUBSUB_CONFIGURATION,
				'Channels',
				'
<Channel>
	<Name>TestChannel</Name>
	<Address>net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:PUBSUB.CONFIGURATION.WCF1.PORT]/test</Address>
	<ConnectionSettings>
		<InitialTimeout>60000</InitialTimeout>
		<RetryTimeout>0</RetryTimeout>
		<NumberOfRetries>0</NumberOfRetries>
	</ConnectionSettings>
	<BindingXml>
		<bindings>
			<customBinding>
				<binding name="CustomTcpBinding" sendTimeout="00:00:01">
					<reliableSession maxRetryCount="8" acknowledgementInterval="00:00:00.2000000" flowControlEnabled="true"
									 inactivityTimeout="00:10:00" maxPendingChannels="3000" maxTransferWindowSize="4096" ordered="true" />
					<binaryMessageEncoding maxReadPoolSize="64" maxWritePoolSize="32" maxSessionSize="4096">
						<readerQuotas maxDepth="64" maxStringContentLength="131072" maxArrayLength="10485760"
									  maxBytesPerRead="16384" maxNameTableCharCount="32768"/>
					</binaryMessageEncoding>
					<tcpTransport manualAddressing="false" maxBufferPoolSize="5242880" maxReceivedMessageSize="10485760"
								  connectionBufferSize="65536" hostNameComparisonMode="StrongWildcard"
								  channelInitializationTimeout="00:00:05" maxBufferSize="10485760"
								  maxPendingConnections="3000" maxOutputDelay="00:00:00.2000000"
								  maxPendingAccepts="3000" transferMode="Buffered" listenBacklog="3000"
								  portSharingEnabled="false" teredoEnabled="false">
						<connectionPoolSettings groupName="default" leaseTimeout="00:05:00" idleTimeout="00:02:00"
												maxOutboundConnectionsPerEndpoint="5000"/>
					</tcpTransport>
				</binding>
			</customBinding>
		</bindings>
	</BindingXml>
</Channel>
				'
			)
		END
	
	--
	-- Ensure that Channel.TestChannel fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Associated PubSubConfiguration fragments with CONFIGURATION_SERVICE application'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}'
SET @TrackingID = '{D4F72549-EA20-4432-B2B7-F058C6C461C1}'
SET @ReferenceID = '16823'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize section ID constant
--
DECLARE	@PUBSUB_CONFIGURATION uniqueidentifier
SET		@PUBSUB_CONFIGURATION = '{4C93E0C6-A9A6-46ec-81CD-4AAE4F3608BB}'

--
-- 1. Insert section
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that PUBSUB_CONFIGURATION section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @PUBSUB_CONFIGURATION AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'PubSubConfiguration'
			SET @Description = 'PubSub client configuration'
			
			INSERT INTO Active_Sections
			(
				Id,
				RootGroupId,
				SectionGroupName,
				Name,
				Description,
				HandlerType,
				ConfigFile,
				IsLegacySection,
				IsRemoteOnly,
				ConfigurationHelperType,
				SectionAttributes
			)
			VALUES
			(
				@PUBSUB_CONFIGURATION,
				@ROOT_GROUP_ID,
				NULL,
				@Name,
				@Description,
				'ServiceBus.PubSub.XmlConfigurationSectionHandler, ServiceBus.PubSub.Common', -- Handler type
				'App.config',
				1, -- Is legacy configuration?
				0,
				NULL,
				NULL
			)
		END

	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted PubSubConfiguration section'
	COMMIT TRANSACTION
END

--
-- 2. Insert macros for the section within the root group
--

--
-- Declare and initialize macro ID constants
--
DECLARE @PUBSUB_CONFIGURATION_WCF1_PORT uniqueidentifier
SET		@PUBSUB_CONFIGURATION_WCF1_PORT = '{1E64823A-B8AE-4f84-B895-17EF04703206}'

SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that PUBSUB.CONFIGURATION.WCF1.PORT macro is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @PUBSUB_CONFIGURATION_WCF1_PORT AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'PUBSUB.CONFIGURATION.WCF1.PORT'
			SET @Description = 'First WCF port of PubSub client'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@PUBSUB_CONFIGURATION_WCF1_PORT,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted PUBSUB.CONFIGURATION.WCF1.PORT macro'
	COMMIT TRANSACTION
END

--
-- 3. Assign values to the macros for the applications
--
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	--
	-- Ensure that value is assigned to macro PUBSUB.CONFIGURATION.WCF1.PORT for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @PUBSUB_CONFIGURATION_WCF1_PORT ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@PUBSUB_CONFIGURATION_WCF1_PORT,
			'47002'
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Assigned value to PUBSUB.CONFIGURATION.WCF1.PORT macro for the applications'
	COMMIT TRANSACTION
END

--
-- 4. Create fragments and link them to the section
--

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

SET @Section = 4
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @FragmentId uniqueidentifier
	
	--
	-- Ensure that Topic.Any fragment is created for PUBSUB_CONFIGURATION section
	--
	SET	@FragmentId = '{E2896FFA-5ABB-4fbb-99EF-6217A13E9CD5}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Topic.Any'
			SET @Description = 'PubSubConfiguration topic'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@PUBSUB_CONFIGURATION,
				'Topics',
				'
<Topic>
	<Name>*</Name>
	<PublicationChannel>TestChannel</PublicationChannel>
	<SubscriptionChannel>TestChannel</SubscriptionChannel>
</Topic>
				'
			)
		END
	
	--
	-- Ensure that Topic.Any fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Topic.Any fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)	
	
	--
	-- Ensure that Channel.TestChannel fragment is created for PUBSUB_CONFIGURATION section
	--
	SET	@FragmentId = '{D4F33EB0-F6B1-494f-9F03-8DEEBF061FC8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Channel.TestChannel'
			SET @Description = 'PubSub client communication channel'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@PUBSUB_CONFIGURATION,
				'Channels',
				'
<Channel>
	<Name>TestChannel</Name>
	<Address>net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:PUBSUB.CONFIGURATION.WCF1.PORT]/test</Address>
	<ConnectionSettings>
		<InitialTimeout>60000</InitialTimeout>
		<RetryTimeout>0</RetryTimeout>
		<NumberOfRetries>0</NumberOfRetries>
	</ConnectionSettings>
	<BindingXml>
		<bindings>
			<customBinding>
				<binding name="CustomTcpBinding" sendTimeout="00:00:01">
					<reliableSession maxRetryCount="8" acknowledgementInterval="00:00:00.2000000" flowControlEnabled="true"
									 inactivityTimeout="00:10:00" maxPendingChannels="3000" maxTransferWindowSize="4096" ordered="true" />
					<binaryMessageEncoding maxReadPoolSize="64" maxWritePoolSize="32" maxSessionSize="4096">
						<readerQuotas maxDepth="64" maxStringContentLength="131072" maxArrayLength="10485760"
									  maxBytesPerRead="16384" maxNameTableCharCount="32768"/>
					</binaryMessageEncoding>
					<tcpTransport manualAddressing="false" maxBufferPoolSize="5242880" maxReceivedMessageSize="10485760"
								  connectionBufferSize="65536" hostNameComparisonMode="StrongWildcard"
								  channelInitializationTimeout="00:00:05" maxBufferSize="10485760"
								  maxPendingConnections="3000" maxOutputDelay="00:00:00.2000000"
								  maxPendingAccepts="3000" transferMode="Buffered" listenBacklog="3000"
								  portSharingEnabled="false" teredoEnabled="false">
						<connectionPoolSettings groupName="default" leaseTimeout="00:05:00" idleTimeout="00:02:00"
												maxOutboundConnectionsPerEndpoint="5000"/>
					</tcpTransport>
				</binding>
			</customBinding>
		</bindings>
	</BindingXml>
</Channel>
				'
			)
		END
	
	--
	-- Ensure that Channel.TestChannel fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Channel.TestChannel fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created PubSubConfiguration fragments and linked them to the section'
	COMMIT TRANSACTION
END
GO

--
-- ServiceBusConfiguration - Delete "SourcePath" and "DestinationPath" from Resource fragment/configuration
--
DECLARE @TrackingID uniqueidentifier, 
		@ReferenceID nchar(10), 
		@Author nvarchar(50)
		
SET @TrackingID = '{8B4D7549-6D12-4ccb-8366-D6D15CDA07BB}'
SET @ReferenceID = '17484'
SET @Author = 'Semir Babajic'

DECLARE @SectionCompleted bit, 
		@SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @Section = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

IF DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	UPDATE dbo.Active_Fragments
	   SET Contents.modify('delete (/Resource/SourcePath)')
	 WHERE Contents.exist('/Resource/SourcePath') = 1

	UPDATE dbo.Active_Fragments
	   SET Contents.modify('delete (/Resource/DestinationPath)')
	 WHERE Contents.exist('/Resource/DestinationPath') = 1
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Removed SourcePath and DestinationPath from resource configuration'
	COMMIT TRANSACTION
END
GO


DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{bbcd35b2-0e19-4650-b4e4-883f39f1dccb}'
SET @ReferenceID = '18682'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE	@LOGGING uniqueidentifier
SET		@LOGGING = '{398F8990-F814-4e83-9EBC-B6AD9E1E8BB4}'

-- Macros
DECLARE	@SP_SYSTEM_LOCAL uniqueidentifier
SET		@SP_SYSTEM_LOCAL = '{F1CB781D-6056-4599-9C6C-D802A84D96BA}'

DECLARE @LOGGING_FILENAME_LISTENER uniqueidentifier
SET		@LOGGING_FILENAME_LISTENER = '{A9B6C965-F5BB-4132-9B33-D250EF19A702}'


--
-- 1. Create application (child group of the root group)
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
		
	--
	-- Ensure that COMMANDLINE_RUNTESTCASES application (child group) is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Groups WHERE Id = @COMMANDLINE_RUNTESTCASES AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus RunTestCase'
			SET @Description = 'CommandLine tool for running test cases'
	
			INSERT INTO Active_Groups
			(
				Id,
				RootGroupId,
				Name,
				Description,
				GroupTemplateId,
				IsRootGroup
			)	
			VALUES
			(
				@COMMANDLINE_RUNTESTCASES,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				0
			)
		END
	
	--
	-- Ensure that COMMANDLINE_RUNTESTCASES application (child group) is linked to the root group
	-- 
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupGroups WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND ChildGroupId = @COMMANDLINE_RUNTESTCASES ) )
		INSERT INTO Active_GroupGroups
		(
			RootGroupId,
			GroupId,
			ChildGroupId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created application ServiceBus RunTestCase'
	COMMIT TRANSACTION
END

--
-- 2. Create filter for the application
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE	@FilterId uniqueidentifier
		
	--
	-- Ensure that SERVICEBUS.COMMANDLINE.RUNTESTCASE.EXE application filter for the root group is created
	--	
	SET	@FilterId = '{27a1cf0e-d875-4b96-93a0-6f5a711cda26}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Filters WHERE Id = @FilterId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus RunTestCase'
			SET @Description =
				'This filter is matched by any version of ServiceBus RunTestCase application ' +
				'running (as service) on any machine under any account regardless of application path and config path.'
			
			INSERT INTO Active_Filters
			(
				Id,
				RootGroupId,
				Name,
				Description,
				MachineName,
				AppName,
				AppPath,
				AppConfigFilePath,
				AppVersion,
				AppUser
			)
			VALUES
			(
				@FilterId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				'SERVICEBUS.RUNTESTCASE',
				NULL,
				NULL,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that the ServiceBus ServiceHost Service filter is linked to the application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFilters WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FilterId = @FilterId ) )
		INSERT INTO Active_GroupFilters
		(
			RootGroupId,
			GroupId,
			FilterId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FilterId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created filter for application ServiceBus RunTestCase'
	COMMIT TRANSACTION
END

--
-- 3. Assign values to the macros for the applications
--
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	--
	-- Ensure that value is assigned to macro SP_SYSTEM_LOCAL for ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND MacroId = @SP_SYSTEM_LOCAL ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@SP_SYSTEM_LOCAL,
			'False'
		)
	
	--
	-- Ensure that value is assigned to macro LOGGING_FILENAME_LISTENER for ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND MacroId = @LOGGING_FILENAME_LISTENER ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@LOGGING_FILENAME_LISTENER,
			'C:\ServiceBus\Logging\RunTestCases.txt'
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Assigned values to the macros for application ServiceBus RunTestCase'
	COMMIT TRANSACTION
END

--
-- 4. Link all fragments to new Application
--
SET @Section = 4
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	DECLARE @FragmentId uniqueidentifier
	
	--
	-- Ensure that CL.Properties fragment is created for LOGGING section
	--
	SET	@FragmentId = '{413fc7c6-71ee-4c15-be07-243871d3d45f}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'CL.Properties'
			SET @Description = 'Logging properties for RunTestCase Tool'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING,
				NULL,
				'
<Properties>
	<Property name="Level">Warning</Property>
	<!--
		<Property name="MachineName">Dev</Property>
		<Property name="ApplicationName">TestApp</Property>
	-->
	<Property name="AttributeCodeSize">80</Property>
	<Property name="AttributeValueSize">250</Property>
	<Property name="CommandTimeout">250</Property>
</Properties>
				'
			)
		END
		
	--
	-- Ensure that AC.Properties fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)

	--
	-- Ensure that AC.Targets fragment is created for LOGGING section
	--
	SET	@FragmentId = '{64b783fe-3d0d-486f-a37d-7805bd638502}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'CL.Targets'
			SET @Description = 'Logging targets for RunTestCase Tool'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING,
				NULL,
				'
<Targets>
	<Target name="ServiceHost">
		<Assembly>ServiceBus.Logging.Targets.ServiceHost.dll,ServiceBus.Logging.ServiceHostTarget</Assembly>
		<Properties>
			<LogInternalException>False</LogInternalException>
		</Properties>
		<Filter>
			<LogLevel>
				<Value>Warning</Value>
				<Match>GreaterThenOrEqual</Match>
			</LogLevel>
		</Filter>
		<SubTargets>
			<Target name="File">
				<Assembly>ServiceBus.Logging.Targets.File.dll,ServiceBus.Logging.FileTarget</Assembly>
				<Properties>
					<Property name="DirectoryPath">[DSCS:MACRO:LOGGING.FILETARGET.FOLDER]</Property>
					<Property name="MaxFileSize">10240</Property>
				</Properties>
			</Target>
		</SubTargets>
	</Target>
</Targets>
				'
			)
		END
		
	--
	-- Ensure that AC.Targets fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	--
	-- Ensure that all other fragments are linked to new application
	--
	INSERT INTO Active_GroupFragments (RootGroupId, GroupId, FragmentId)
		SELECT @ROOT_GROUP_ID, @COMMANDLINE_RUNTESTCASES, agf.FragmentId FROM Active_GroupFragments agf
		JOIN Active_Fragments ON agf.FragmentId = Id
		WHERE agf.GroupId = @ADMINISTRATIVE_CONSOLE
		AND SectionId NOT IN ( @LOGGING, @ADMINISTRATION_CONFIGURATION )
		AND NOT EXISTS (
			select * from Active_GroupFragments agf2
			where agf.FragmentId = agf2.FragmentId
			and agf2.GroupId = @COMMANDLINE_RUNTESTCASES )
				
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Linked fragments to application ServiceBus RunTestCase'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{1078F815-91E2-4608-8E30-6BB26C5534CD}' -- PreviousReferenceID: 17435
SET @TrackingID = '{0600CFD4-76F2-4e7a-82F7-2971DAEA0309}'
SET @ReferenceID = '18280'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 2	-- CONFIGURATION_SERVICE application created
							-- Filter for the CONFIGURATION_SERVICE application created

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize section ID constant(s)
--
DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4f38-B4ED-5C917010C756}'

--
-- 1. Insert the section
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that unityConfiguration section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @UNITY_CONFIGURATION AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'unityConfiguration'
			SET @Description = 'unityConfiguration section'
			
			INSERT INTO Active_Sections
			(
				Id,
				RootGroupId,
				SectionGroupName,
				Name,
				Description,
				HandlerType,
				ConfigFile,
				IsLegacySection,
				IsRemoteOnly,
				ConfigurationHelperType,
				SectionAttributes
			)
			VALUES
			(
				@UNITY_CONFIGURATION,
				@ROOT_GROUP_ID,
				NULL,
				@Name,
				@Description,
				'Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration', -- Handler type
				'App.config',
				1, -- Is legacy configuration?
				0,
				NULL,
				NULL
			)
		END
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted unityConfiguration section'
	
	COMMIT TRANSACTION
END

--
-- Declare and initialize CONFIGURATION_SERVICE application (child group) id constant
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

--
-- 2. Create fragment(s) and link it/them to appropriate section
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @FragmentId uniqueidentifier
	
	--
	-- Ensure that 'UnityConfiguration.TypeAliases.Singleton' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{B5473612-5815-486f-B19E-B3DB7F4C8C7C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.TypeAliases.Singleton'
			SET @Description = 'Type alias for container controlled lifetime manager'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'typeAliases',
				'<typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.TypeAliases.Singleton' fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that 'UnityConfiguration.TypeAliases.External' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{FB9ECE1C-1303-4d86-B784-90D4ABAA9E28}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.TypeAliases.External'
			SET @Description = 'Type alias for externally controlled lifetime manager'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'typeAliases',
				'<typeAlias alias="external" type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager, Microsoft.Practices.Unity" />'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.TypeAliases.External' fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
	
	-- ServiceBus.PubSub types --
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.PubSub' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{8FEB4E78-4F94-48b6-B197-6D220080B2AC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.IPubSub'
			SET @Description = 'Type mapping used for resolution of ServiceBus.PubSub.IPubSub instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.PubSub.IPubSub, ServiceBus.PubSub.Interfaces"
	  mapTo="ServiceBus.PubSub.PubSub, ServiceBus.PubSub.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.PubSub' fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
	

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created fragment(s) and linked it/them to appropriate section'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{0600CFD4-76F2-4e7a-82F7-2971DAEA0309}' -- PreviousReferenceID: 18280
SET @TrackingID = '{09304203-E6D8-4032-8FAE-126A877E8FAA}'
SET @ReferenceID = '18279'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1	-- UNITY_CONFIGURATION section created

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize section ID constant(s)
--
DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4f38-B4ED-5C917010C756}'

--
-- Declare and initialize SERVICEHOST_SERVICE application (child group) id constant
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

--
-- 1. Create fragments and link them to appropriate section
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @FragmentId uniqueidentifier
	
	--
	-- Ensure that 'UnityConfiguration.TypeAliases.Singleton' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{B5473612-5815-486f-B19E-B3DB7F4C8C7C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.TypeAliases.Singleton'
			SET @Description = 'Type alias for container controlled lifetime manager'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'typeAliases',
				'<typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.TypeAliases.Singleton' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that 'UnityConfiguration.TypeAliases.External' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{FB9ECE1C-1303-4d86-B784-90D4ABAA9E28}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.TypeAliases.External'
			SET @Description = 'Type alias for externally controlled lifetime manager'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'typeAliases',
				'<typeAlias alias="external" type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager, Microsoft.Practices.Unity" />'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.TypeAliases.External' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	-- ServiceBus.PubSub types --
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.PubSub' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{8FEB4E78-4F94-48b6-B197-6D220080B2AC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.IPubSub'
			SET @Description = 'Type mapping used for resolution of ServiceBus.PubSub.IPubSub instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.PubSub.IPubSub, ServiceBus.PubSub.Interfaces"
	  mapTo="ServiceBus.PubSub.PubSub, ServiceBus.PubSub.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.PubSub' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	-- ServiceBus.ServiceHost types --
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IStartStop' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{1785CDA0-D9AD-4f6a-877E-1D50345B06A8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IStartStop'
			SET @Description = 'Type mapping used for resolution of ServiceBus.ServiceHost.IStartStop instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.ServiceHost.IStartStop, ServiceBus.ServiceHost.Interfaces"
	  mapTo="ServiceBus.ServiceHost.ServiceHost, ServiceBus.ServiceHost.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IStartStop' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHost' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{68094920-CE0E-4457-B6C9-43485BBBE464}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHost'
			SET @Description = 'Type mapping used for resolution of ServiceBus.ServiceHost.IServiceHost instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.ServiceHost.IServiceHost, ServiceBus.ServiceHost.Interfaces"
	  mapTo="ServiceBus.ServiceHost.ServiceHost, ServiceBus.ServiceHost.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHost' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRequestFactory' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{C5D31042-58E6-415b-B086-AB01EC9AAC09}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRequestFactory'
			SET @Description = 'Type mapping used for resolution of ServiceBus.ServiceHost.IServiceRequestFactory instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.ServiceHost.IServiceRequestFactory, ServiceBus.ServiceHost.Interfaces"
	  mapTo="ServiceBus.ServiceHost.ServiceRequestFactory, ServiceBus.ServiceHost.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRequestFactory' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IArgumentHelpersFactory' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{428BA1A7-DF55-4044-A517-C0418500825B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IArgumentHelpersFactory'
			SET @Description = 'Type mapping used for resolution of ServiceBus.ServiceHost.IArgumentHelpersFactory instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.ServiceHost.IArgumentHelpersFactory, ServiceBus.ServiceHost.Interfaces"
	  mapTo="ServiceBus.ServiceHost.ArgumentHelpersFactory, ServiceBus.ServiceHost.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IArgumentHelpersFactory' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHostExceptionFactory' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{12489CDC-D82F-44e7-9432-8DB9EE945E7D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHostExceptionFactory'
			SET @Description = 'Type mapping used for resolution of ServiceBus.ServiceHost.IServiceHostExceptionFactory instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.ServiceHost.IServiceHostExceptionFactory, ServiceBus.ServiceHost.Interfaces"
	  mapTo="ServiceBus.ServiceHost.ServiceHostExceptionFactory, ServiceBus.ServiceHost.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHostExceptionFactory' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceResponseFactory' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{BFC7ADE6-6BD8-43e7-B935-35828D317D39}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceResponseFactory'
			SET @Description = 'Type mapping used for resolution of ServiceBus.ServiceHost.IServiceResponseFactory instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.ServiceHost.IServiceResponseFactory, ServiceBus.ServiceHost.Interfaces"
	  mapTo="ServiceBus.ServiceHost.ServiceResponseFactory, ServiceBus.ServiceHost.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceResponseFactory' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceErrorFactory' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{4D07BB22-459A-4e39-AB52-AB980342E8C5}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceErrorFactory'
			SET @Description = 'Type mapping used for resolution of ServiceBus.ServiceHost.IServiceErrorFactory instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.ServiceHost.IServiceErrorFactory, ServiceBus.ServiceHost.Interfaces"
	  mapTo="ServiceBus.ServiceHost.ServiceErrorFactory, ServiceBus.ServiceHost.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceErrorFactory' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IPersistenceProviderManager' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{57F2D383-EF54-4b2f-A9A8-290FA7722793}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IPersistenceProviderManager'
			SET @Description = 'Type mapping used for resolution of ServiceBus.ServiceHost.IPersistenceProviderManager instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.ServiceHost.IPersistenceProviderManager, ServiceBus.ServiceHost.Interfaces"
	  mapTo="ServiceBus.ServiceHost.PersistenceProviderManager, ServiceBus.ServiceHost.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IPersistenceProviderManager' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRouteFactory' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{D0132955-C23F-4992-9D8D-73F2C3D7B514}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRouteFactory'
			SET @Description = 'Type mapping used for resolution of ServiceBus.ServiceHost.IServiceRouteFactory instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.ServiceHost.IServiceRouteFactory, ServiceBus.ServiceHost.Interfaces"
	  mapTo="ServiceBus.ServiceHost.ServiceRouteFactory, ServiceBus.ServiceHost.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRouteFactory' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	-- ServiceBus.Logging types --
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogging' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{4FA3B666-1953-429f-A8BC-B74F411FE98E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogging'
			SET @Description = 'Type mapping used for resolution of ServiceBus.Logging.ILogging instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.Logging.ILogging, ServiceBus.Logging.Interfaces"
	  mapTo="ServiceBus.Logging.Logging, ServiceBus.Logging.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogging' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryFactory' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{9C406AAD-FC20-4a17-A44E-AAF76877412F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryFactory'
			SET @Description = 'Type mapping used for resolution of ServiceBus.Logging.ILogEntryFactory instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.Logging.ILogEntryFactory, ServiceBus.Logging.Interfaces"
	  mapTo="ServiceBus.Logging.LogEntryFactory, ServiceBus.Logging.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryFactory' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeFactory' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{F2D86F6E-427B-4357-A845-ABCF27BFC0AD}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeFactory'
			SET @Description = 'Type mapping used for resolution of ServiceBus.Logging.ILogEntryAttributeFactory instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.Logging.ILogEntryAttributeFactory, ServiceBus.Logging.Interfaces"
	  mapTo="ServiceBus.Logging.LogEntryAttributeFactory, ServiceBus.Logging.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeFactory' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeCollectionFactory' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{D324DD1F-77A4-422f-BBF4-F110F8AE10BA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeCollectionFactory'
			SET @Description = 'Type mapping used for resolution of ServiceBus.Logging.ILogEntryAttributeCollectionFactory instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.Logging.ILogEntryAttributeCollectionFactory, ServiceBus.Logging.Interfaces"
	  mapTo="ServiceBus.Logging.LogEntryAttributeCollectionFactory, ServiceBus.Logging.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeCollectionFactory' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	-- ServiceBus.Metering types --
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringStartStop' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{8CD2573A-E22E-4721-B9EF-E4C4E754F28E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringStartStop'
			SET @Description = 'Type mapping used for resolution of ServiceBus.Metering.IMeteringStartStop instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.Metering.IMeteringStartStop, ServiceBus.Metering.Interfaces"
	  mapTo="ServiceBus.Metering.Metering, ServiceBus.Metering.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringStartStop' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMetering' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{1D5B0989-C4D3-40d7-AE6E-D012345E46E2}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMetering'
			SET @Description = 'Type mapping used for resolution of ServiceBus.Metering.IMetering instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.Metering.IMetering, ServiceBus.Metering.Interfaces"
	  mapTo="ServiceBus.Metering.Metering, ServiceBus.Metering.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMetering' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringContext' fragment is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{D507E52D-C479-429c-B8AD-844206D75D81}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringContext'
			SET @Description = 'Type mapping used for resolution of ServiceBus.Metering.IMeteringContext instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.Metering.IMeteringContext, ServiceBus.Metering.Interfaces"
	  mapTo="ServiceBus.Metering.MeteringContext, ServiceBus.Metering.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringContext' fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created fragments and linked them to appropriate section'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID1 uniqueidentifier
DECLARE @PreviousTrackingID2 uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID1 = '{09304203-E6D8-4032-8FAE-126A877E8FAA}' -- PreviousReferenceID: 18279
SET @PreviousTrackingID2 = '{bbcd35b2-0e19-4650-b4e4-883f39f1dccb}' -- PreviousReferenceID: 18682
SET @TrackingID = '{620F6DE3-381B-4e70-A5B6-BBBDDDBBE1E6}'
SET @ReferenceID = '18283'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection1 int
DECLARE @PreviousSection2 int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection1 = 1	-- Fragments for UNITY_CONFIGURATION section created
SET @PreviousSection2 = 2	-- COMMANDLINE_RUNTESTCASES application created
							-- Filter for COMMANDLINE_RUNTESTCASES application created

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize section ID constant(s)
--
DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4f38-B4ED-5C917010C756}'

--
-- Declare and initialize ADMINISTRATIVE_CONSOLE and COMMANDLINE_RUNTESTCASES application (child group) id constants
--
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

--
-- 1. Create fragments and link them to appropriate section
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID1, @PreviousSection1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @PreviousTrackingID2, @PreviousSection2 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @FragmentId uniqueidentifier
	
	--
	-- Set ID of 'UnityConfiguration.TypeAliases.Singleton' fragment
	--
	SET	@FragmentId = '{B5473612-5815-486f-B19E-B3DB7F4C8C7C}'

	--
	-- Ensure that 'UnityConfiguration.TypeAliases.Singleton' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.TypeAliases.Singleton' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	--
	-- Set ID of 'UnityConfiguration.TypeAliases.External' fragment
	--
	SET	@FragmentId = '{FB9ECE1C-1303-4d86-B784-90D4ABAA9E28}'

	--
	-- Ensure that 'UnityConfiguration.TypeAliases.External' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

		
	--
	-- Ensure that 'UnityConfiguration.TypeAliases.External' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	-- ServiceBus.PubSub types --
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.PubSub' fragment
	--
	SET	@FragmentId = '{8FEB4E78-4F94-48b6-B197-6D220080B2AC}'
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.PubSub' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.PubSub' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	-- ServiceBus.ServiceHost types --
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IStartStop' fragment
	--
	SET	@FragmentId = '{1785CDA0-D9AD-4f6a-877E-1D50345B06A8}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IStartStop' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IStartStop' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHost' fragment
	--
	SET	@FragmentId = '{68094920-CE0E-4457-B6C9-43485BBBE464}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHost' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHost' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRequestFactory' fragment
	--
	SET	@FragmentId = '{C5D31042-58E6-415b-B086-AB01EC9AAC09}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRequestFactory' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRequestFactory' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IArgumentHelpersFactory' fragment
	--
	SET	@FragmentId = '{428BA1A7-DF55-4044-A517-C0418500825B}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IArgumentHelpersFactory' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IArgumentHelpersFactory' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHostExceptionFactory' fragment
	--
	SET	@FragmentId = '{12489CDC-D82F-44e7-9432-8DB9EE945E7D}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHostExceptionFactory' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHostExceptionFactory' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceResponseFactory' fragment
	--
	SET	@FragmentId = '{BFC7ADE6-6BD8-43e7-B935-35828D317D39}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceResponseFactory' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceResponseFactory' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceErrorFactory' fragment
	--
	SET	@FragmentId = '{4D07BB22-459A-4e39-AB52-AB980342E8C5}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceErrorFactory' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceErrorFactory' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IPersistenceProviderManager' fragment
	--
	SET	@FragmentId = '{57F2D383-EF54-4b2f-A9A8-290FA7722793}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IPersistenceProviderManager' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IPersistenceProviderManager' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRouteFactory' fragment
	--
	SET	@FragmentId = '{D0132955-C23F-4992-9D8D-73F2C3D7B514}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRouteFactory' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRouteFactory' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	-- ServiceBus.Logging types --
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogging' fragment
	--
	SET	@FragmentId = '{4FA3B666-1953-429f-A8BC-B74F411FE98E}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogging' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogging' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryFactory' fragment
	--
	SET	@FragmentId = '{9C406AAD-FC20-4a17-A44E-AAF76877412F}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryFactory' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryFactory' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeFactory' fragment
	--
	SET	@FragmentId = '{F2D86F6E-427B-4357-A845-ABCF27BFC0AD}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeFactory' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeFactory' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeCollectionFactory' fragment
	--
	SET	@FragmentId = '{D324DD1F-77A4-422f-BBF4-F110F8AE10BA}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeCollectionFactory' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeCollectionFactory' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	-- ServiceBus.Metering types --
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringStartStop' fragment
	--
	SET	@FragmentId = '{8CD2573A-E22E-4721-B9EF-E4C4E754F28E}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringStartStop' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringStartStop' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMetering' fragment
	--
	SET	@FragmentId = '{1D5B0989-C4D3-40d7-AE6E-D012345E46E2}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMetering' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMetering' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	--
	-- Set ID of 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringContext' fragment
	--
	SET	@FragmentId = '{D507E52D-C479-429c-B8AD-844206D75D81}'
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringContext' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringContext' fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Associated fragments with ADMINISTRATIVE_CONSOLE and COMMANDLINE_RUNTESTCASES applications for UNITY_CONFIGURATION section'
	COMMIT TRANSACTION
END

--
-- Declare and initialize APPSETTINGS and APPLICATIONSETTINGS section ID constants
--
DECLARE @APP_SETTINGS uniqueidentifier
SET		@APP_SETTINGS = '{6B76A284-E8F4-47ab-83FB-4C984BC4EE13}'

DECLARE @ADMINISTRATION_PROPERTIES_SETTINGS uniqueidentifier
SET		@ADMINISTRATION_PROPERTIES_SETTINGS = '{048560B6-CBF2-43ef-B5BB-1348ABDFDE94}'

--
-- 2. Insert sections
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that appSettings section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @APP_SETTINGS AND @ROOT_GROUP_ID = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'appSettings'
			SET @Description = 'appSettings section'
			
			INSERT INTO Active_Sections
			(
				Id,
				RootGroupId,
				SectionGroupName,
				Name,
				Description,
				HandlerType,
				ConfigFile,
				IsLegacySection,
				IsRemoteOnly,
				ConfigurationHelperType,
				SectionAttributes
			)
			VALUES
			(
				@APP_SETTINGS,
				@ROOT_GROUP_ID,
				NULL,
				@Name,
				@Description,
				'System.Configuration.AppSettingsSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a', -- Handler type
				'App.config',
				1, -- Is legacy configuration?
				0,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that ServiceBus.Administration.Properties.Settings section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @ADMINISTRATION_PROPERTIES_SETTINGS AND @ROOT_GROUP_ID = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus.Administration.Properties.Settings'
			SET @Description = 'ServiceBus.Administration.Properties.Settings section'
			
			INSERT INTO Active_Sections
			(
				Id,
				RootGroupId,
				SectionGroupName,
				Name,
				Description,
				HandlerType,
				ConfigFile,
				IsLegacySection,
				IsRemoteOnly,
				ConfigurationHelperType,
				SectionAttributes
			)
			VALUES
			(
				@ADMINISTRATION_PROPERTIES_SETTINGS,
				@ROOT_GROUP_ID,
				'applicationSettings',
				@Name,
				@Description,
				'System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089', -- Handler type
				'App.config',
				1, -- Is legacy configuration?
				0,
				NULL,
				NULL
			)
		END
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted appSettings and ServiceBus.Administration.Properties.Settings sections'
	COMMIT TRANSACTION
END

--
-- 3. Create fragments and link them to appropriate section
--
SET @Section = 3

IF	DataFix.SectionState( @TrackingID, @Section - 1) = @SectionCompleted
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- APP_SETTINGS section --
	--
	-- Ensure that 'AppSettings.ServiceBus.Administration.ModuleSelector.HiddenModules' fragment is created for APP_SETTINGS section
	--
	SET	@FragmentId = '{2AC74BCB-67C0-4a7a-B220-96206042FCC0}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'AppSettings.ServiceBus.Administration.ModuleSelector.HiddenModules'
			SET @Description = 'List of modules that should not be shown in Administrative Console tools menu'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@APP_SETTINGS,
				NULL,
				'<add key="ServiceBus.Administration.ModuleSelector.HiddenModules" value="Test - Bar|Baz|Foo|TreeDataStructureModule|ContractResolverModuleMVVM|ShellControl|MeteringModule" />'
			)
		END
		
	--
	-- Ensure that 'AppSettings.ServiceBus.Administration.ModuleSelector.HiddenModules' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'AppSettings.InitialModule' fragment is created for APP_SETTINGS section
	--
	SET	@FragmentId = '{0FA352E4-C674-404e-8A7B-9F0C6539C29B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'AppSettings.InitialModule'
			SET @Description = 'Name of module to be shown at Administrative Console startup'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@APP_SETTINGS,
				NULL,
				'<add key="InitialModule" value="ServiceInvokeModule"/>'
			)
		END
		
	--
	-- Ensure that 'AppSettings.InitialModule' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that 'AppSettings.UseSplashScreen' fragment is created for APP_SETTINGS section
	--
	SET	@FragmentId = '{CE99339B-5E62-4300-988F-74F9B9D5D0E4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'AppSettings.UseSplashScreen'
			SET @Description = 'Indicates whether to show splash screen during the Administrative Console startup'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@APP_SETTINGS,
				NULL,
				'<add key="UseSplashScreen" value="False"/>'
			)
		END
		
	--
	-- Ensure that 'AppSettings.UseSplashScreen' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
			
	-- ServiceBus.Administration.Properties.Settings section -
	--
	-- Ensure that 'ServiceBus.Administration.Properties.Settings.ModuleDirectory' fragment is created for ADMINISTRATION_PROPERTIES_SETTINGS section
	--
	SET	@FragmentId = '{22E1566A-3661-4644-9BCA-AF948069CBEE}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus.Administration.Properties.Settings.ModuleDirectory'
			SET @Description = 'The directory to search for modules to be loaded into Administrative Console'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_PROPERTIES_SETTINGS,
				NULL,
				'
<setting name="ModuleDirectory" serializeAs="String">
	<value>.\Modules</value>
</setting>
				'
			)
		END
		
	--
	-- Ensure that 'ServiceBus.Administration.Properties.Settings.ModuleDirectory' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created fragments and associated them with appSettings and ServiceBus.Administration.Properties.Settings sections'
	COMMIT TRANSACTION
END

GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{AE95B23B-443C-4e84-861C-BC6EB8857154}'
SET @ReferenceID = '18338'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)
DECLARE @FragmentId uniqueidentifier

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

--
-- 1. Insert StepResourceObserver data
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	SET	@FragmentId = '{B9386ADE-7584-4517-B44C-5A54DBD1F167}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.Microsoft.Ccr.Core.dll'
			SET @Description = 'StepResourceObserver.Resource.Microsoft.Ccr.Core.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="Microsoft.Ccr.Core.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{9CABCBAA-5A1F-4C21-ACAC-A26CACC1FEC2}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.Microsoft.Practices.EnterpriseLibrary.Common.dll'
			SET @Description = 'StepResourceObserver.Resource.Microsoft.Practices.EnterpriseLibrary.Common.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="Microsoft.Practices.EnterpriseLibrary.Common.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{00ACE0CB-1DAB-4C22-ACA7-28935EA7077F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.Microsoft.Practices.EnterpriseLibrary.Logging.dll'
			SET @Description = 'StepResourceObserver.Resource.Microsoft.Practices.EnterpriseLibrary.Logging.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="Microsoft.Practices.EnterpriseLibrary.Logging.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{69B68A27-4925-41DE-BBC0-7DCBCFE248D0}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.Microsoft.Practices.ObjectBuilder2.dll'
			SET @Description = 'StepResourceObserver.Resource.Microsoft.Practices.ObjectBuilder2.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="Microsoft.Practices.ObjectBuilder2.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{9E76352D-912B-4D96-A2DC-13C0B535F78D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.Microsoft.Practices.Unity.Configuration.dll'
			SET @Description = 'StepResourceObserver.Resource.Microsoft.Practices.Unity.Configuration.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="Microsoft.Practices.Unity.Configuration.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{799102AE-39C9-4963-917F-65583FE7EE4B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.Microsoft.Practices.Unity.dll'
			SET @Description = 'StepResourceObserver.Resource.Microsoft.Practices.Unity.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="Microsoft.Practices.Unity.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{DE7C97EE-E530-4EEA-821A-F4BC526D0A10}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{2F4E2FB6-DBCC-4B7C-B04A-87CAEB9083DD}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.Interop.MSMQ.dll'
			SET @Description = 'StepResourceObserver.Resource.Interop.MSMQ.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="Interop.MSMQ.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{0A665C24-D762-4721-8DDA-931AA50D41A3}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Logging.Common.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Logging.Common.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Logging.Common.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{9601C373-DC22-4745-9B65-D1E16637AD96}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Logging.Interfaces.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Logging.Interfaces.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Logging.Interfaces.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{4840CEA0-7FDB-4AED-A4FF-9565A89B970E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Logging.LoggingManagement.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Logging.LoggingManagement.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Logging.LoggingManagement.dll"><Step id="ServiceBus.Logging.GetPageStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.Logging.LoggingManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">lastLogEntryTime</Property><Property name="defaultValue"/><Property name="description">Filtering by last log entry time.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">pagingDirection</Property><Property name="defaultValue"/><Property name="description">Paging direction 0 for next 1 for preview</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PageResult</Property><Property name="defaultValue"/><Property name="description">Dataset used to show log viewer page.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">lastLogEntryId</Property><Property name="defaultValue"/><Property name="description">Filtering by last log entry Id.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Page step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves dataset that be used to show log entries.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">pageSize</Property><Property name="defaultValue">100</Property><Property name="description">Size of page.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">filter</Property><Property name="defaultValue"/><Property name="description">Filtering by search pattern criteria.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{F7893FAB-BCA0-4E56-A82F-A3023D32924C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Logging.LogStep.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Logging.LogStep.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Logging.LogStep.dll"><Step id="ServiceBus.Logging.LogStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.Logging.LogStep.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Invokes create log entry method.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Log step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">LogEntryCollection</Property><Property name="defaultValue"/><Property name="description">Collection of log entries.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{725ADE62-8DFC-4704-80AE-98FFF9773D41}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Logging.PersistenceProviders.LogEntry.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Logging.PersistenceProviders.LogEntry.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Logging.PersistenceProviders.LogEntry.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{EADD8DBE-C0CB-436C-B6CA-1CF27386E8AF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Logging.Targets.BlackHole.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Logging.Targets.BlackHole.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Logging.Targets.BlackHole.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{6946C03A-A4DD-4326-AD10-C17538745068}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Logging.Targets.Database.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Logging.Targets.Database.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Logging.Targets.Database.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{5E7D3B0F-F7C7-428F-BD97-2ABC1A69AFF9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Logging.Targets.File.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Logging.Targets.File.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Logging.Targets.File.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{C0FEB050-2FEE-4D77-8AD2-3248E9CDF09A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Logging.Targets.MSMQ.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Logging.Targets.MSMQ.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Logging.Targets.MSMQ.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{0755C458-0053-4D08-9214-4B898E45BD4C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Configuration.Client.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Configuration.Client.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Configuration.Client.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{50619F25-3DCC-4202-9061-8C804AB7D4A1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Configuration.Common.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Configuration.Common.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Configuration.Common.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{B02A06C0-9A8F-49D7-A5EE-3244E7539E1C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DSE.Common.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DSE.Common.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DSE.Common.dll"><Step id="ServiceBus.ServiceHost.DSE.InvokeServiceStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DSE.Common.dll</ResourceId><Attributes><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ForceSynchronous</Property><Property name="defaultValue">True</Property><Property name="description">Input: Does this step always wait for the service to complete?</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">WaitForServiceResponse</Property><Property name="defaultValue">True</Property><Property name="description">Input (Optional): Does this step wait for the ServiceResponse? If False, service is invoked and forgotten.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Invoke Service Step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Timeout</Property><Property name="defaultValue">0.00:00:00.000</Property><Property name="description">Input: How long to wait for the service to complete?</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Inputs</Property><Property name="defaultValue"/><Property name="description">Input: Dictionary to contain values for service inputs of invoked service ({ServiceInputName, ServiceInputValue} pair(s))</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Results</Property><Property name="defaultValue"/><Property name="description">Output: Dictionary to contain service results of invoked service ({ServiceResultName, ServiceResultValue} pair(s))</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">OutputAttributes</Property><Property name="defaultValue"/><Property name="description">Output: Dictionary to contain all attributes returned in service response</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">RequestID</Property><Property name="defaultValue"/><Property name="description">Output: The identification of service request</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">PendingOrActive</Property><Property name="resultDescription">The service returned PendingOrActive response status.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">Suspended</Property><Property name="resultDescription">The service returned Suspended response status.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Invokes service specified by ServiceName argument</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceName</Property><Property name="defaultValue"/><Property name="description">Input: The name of the service to invoke</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.DSE.ServiceInvokeStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DSE.Common.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceArguments</Property><Property name="defaultValue"/><Property name="description">Arguments for service invocation.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceName</Property><Property name="defaultValue"/><Property name="description">Name of the service that is being invoked.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Service Invoke step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceResults</Property><Property name="defaultValue"/><Property name="description">Results of service invocation (if Success).</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">WaitForServiceResults</Property><Property name="defaultValue"/><Property name="description">Indicates whether step will call service synchronously (wait for result), or asynchronously.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">True</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Invokes other services.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A0B7CE48-825F-4326-ABF8-C2EC8307212E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.BSE.Common.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.BSE.Common.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.BSE.Common.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{951FF38D-A7A1-433B-A0CA-2C537D1834CA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.BSE.Interfaces.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.BSE.Interfaces.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.BSE.Interfaces.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{19D7297C-D98C-49D6-B33A-6B27262B2210}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Common.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Common.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.Common.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{BFDF94E9-8B7F-4F19-9553-1532C0FE5369}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DSE.Interfaces.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DSE.Interfaces.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DSE.Interfaces.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{35FE1CB4-7B38-4F10-ACA6-4086F277AAD5}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Interfaces.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Interfaces.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.Interfaces.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{33625001-8C68-4230-BF6E-5B30FC58319C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.ServicePoolLoader.exe"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{15D608FF-3590-4DB6-AC40-6FFEAA7538E1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Watchdogs.Watchdog.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Watchdogs.Watchdog.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.Watchdogs.Watchdog.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{BC3BF2B0-F3A4-4071-A864-D65FD3A8ECD2}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Metering.MeteringPointManagement.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Metering.MeteringPointManagement.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Metering.MeteringPointManagement.dll"><Step id="ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.Metering.MeteringPointManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">FilteredMeteringPointList</Property><Property name="defaultValue"/><Property name="description">List of objects used to show filtered metering points in management console.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves list of objects used to show filtered metering points in management console.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">MeteringPointInstanceId</Property><Property name="defaultValue"/><Property name="description">Filtering by MeteringPointInstanceId.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Filtered Metering Point List step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PublishedName</Property><Property name="defaultValue"/><Property name="description">Filtering by metering point published names.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Name</Property><Property name="defaultValue"/><Property name="description">Filtering by Name of metering points.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Code</Property><Property name="defaultValue"/><Property name="description">Filtering by metering point group codes.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">MeteringType</Property><Property name="defaultValue"/><Property name="description">Filtering by metering point types.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">CallerType</Property><Property name="defaultValue"/><Property name="description">Filtering by caller type (full class name) that uses metering point.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">SelectedAttributes</Property><Property name="defaultValue"/><Property name="description">Filtering by names and values of attribute.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PageSize</Property><Property name="defaultValue"/><Property name="description">Size of page.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">DateTo</Property><Property name="defaultValue"/><Property name="description">Filtering by DateCreated of metering points.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">DateFrom</Property><Property name="defaultValue"/><Property name="description">Filtering by DateCreated of metering points.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">LastSelectedMeteringID</Property><Property name="defaultValue"/><Property name="description">Last selected metering ID.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PagingDirection</Property><Property name="defaultValue"/><Property name="description">Paging direction.</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.Metering.MeteringPointManagement.dll</ResourceId><Attributes><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Metering Point Published Name List step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Get list of metering point published names.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PublishedNameList</Property><Property name="defaultValue"/><Property name="description">List of metering point published names.</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.Metering.MeteringPointManagement.SaveStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.Metering.MeteringPointManagement.dll</ResourceId><Attributes><Attribute type="DseStep"><Properties><Property name="friendlyName">Save step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Save values to metering persistence.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">MeteringPointValues</Property><Property name="defaultValue"/><Property name="description">Value of metering points.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Result if save is suceeded.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">True</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{01B0970C-6ED3-4AC0-B742-DEA855C3410A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Metering.Targets.Logging.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Metering.Targets.Logging.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Metering.Targets.Logging.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{F5F35C28-9205-4A87-A7EC-E5E8A77191D2}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Metering.Targets.ServiceHost.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Metering.Targets.ServiceHost.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Metering.Targets.ServiceHost.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{F843F415-CF5B-47AF-927A-79265FB97ADF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Metering.Common.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Metering.Common.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Metering.Common.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{8C830E50-BEEB-472C-ADEC-3008104FB3AA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Metering.Interfaces.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Metering.Interfaces.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Metering.Interfaces.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{B04336AA-D621-4C0A-9303-90EB61659D73}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{8690438C-397E-4B26-8D03-927C610876D7}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.PersistenceProviders.Request.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.PersistenceProviders.Request.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.PersistenceProviders.Request.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{6C0B3E56-D969-41C0-A8D8-3A81B8E96C5F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.PubSub.Common.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.PubSub.Common.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.PubSub.Common.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{CF39576A-92D1-4E11-91A1-A5D685E22A8F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.PubSub.Interfaces.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.PubSub.Interfaces.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.PubSub.Interfaces.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{01F1D24E-AC27-4F62-B0E2-F524AFACB2FF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.BusinessContext.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.BusinessContext.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.Contexts.BusinessContext.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{288C59D5-06C5-4FAA-B379-BE61FC1FD205}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{4FEB7E70-85A7-4184-9416-87FADEBB0AD8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.LoggingContext.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.LoggingContext.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.Contexts.LoggingContext.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{F58CC9E3-437C-4467-B47C-789936C24B54}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.MeteringContext.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.MeteringContext.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.Contexts.MeteringContext.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{7D5F41D2-4955-4FB9-8D36-3954DD4E2680}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.BooleanExpression.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.BooleanExpression.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.BooleanExpression.dll"><Step id="ServiceBus.ServiceHost.DseStep.BooleanExpression"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.BooleanExpression.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Set true of false of boolean expression evaluation.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">BooleanExpression</Property><Property name="defaultValue"/><Property name="description">Input string that represents BooleanExpression.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Return custom codes for match of desired variable on the BooleanExpression input string.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">RealEC.BooleanExpression step</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">True</Property><Property name="resultDescription">Custom return code when the boolean evaluation was successfull.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Variables</Property><Property name="defaultValue"/><Property name="description">Input variables that is Dictionary&lt;string,object&gt; used for matching the BooleanExpression input string.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">False</Property><Property name="resultDescription">Custom return code when the boolean evaluation was unsuccessfull.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{4AADBEE8-2C76-4464-B0D3-FAFDBBF48BAB}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.BytesToString.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.BytesToString.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.BytesToString.dll"><Step id="ServiceBus.ServiceHost.DseStep.BytesToString"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.BytesToString.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts byte array to string.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Bytes To String</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Bytes</Property><Property name="defaultValue"/><Property name="description">Byte array for conversion.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">Converted string from byte array.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{68A36169-784C-4C34-9156-594F9028E062}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll"><Step id="ServiceBus.ServiceHost.DseStep.ExpressionEvaluation"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Input string after matching of desired variables will become expression string that will be evaluate. RealEC.ExpressionEvaluation step will return custom codes for that expression input string.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Expression</Property><Property name="defaultValue"/><Property name="description">Input string that represents the expression that will be evaluate.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Set true of false of expression evaluation.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">RealEC.ExpressionEvaluation step</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">False</Property><Property name="resultDescription">Custom return code when the evaluation was unsuccessfull.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Variables</Property><Property name="defaultValue"/><Property name="description">Input variables that is Dictionary&lt;string,object&gt; used for matching the Expression input string.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">True</Property><Property name="resultDescription">Custom return code when the evaluation was successfull.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{69C82D3F-2170-4D39-B71A-FC2D8139A457}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll"><Step id="ServiceBus.ServiceHost.DseStep.StringToXmlSchema"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlSchema</Property><Property name="defaultValue"/><Property name="description">Created XML schema.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XsdString</Property><Property name="defaultValue"/><Property name="description">Converted string from byte array.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Errors</Property><Property name="defaultValue"/><Property name="description">Errors generated while converting.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Converts provided string to XML schema.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">String To XML Schema</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{F00A2F84-5B30-41C1-B157-64F25D227789}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll"><Step id="ServiceBus.ServiceHost.DseStep.XmlAttributeValue"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">Xml node on wich root attribute should be.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Attribute value.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">RealEC.XmlAttributeValue step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Finds attribute value in root node.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">Found</Property><Property name="resultDescription">Custom step result that identifies that xml attribute value is found on the root in specified xml node.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">NotFound</Property><Property name="resultDescription">Custom step result that identifies that xml attribute value is not found on the root in specified xml node.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Attribute</Property><Property name="defaultValue"/><Property name="description">Xml node attribute.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{0F566272-DA13-473E-98B1-810E48AB1F42}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll"><Step id="ServiceBus.ServiceHost.DseStep.XpathQueryMultiple"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">Xml node on which path is queried.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Dictionary of xml nodes or strings that match specified xpath.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">Found</Property><Property name="resultDescription">Custom step result that identifies that xml node is found at specified path.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">NotFound</Property><Property name="resultDescription">Custom step result that identifies that xml node is not found at specified path.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XPath</Property><Property name="defaultValue"/><Property name="description">Path to xml node.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">RealEC.XpathQueryMultiple step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Finds nodes that match the xpath value.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ReturnXmlNode</Property><Property name="defaultValue">True</Property><Property name="description">Decides if xml node will be set in ''Result'' argument or string (outer or inner xml).</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ReturnInnerXml</Property><Property name="defaultValue">True</Property><Property name="description">Decides if inner xml will be set in ''Result'' argument or outer xml.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{2427B96D-C7CE-4285-B6A7-F1C89FEFB31F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll"><Step id="ServiceBus.ServiceHost.DseStep.XpathQuerySingle"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">Xml node on which path is queried.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">The first xml node, inner xml or outer xml string that matches specified xpath.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">Found</Property><Property name="resultDescription">Custom step result that identifies that xml node is found at specified path.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">NotFound</Property><Property name="resultDescription">Custom step result that identifies that xml node is not found at specified path.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XPath</Property><Property name="defaultValue"/><Property name="description">Path to xml node.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">RealEC.XpathQuerySingle step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Finds the first node that matches the xpath value.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ReturnXmlNode</Property><Property name="defaultValue">True</Property><Property name="description">Decides if xml node will be set in ''Result'' argument or string (outer or inner xml).</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ReturnInnerXml</Property><Property name="defaultValue">True</Property><Property name="description">Decides if inner xml will be set in ''Result'' argument or outer xml.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{7AD763A2-E793-4E51-861C-083048194C9F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll"><Step id="ServiceBus.ServiceHost.DseStep.ValidateXmlSchema"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Step result.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Validates XML document against a specific XML schema.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Errors</Property><Property name="defaultValue"/><Property name="description">Errors generated while validating.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Xml Document Validation</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlDocument</Property><Property name="defaultValue"/><Property name="description">XML document that will go through the validation process.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlSchema</Property><Property name="defaultValue"/><Property name="description">XML schema that will be used to validate XML document.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">True</Property><Property name="resultDescription">Custom return code when the validation was successfull.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">False</Property><Property name="resultDescription">Custom return code when the validation was unsuccessfull.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{9401BBA1-0DC7-452B-8BC7-868197355460}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll"><Step id="ServiceBus.ServiceHost.DseStep.WriteBytesToFile"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Bytes</Property><Property name="defaultValue"/><Property name="description">File byte array.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">FileName</Property><Property name="defaultValue"/><Property name="description">Destination file name.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Path</Property><Property name="defaultValue"/><Property name="description">File destination path.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">RealEC.WriteBytesToFile step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Sends processing result to designated location.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{FA62B826-C40C-4D96-A210-89EA87811D5B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll"><Step id="ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Sends processing result to designated location.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">RealEC.WriteMetadataToFile step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Dictionary</Property><Property name="defaultValue"/><Property name="description">Dictionary which is written to file.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Path</Property><Property name="defaultValue"/><Property name="description">File destination path.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{5617E8A8-AA6B-4A92-8131-B3E21AC2C579}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlDocToString.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlDocToString.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.XmlDocToString.dll"><Step id="ServiceBus.ServiceHost.DseStep.XmlDocToString"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.XmlDocToString.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts XML node to string.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">XML Node To String</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlDoc</Property><Property name="defaultValue"/><Property name="description">XML document.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">Converted string from XML node.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{9B505F6E-D5A9-4DBC-8DF6-AA4458580C3B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll"><Step id="ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts XML Document to XML node.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">XML Document To XML Node</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlDoc</Property><Property name="defaultValue"/><Property name="description">XML document that needs to be converted.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">XML node created from XML document.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{3E7D4DC8-239A-4D26-BB69-990626C69447}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlNodeName.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlNodeName.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.XmlNodeName.dll"><Step id="ServiceBus.ServiceHost.DseStep.XmlNodeName"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.XmlNodeName.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Returns name of the root node.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">RealEC.XmlNodeName step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">Xml node.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Root node name.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{810EEB50-198B-43DA-B21A-BFB88848155F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll"><Step id="ServiceBus.ServiceHost.DseStep.XmlNodeToString"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts XML node to string.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">XML Node To String</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">XML node.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">Converted string from XML node.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{900F3CBD-D7D0-44F7-9054-051179F31905}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll"><Step id="ServiceBus.ServiceHost.DseStep.LoadFileFromUri"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">FileUri</Property><Property name="defaultValue"/><Property name="description">URI of the file to be loaded.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">FileBytes</Property><Property name="defaultValue"/><Property name="description">Loaded file''s byte representation.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Load File From Uri</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Loads file from URI.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{BE056DE9-146C-42E7-B5BB-343FB5310F9C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.RegexMatch.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.RegexMatch.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.RegexMatch.dll"><Step id="ServiceBus.ServiceHost.DseStep.RegexMatch"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.RegexMatch.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">Input string to compare</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">True</Property><Property name="resultDescription">Custom result code if regex is matched.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">False</Property><Property name="resultDescription">Custom result code if regex is not matched.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">StringException</Property><Property name="resultDescription">Custom result code if string is not valid.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Regex</Property><Property name="defaultValue"/><Property name="description">Regex which is compared to input string.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Compare regex</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Compare regex and return true if value matches, otherwise return false.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Return true if matched, false if not matched.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Value</Property><Property name="defaultValue"/><Property name="description">Return string which matches with regex value.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{4EA2222B-1C0D-4F51-939A-CCC7E012F203}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.StringToBinary.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.StringToBinary.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.StringToBinary.dll"><Step id="ServiceBus.ServiceHost.DseStep.StringToBinary"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.StringToBinary.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts string to byte array.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">String To Bytes</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">String for conversion.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Bytes</Property><Property name="defaultValue"/><Property name="description">Byte array converted from string.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{DA6AD19B-D0D3-4FEF-BD34-1A92D8C03449}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll"><Step id="ServiceBus.ServiceHost.DseStep.StringToXmlDoc"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts string to XML Document.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">String To XML Document</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">Converted string from byte array.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlDoc</Property><Property name="defaultValue"/><Property name="description">Created XML document from string.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{71CFD4A2-3312-4938-B5EF-7AFC6F7C2FE8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestChannels.Remoting.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestChannels.Remoting.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.RequestChannels.Remoting.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{983813BC-CA2A-4572-8390-A18A09DD56C7}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestChannels.Wcf.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestChannels.Wcf.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.RequestChannels.Wcf.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{35738368-C1F4-459C-A0DC-1C81C15DDFF9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{D09FBE9D-C3DA-4D68-8D05-947A73C8A524}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestClassifiers.Random.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestClassifiers.Random.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.RequestClassifiers.Random.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{D660A5A8-CBA1-4E05-B258-4C4F0BB6C93A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A44013E8-E76A-44A1-B352-EB60614F5E7C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{9BAA847C-B166-42A7-82A2-BBF31BCBB3BE}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{FFA1165F-BA17-4015-9C8D-05EA3301BF42}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{B4302E78-2236-41D6-8F04-34F845FADD9D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestManagement.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestManagement.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.RequestManagement.dll"><Step id="ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStep"><Properties><Property name="friendlyName">Delete Failed Requests step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Exception</Property><Property name="defaultValue"/><Property name="description">Deleted failed requests from database.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Delete failed requests.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">TableName</Property><Property name="defaultValue"/><Property name="description">Service request table name.</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequestDeleted</Property><Property name="defaultValue"/><Property name="description">Indicates whether service request was deleted successfully.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Delete Request by Id step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Deletes service request identified by passed request id.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">RequestId</Property><Property name="defaultValue"/><Property name="description">Id of request to be deleted.</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludePendingRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether pending request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Page</Property><Property name="defaultValue"/><Property name="description">Page direction (first, previous, next and last.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PageSize</Property><Property name="defaultValue"/><Property name="description">Page size.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">CategorizationList</Property><Property name="defaultValue"/><Property name="description">List of objects used to show failed requests in exception management console.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Failed Requests Categorization List step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeActiveRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether active request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeCompletedRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether completed request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeSuspendedRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether suspended request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves list of failed request categorization.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Filter</Property><Property name="defaultValue"/><Property name="description">Filtering data.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">BoundaryId</Property><Property name="defaultValue"/><Property name="description">Boundary Id.</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludePendingRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether pending request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">To</Property><Property name="defaultValue"/><Property name="description">To Date.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">CategorizationSummary</Property><Property name="defaultValue"/><Property name="description">List of objects used to show failed requests in exception management console.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Failed Requests Categorization Summary step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves list of failed request categorization.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Recent</Property><Property name="defaultValue"/><Property name="description">Date that marks requests as recent.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">From</Property><Property name="defaultValue"/><Property name="description">From Date.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeCompletedRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether completed request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeSuspendedRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether suspended request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeActiveRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether active request should be included in summary</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Action</Property><Property name="defaultValue"/><Property name="description">Action to be performed using checkpoint</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">CheckpointId</Property><Property name="defaultValue"/><Property name="description">Last matching checkpoint id</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get last matching checkpoint id</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Gets id of last checkpoint that can be used to perform service request''s selected action.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request from which to retrieve checkpoint id</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves service request identified by passed request id.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Request by Id step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">RequestId</Property><Property name="defaultValue"/><Property name="description">Id of request to be obtained.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request identified by passed request id.</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Checkpoint by Id step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Action</Property><Property name="defaultValue"/><Property name="description">Action to be performed using checkpoint</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Checkpoint</Property><Property name="defaultValue"/><Property name="description">Execution checkpoint retrieved from service request.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">CheckpointId</Property><Property name="defaultValue">00000000-0000-0000-0000-000000000000</Property><Property name="description">Id of checkpoint to be obtained.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request from which to get checkpoint.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Gets checkpoint by id.</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">RequestId</Property><Property name="defaultValue"/><Property name="description">Retrieved request id</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get request id</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves request id.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request from which to retrieve id</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Invokes other steps.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Invoke Service step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceResponse</Property><Property name="defaultValue"/><Property name="description">Service response receieved from service that reprocessed service request.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request prepared for reprocessing.</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Action</Property><Property name="defaultValue"/><Property name="description">Type of service invocation.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request to be prepared for reprocessing.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Prepare Request step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Checkpoint</Property><Property name="defaultValue"/><Property name="description">Execution checkpoint to be used for service request reprocessing.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Prepares service request for reprocessing.</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.RouteByActionStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Performs step routing based on selected action for service request.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Route by action</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Action</Property><Property name="defaultValue"/><Property name="description">Action to be performed on service request</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.RequestManagement.SaveRequestStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.RequestManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PersistenceId</Property><Property name="defaultValue"/><Property name="description">Persistence ID of saved service request.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request to be saved.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Save Request step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Saves service request.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{6271D874-851D-49C2-B529-A84F17897ED7}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.ResourceManagement.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.ResourceManagement.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.ResourceManagement.dll"><Step id="ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.ResourceManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">SourcePath</Property><Property name="defaultValue"/><Property name="description">Path inside repository share where resource should be saved.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ResourceDeleted</Property><Property name="defaultValue"/><Property name="description">Result: true if resource was deleted, false otherwise.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Delete Resource by Id step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Deletes resource from repository.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Id</Property><Property name="defaultValue"/><Property name="description">Resource ID (from Resource Catalog).</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.ResourceManagement.dll</ResourceId><Attributes><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Resource by Id step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Downloads resource from repository.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Id</Property><Property name="defaultValue"/><Property name="description">Resource ID (from Resource Catalog).</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">SourcePath</Property><Property name="defaultValue"/><Property name="description">Path inside repository share where resource should be saved.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ResourceBytes</Property><Property name="defaultValue"/><Property name="description">Result: Resource content. Null if resource could not be obtained.</Property></Properties></Attribute></Attributes></Step><Step id="ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep"><ImportedToStepCatalog>True</ImportedToStepCatalog><ResourceId>ServiceBus.ServiceHost.ResourceManagement.dll</ResourceId><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Bytes</Property><Property name="defaultValue"/><Property name="description">Resource content.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Save Resource step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ResourceUploaded</Property><Property name="defaultValue"/><Property name="description">Result: true if resource was uploaded, false otherwise.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Uploads resource to repository.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Id</Property><Property name="defaultValue"/><Property name="description">Resource ID (from Resource Catalog).</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">SourcePath</Property><Property name="defaultValue"/><Property name="description">Path inside repository share where resource should be saved.</Property></Properties></Attribute></Attributes></Step></Resource>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{6A18017E-A93A-44E9-B07D-A834CC6AD33A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{7D5D0DCE-EFBB-43DA-9C9C-6140BC06B404}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Utility.Database.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Utility.Database.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Utility.Database.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{6DAD13E6-98BB-4160-B653-28D329114E8A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Utility.Unity.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Utility.Unity.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Utility.Unity.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{3E8014ED-E759-4E44-899E-C96331207021}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Utility.Logging.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Utility.Logging.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Utility.Logging.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{AE9DE5B1-B468-4003-BEDC-40865BED8AA8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Utility.Sharing.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Utility.Sharing.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Utility.Sharing.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{39BE0CB5-17F1-4649-8EC7-53FC8A76441E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Utility.Timer.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Utility.Timer.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Utility.Timer.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{2EF2992F-4A60-477A-AE0E-66D1B2F5A668}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Utility.Assembly.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Utility.Assembly.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Utility.Assembly.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{96648CED-2762-4D8F-8193-622062E87527}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Utility.Cache.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Utility.Cache.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Utility.Cache.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{E1F8EAF4-1E6B-429D-85BE-7DF5A4455F89}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.Utility.Configuration.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.Utility.Configuration.dll'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.Utility.Configuration.dll"/>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
  
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted StepResourceObserver data'
	COMMIT TRANSACTION
END


--
-- 2. Insert Step data
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	SET	@FragmentId = '{CAD1B2D7-46F7-49BD-9DFD-06AA0045C1DB}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.Logging.GetPageStep'
			SET @Description = 'Step.ServiceBus.Logging.GetPageStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Logging"',
				'<Step name="ServiceBus.Logging.GetPageStep"><Implementation><Resource name="ServiceBus.Logging.LoggingManagement.dll"/><Type>ServiceBus.Logging.GetPageStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">lastLogEntryTime</Property><Property name="defaultValue"/><Property name="description">Filtering by last log entry time.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">pagingDirection</Property><Property name="defaultValue"/><Property name="description">Paging direction 0 for next 1 for preview</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PageResult</Property><Property name="defaultValue"/><Property name="description">Dataset used to show log viewer page.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">lastLogEntryId</Property><Property name="defaultValue"/><Property name="description">Filtering by last log entry Id.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Page step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves dataset that be used to show log entries.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">pageSize</Property><Property name="defaultValue">100</Property><Property name="description">Size of page.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">filter</Property><Property name="defaultValue"/><Property name="description">Filtering by search pattern criteria.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{99092772-D0D9-47CB-BA98-A60B79BB2FFF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.Logging.LogStep'
			SET @Description = 'Step.ServiceBus.Logging.LogStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Logging"',
				'<Step name="ServiceBus.Logging.LogStep"><Implementation><Resource name="ServiceBus.Logging.LogStep.dll"/><Type>ServiceBus.Logging.LogStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Invokes create log entry method.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Log step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">LogEntryCollection</Property><Property name="defaultValue"/><Property name="description">Collection of log entries.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{BFDC880F-F7FB-41D1-ABDA-D722C8B3D369}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DSE.InvokeServiceStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.DSE.InvokeServiceStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="ServiceHost"',
				'<Step name="ServiceBus.ServiceHost.DSE.InvokeServiceStep"><Implementation><Resource name="ServiceBus.ServiceHost.DSE.Common.dll"/><Type>ServiceBus.ServiceHost.DSE.InvokeServiceStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ForceSynchronous</Property><Property name="defaultValue">True</Property><Property name="description">Input: Does this step always wait for the service to complete?</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">WaitForServiceResponse</Property><Property name="defaultValue">True</Property><Property name="description">Input (Optional): Does this step wait for the ServiceResponse? If False, service is invoked and forgotten.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Invoke Service Step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Timeout</Property><Property name="defaultValue">0.00:00:00.000</Property><Property name="description">Input: How long to wait for the service to complete?</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Inputs</Property><Property name="defaultValue"/><Property name="description">Input: Dictionary to contain values for service inputs of invoked service ({ServiceInputName, ServiceInputValue} pair(s))</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Results</Property><Property name="defaultValue"/><Property name="description">Output: Dictionary to contain service results of invoked service ({ServiceResultName, ServiceResultValue} pair(s))</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">OutputAttributes</Property><Property name="defaultValue"/><Property name="description">Output: Dictionary to contain all attributes returned in service response</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">RequestID</Property><Property name="defaultValue"/><Property name="description">Output: The identification of service request</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">PendingOrActive</Property><Property name="resultDescription">The service returned PendingOrActive response status.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">Suspended</Property><Property name="resultDescription">The service returned Suspended response status.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Invokes service specified by ServiceName argument</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceName</Property><Property name="defaultValue"/><Property name="description">Input: The name of the service to invoke</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{006D6FED-3C2A-4064-9E0C-F758D35B19D7}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DSE.ServiceInvokeStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.DSE.ServiceInvokeStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="ServiceHost"',
				'<Step name="ServiceBus.ServiceHost.DSE.ServiceInvokeStep"><Implementation><Resource name="ServiceBus.ServiceHost.DSE.Common.dll"/><Type>ServiceBus.ServiceHost.DSE.ServiceInvokeStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceArguments</Property><Property name="defaultValue"/><Property name="description">Arguments for service invocation.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceName</Property><Property name="defaultValue"/><Property name="description">Name of the service that is being invoked.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Service Invoke step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceResults</Property><Property name="defaultValue"/><Property name="description">Results of service invocation (if Success).</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">WaitForServiceResults</Property><Property name="defaultValue"/><Property name="description">Indicates whether step will call service synchronously (wait for result), or asynchronously.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">True</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Invokes other services.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{7E7544D0-754C-4784-9BD9-3A8FB0537BBF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep'
			SET @Description = 'Step.ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Metering"',
				'<Step name="ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep"><Implementation><Resource name="ServiceBus.Metering.MeteringPointManagement.dll"/><Type>ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Metering Point Published Name List step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Get list of metering point published names.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PublishedNameList</Property><Property name="defaultValue"/><Property name="description">List of metering point published names.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{CC02ED29-D330-4086-A715-3EFE7C62B79F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep'
			SET @Description = 'Step.ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Metering"',
				'<Step name="ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep"><Implementation><Resource name="ServiceBus.Metering.MeteringPointManagement.dll"/><Type>ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">FilteredMeteringPointList</Property><Property name="defaultValue"/><Property name="description">List of objects used to show filtered metering points in management console.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves list of objects used to show filtered metering points in management console.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">MeteringPointInstanceId</Property><Property name="defaultValue"/><Property name="description">Filtering by MeteringPointInstanceId.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Filtered Metering Point List step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PublishedName</Property><Property name="defaultValue"/><Property name="description">Filtering by metering point published names.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Name</Property><Property name="defaultValue"/><Property name="description">Filtering by Name of metering points.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Code</Property><Property name="defaultValue"/><Property name="description">Filtering by metering point group codes.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">MeteringType</Property><Property name="defaultValue"/><Property name="description">Filtering by metering point types.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">CallerType</Property><Property name="defaultValue"/><Property name="description">Filtering by caller type (full class name) that uses metering point.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">SelectedAttributes</Property><Property name="defaultValue"/><Property name="description">Filtering by names and values of attribute.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PageSize</Property><Property name="defaultValue"/><Property name="description">Size of page.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">DateTo</Property><Property name="defaultValue"/><Property name="description">Filtering by DateCreated of metering points.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">DateFrom</Property><Property name="defaultValue"/><Property name="description">Filtering by DateCreated of metering points.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">LastSelectedMeteringID</Property><Property name="defaultValue"/><Property name="description">Last selected metering ID.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PagingDirection</Property><Property name="defaultValue"/><Property name="description">Paging direction.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{D8C7AC39-F3DF-4B1D-9D04-B08081A40ECD}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.Metering.MeteringPointManagement.SaveStep'
			SET @Description = 'Step.ServiceBus.Metering.MeteringPointManagement.SaveStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Metering"',
				'<Step name="ServiceBus.Metering.MeteringPointManagement.SaveStep"><Implementation><Resource name="ServiceBus.Metering.MeteringPointManagement.dll"/><Type>ServiceBus.Metering.MeteringPointManagement.SaveStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStep"><Properties><Property name="friendlyName">Save step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Save values to metering persistence.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">MeteringPointValues</Property><Property name="defaultValue"/><Property name="description">Value of metering points.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Result if save is suceeded.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">True</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{5C564F94-70C0-4FD2-9CF6-344F20F6D991}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.LoadFileFromUri'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.LoadFileFromUri'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.LoadFileFromUri"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll"/><Type>ServiceBus.ServiceHost.DseStep.LoadFileFromUri</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">FileUri</Property><Property name="defaultValue"/><Property name="description">URI of the file to be loaded.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">FileBytes</Property><Property name="defaultValue"/><Property name="description">Loaded file''s byte representation.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Load File From Uri</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Loads file from URI.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{B89D2C98-D9DD-4922-8246-F6ACB625B7CB}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.StringToXmlDoc'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.StringToXmlDoc'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.StringToXmlDoc"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll"/><Type>ServiceBus.ServiceHost.DseStep.StringToXmlDoc</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts string to XML Document.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">String To XML Document</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">Converted string from byte array.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlDoc</Property><Property name="defaultValue"/><Property name="description">Created XML document from string.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{BD4472FB-73D9-45F7-90C5-82F8F5B2CF20}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.XmlDocToString'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.XmlDocToString'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.XmlDocToString"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.XmlDocToString.dll"/><Type>ServiceBus.ServiceHost.DseStep.XmlDocToString</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts XML node to string.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">XML Node To String</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlDoc</Property><Property name="defaultValue"/><Property name="description">XML document.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">Converted string from XML node.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A4B577A6-5358-4F7C-B60C-2075A1D03138}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.XmlNodeToString'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.XmlNodeToString'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.XmlNodeToString"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll"/><Type>ServiceBus.ServiceHost.DseStep.XmlNodeToString</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts XML node to string.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">XML Node To String</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">XML node.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">Converted string from XML node.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{25627847-E937-4D70-9E42-A67242C67D49}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll"/><Type>ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts XML Document to XML node.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">XML Document To XML Node</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlDoc</Property><Property name="defaultValue"/><Property name="description">XML document that needs to be converted.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">XML node created from XML document.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{D5D5D14E-DCC7-4642-9B3A-6BCB36371245}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.XmlNodeName'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.XmlNodeName'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.XmlNodeName"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.XmlNodeName.dll"/><Type>ServiceBus.ServiceHost.DseStep.XmlNodeName</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Returns name of the root node.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">XmlNodeName step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">Xml node.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Root node name.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{45383E4C-4CA6-4427-82C1-76C40B74AFE1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.BytesToString'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.BytesToString'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.BytesToString"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.BytesToString.dll"/><Type>ServiceBus.ServiceHost.DseStep.BytesToString</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts byte array to string.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Bytes To String</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Bytes</Property><Property name="defaultValue"/><Property name="description">Byte array for conversion.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">Converted string from byte array.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{696FDEA0-DEC2-4193-887A-64D3B08DBA4A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.RegexMatch'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.RegexMatch'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.RegexMatch"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.RegexMatch.dll"/><Type>ServiceBus.ServiceHost.DseStep.RegexMatch</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">Input string to compare</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">True</Property><Property name="resultDescription">Custom result code if regex is matched.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">False</Property><Property name="resultDescription">Custom result code if regex is not matched.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">StringException</Property><Property name="resultDescription">Custom result code if string is not valid.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Regex</Property><Property name="defaultValue"/><Property name="description">Regex which is compared to input string.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Compare regex</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Compare regex and return true if value matches, otherwise return false.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Return true if matched, false if not matched.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Value</Property><Property name="defaultValue"/><Property name="description">Return string which matches with regex value.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{19B3AB47-5EF5-406F-8229-0F2BA32999AC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.StringToXmlSchema'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.StringToXmlSchema'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.StringToXmlSchema"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll"/><Type>ServiceBus.ServiceHost.DseStep.StringToXmlSchema</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlSchema</Property><Property name="defaultValue"/><Property name="description">Created XML schema.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XsdString</Property><Property name="defaultValue"/><Property name="description">Converted string from byte array.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Errors</Property><Property name="defaultValue"/><Property name="description">Errors generated while converting.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Converts provided string to XML schema.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">String To XML Schema</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{837A0C53-6F1E-4685-B977-0F7A98203FA2}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.StringToBinary'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.StringToBinary'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.StringToBinary"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.StringToBinary.dll"/><Type>ServiceBus.ServiceHost.DseStep.StringToBinary</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Converts string to byte array.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">String To Bytes</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">String</Property><Property name="defaultValue"/><Property name="description">String for conversion.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Bytes</Property><Property name="defaultValue"/><Property name="description">Byte array converted from string.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{09AED055-05DB-4682-BC69-83986E5FD1F3}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.ValidateXmlSchema"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll"/><Type>ServiceBus.ServiceHost.DseStep.ValidateXmlSchema</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Step result.</Property></Properties></Attribute><Attribute type="DseStepObsolete"><Properties><Property name="obsolete">False</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Validates XML document against a specific XML schema.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Errors</Property><Property name="defaultValue"/><Property name="description">Errors generated while validating.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Xml Document Validation</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlDocument</Property><Property name="defaultValue"/><Property name="description">XML document that will go through the validation process.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlSchema</Property><Property name="defaultValue"/><Property name="description">XML schema that will be used to validate XML document.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">True</Property><Property name="resultDescription">Custom return code when the validation was successfull.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">False</Property><Property name="resultDescription">Custom return code when the validation was unsuccessfull.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{842E3B79-02AD-4C38-B05F-9C9EA012A653}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.XmlAttributeValue'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.XmlAttributeValue'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.XmlAttributeValue"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll"/><Type>ServiceBus.ServiceHost.DseStep.XmlAttributeValue</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">Xml node on wich root attribute should be.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Attribute value.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">XmlAttributeValue step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Finds attribute value in root node.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">Found</Property><Property name="resultDescription">Custom step result that identifies that xml attribute value is found on the root in specified xml node.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">NotFound</Property><Property name="resultDescription">Custom step result that identifies that xml attribute value is not found on the root in specified xml node.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Attribute</Property><Property name="defaultValue"/><Property name="description">Xml node attribute.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A90FC6AF-C1DD-42DB-ABB8-90B161FB7AF3}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.WriteBytesToFile'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.WriteBytesToFile'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.WriteBytesToFile"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll"/><Type>ServiceBus.ServiceHost.DseStep.WriteBytesToFile</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Bytes</Property><Property name="defaultValue"/><Property name="description">File byte array.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">FileName</Property><Property name="defaultValue"/><Property name="description">Destination file name.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Path</Property><Property name="defaultValue"/><Property name="description">File destination path.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">WriteBytesToFile step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Sends processing result to designated location.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{482584FE-7D95-4AD0-B812-B82A854187FF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll"/><Type>ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Sends processing result to designated location.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">WriteMetadataToFile step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Dictionary</Property><Property name="defaultValue"/><Property name="description">Dictionary which is written to file.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Path</Property><Property name="defaultValue"/><Property name="description">File destination path.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{2077BA87-D333-4998-AF7A-616A6FC91412}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.BooleanExpression'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.BooleanExpression'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.BooleanExpression"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.BooleanExpression.dll"/><Type>ServiceBus.ServiceHost.DseStep.BooleanExpression</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Set true of false of boolean expression evaluation.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">BooleanExpression</Property><Property name="defaultValue"/><Property name="description">Input string that represents BooleanExpression.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Return custom codes for match of desired variable on the BooleanExpression input string.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">BooleanExpression step</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">True</Property><Property name="resultDescription">Custom return code when the boolean evaluation was successfull.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Variables</Property><Property name="defaultValue"/><Property name="description">Input variables that is Dictionary&lt;string,object&gt; used for matching the BooleanExpression input string.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">False</Property><Property name="resultDescription">Custom return code when the boolean evaluation was unsuccessfull.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{6A422823-1A3D-4369-8EAD-5EE5ED7474F1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.ExpressionEvaluation"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll"/><Type>ServiceBus.ServiceHost.DseStep.ExpressionEvaluation</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Input string after matching of desired variables will become expression string that will be evaluate. RealEC.ExpressionEvaluation step will return custom codes for that expression input string.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Expression</Property><Property name="defaultValue"/><Property name="description">Input string that represents the expression that will be evaluate.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Set true of false of expression evaluation.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">ExpressionEvaluation step</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">False</Property><Property name="resultDescription">Custom return code when the evaluation was unsuccessfull.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Variables</Property><Property name="defaultValue"/><Property name="description">Input variables that is Dictionary&lt;string,object&gt; used for matching the Expression input string.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">True</Property><Property name="resultDescription">Custom return code when the evaluation was successfull.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{209C8444-0DCE-4163-A30F-47EDC470DAD1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.XpathQueryMultiple"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll"/><Type>ServiceBus.ServiceHost.DseStep.XpathQueryMultiple</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">Xml node on which path is queried.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">Dictionary of xml nodes or strings that match specified xpath.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">Found</Property><Property name="resultDescription">Custom step result that identifies that xml node is found at specified path.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">NotFound</Property><Property name="resultDescription">Custom step result that identifies that xml node is not found at specified path.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XPath</Property><Property name="defaultValue"/><Property name="description">Path to xml node.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">XpathQueryMultiple step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Finds nodes that match the xpath value.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ReturnXmlNode</Property><Property name="defaultValue">True</Property><Property name="description">Decides if xml node will be set in ''Result'' argument or string (outer or inner xml).</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ReturnInnerXml</Property><Property name="defaultValue">True</Property><Property name="description">Decides if inner xml will be set in ''Result'' argument or outer xml.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{E732AEA8-CEF9-431A-B191-DF1B96712237}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.DseStep.XpathQuerySingle'
			SET @Description = 'Step.ServiceBus.ServiceHost.DseStep.XpathQuerySingle'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Dse Steps"',
				'<Step name="ServiceBus.ServiceHost.DseStep.XpathQuerySingle"><Implementation><Resource name="ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll"/><Type>ServiceBus.ServiceHost.DseStep.XpathQuerySingle</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XmlNode</Property><Property name="defaultValue"/><Property name="description">Xml node on which path is queried.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Result</Property><Property name="defaultValue"/><Property name="description">The first xml node, inner xml or outer xml string that matches specified xpath.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">Found</Property><Property name="resultDescription">Custom step result that identifies that xml node is found at specified path.</Property></Properties></Attribute><Attribute type="DseStepCustomResult"><Properties><Property name="resultName">NotFound</Property><Property name="resultDescription">Custom step result that identifies that xml node is not found at specified path.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">XPath</Property><Property name="defaultValue"/><Property name="description">Path to xml node.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">XpathQuerySingle step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Finds the first node that matches the xpath value.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ReturnXmlNode</Property><Property name="defaultValue">True</Property><Property name="description">Decides if xml node will be set in ''Result'' argument or string (outer or inner xml).</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ReturnInnerXml</Property><Property name="defaultValue">True</Property><Property name="description">Decides if inner xml will be set in ''Result'' argument or outer xml.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{ACC3D4FF-3B93-4D61-A3D6-FF2FCD70E901}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.RouteByActionStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.RouteByActionStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.RouteByActionStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.RouteByActionStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Performs step routing based on selected action for service request.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Route by action</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Action</Property><Property name="defaultValue"/><Property name="description">Action to be performed on service request</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{1D60F70D-8088-4C62-9C34-064A5AB8E5C7}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves service request identified by passed request id.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Request by Id step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">RequestId</Property><Property name="defaultValue"/><Property name="description">Id of request to be obtained.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request identified by passed request id.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{49608832-A498-43EE-8C94-295953ABFCB9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepDescription"><Properties><Property name="description">Invokes other steps.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Invoke Service step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceResponse</Property><Property name="defaultValue"/><Property name="description">Service response receieved from service that reprocessed service request.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request prepared for reprocessing.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{5E915E38-AA89-46D8-935C-02878521F5CF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">RequestId</Property><Property name="defaultValue"/><Property name="description">Retrieved request id</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get request id</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves request id.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request from which to retrieve id</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{FE40EAEF-B861-4346-96E8-3FF802615399}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.SaveRequestStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.SaveRequestStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.SaveRequestStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.SaveRequestStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PersistenceId</Property><Property name="defaultValue"/><Property name="description">Persistence ID of saved service request.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request to be saved.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Save Request step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Saves service request.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{C320B128-BD03-4D25-B709-C147688D79D1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludePendingRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether pending request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Page</Property><Property name="defaultValue"/><Property name="description">Page direction (first, previous, next and last.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">PageSize</Property><Property name="defaultValue"/><Property name="description">Page size.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">CategorizationList</Property><Property name="defaultValue"/><Property name="description">List of objects used to show failed requests in exception management console.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Failed Requests Categorization List step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeActiveRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether active request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeCompletedRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether completed request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeSuspendedRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether suspended request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves list of failed request categorization.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Filter</Property><Property name="defaultValue"/><Property name="description">Filtering data.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">BoundaryId</Property><Property name="defaultValue"/><Property name="description">Boundary Id.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{E5B1C7AE-9C80-41D0-9CA4-89A935F2E219}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequestDeleted</Property><Property name="defaultValue"/><Property name="description">Indicates whether service request was deleted successfully.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Delete Request by Id step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Deletes service request identified by passed request id.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">RequestId</Property><Property name="defaultValue"/><Property name="description">Id of request to be deleted.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{E11EFE08-143E-4C73-BCA8-64B8865EDC14}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStep"><Properties><Property name="friendlyName">Delete Failed Requests step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Exception</Property><Property name="defaultValue"/><Property name="description">Deleted failed requests from database.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Delete failed requests.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">TableName</Property><Property name="defaultValue"/><Property name="description">Service request table name.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{AB0EDC37-72A6-457C-8582-AF4FB0873E6F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Action</Property><Property name="defaultValue"/><Property name="description">Type of service invocation.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request to be prepared for reprocessing.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Prepare Request step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Checkpoint</Property><Property name="defaultValue"/><Property name="description">Execution checkpoint to be used for service request reprocessing.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Prepares service request for reprocessing.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{73EEAB78-78CA-4774-81F4-124492866B5B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Checkpoint by Id step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Action</Property><Property name="defaultValue"/><Property name="description">Action to be performed using checkpoint</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Checkpoint</Property><Property name="defaultValue"/><Property name="description">Execution checkpoint retrieved from service request.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">CheckpointId</Property><Property name="defaultValue">00000000-0000-0000-0000-000000000000</Property><Property name="description">Id of checkpoint to be obtained.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request from which to get checkpoint.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Gets checkpoint by id.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{2AA4E116-6ECF-4190-92B6-E196E6B923B3}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Action</Property><Property name="defaultValue"/><Property name="description">Action to be performed using checkpoint</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">CheckpointId</Property><Property name="defaultValue"/><Property name="description">Last matching checkpoint id</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get last matching checkpoint id</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Gets id of last checkpoint that can be used to perform service request''s selected action.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ServiceRequest</Property><Property name="defaultValue"/><Property name="description">Service request from which to retrieve checkpoint id</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A8D3702F-E141-4666-816A-CC0B76B65E9D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Request Management"',
				'<Step name="ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep"><Implementation><Resource name="ServiceBus.ServiceHost.RequestManagement.dll"/><Type>ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludePendingRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether pending request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">To</Property><Property name="defaultValue"/><Property name="description">To Date.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">CategorizationSummary</Property><Property name="defaultValue"/><Property name="description">List of objects used to show failed requests in exception management console.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Failed Requests Categorization Summary step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Retrieves list of failed request categorization.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Recent</Property><Property name="defaultValue"/><Property name="description">Date that marks requests as recent.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">From</Property><Property name="defaultValue"/><Property name="description">From Date.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeCompletedRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether completed request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeSuspendedRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether suspended request should be included in summary</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">IncludeActiveRequests</Property><Property name="defaultValue"/><Property name="description">Indicates whether active request should be included in summary</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{3DD76BD1-035F-451B-B1F5-095E078C5DDB}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Resource Management"',
				'<Step name="ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep"><Implementation><Resource name="ServiceBus.ServiceHost.ResourceManagement.dll"/><Type>ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStep"><Properties><Property name="friendlyName">Get Resource by Id step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Downloads resource from repository.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Id</Property><Property name="defaultValue"/><Property name="description">Resource ID (from Resource Catalog).</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">SourcePath</Property><Property name="defaultValue"/><Property name="description">Path inside repository share where resource should be saved.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ResourceBytes</Property><Property name="defaultValue"/><Property name="description">Result: Resource content. Null if resource could not be obtained.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{B16D8194-C78A-40E8-8CED-FDFC0C7615FA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Resource Management"',
				'<Step name="ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep"><Implementation><Resource name="ServiceBus.ServiceHost.ResourceManagement.dll"/><Type>ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Bytes</Property><Property name="defaultValue"/><Property name="description">Resource content.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Save Resource step</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ResourceUploaded</Property><Property name="defaultValue"/><Property name="description">Result: true if resource was uploaded, false otherwise.</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Uploads resource to repository.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Id</Property><Property name="defaultValue"/><Property name="description">Resource ID (from Resource Catalog).</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">SourcePath</Property><Property name="defaultValue"/><Property name="description">Path inside repository share where resource should be saved.</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{E049C7E9-7475-462A-881E-2453103C7C2C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Step.ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep'
			SET @Description = 'Step.ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'StepCatalog/StepGroup name="Resource Management"',
				'<Step name="ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep"><Implementation><Resource name="ServiceBus.ServiceHost.ResourceManagement.dll"/><Type>ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep</Type></Implementation><Metadata><Attributes><Attribute type="DseStepArgument"><Properties><Property name="argumentName">SourcePath</Property><Property name="defaultValue"/><Property name="description">Path inside repository share where resource should be saved.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">ResourceDeleted</Property><Property name="defaultValue"/><Property name="description">Result: true if resource was deleted, false otherwise.</Property></Properties></Attribute><Attribute type="DseStep"><Properties><Property name="friendlyName">Delete Resource by Id step</Property></Properties></Attribute><Attribute type="DseStepDescription"><Properties><Property name="description">Deletes resource from repository.</Property></Properties></Attribute><Attribute type="DseStepArgument"><Properties><Property name="argumentName">Id</Property><Property name="defaultValue"/><Property name="description">Resource ID (from Resource Catalog).</Property></Properties></Attribute></Attributes></Metadata></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted Step data'
	COMMIT TRANSACTION
END

--
-- 3. Insert ServiceStepObserver data
--
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	SET	@FragmentId = '{6ADFD06A-BE6A-4127-9D12-DCA2EA5538C9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DSE.InvokeServiceStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DSE.InvokeServiceStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DSE.InvokeServiceStep"><Name>ServiceBus.ServiceHost.DSE.InvokeServiceStep</Name><Group>ServiceHost</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{E9502E22-B813-4463-AB18-F20B03916C8A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.Metering.MeteringPointManagement.SaveStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.Metering.MeteringPointManagement.SaveStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.Metering.MeteringPointManagement.SaveStep"><Name>ServiceBus.Metering.MeteringPointManagement.SaveStep</Name><Group>Metering</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{2C2D1EB0-F47E-47F9-93C3-07F89BB4D8D2}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.Logging.GetPageStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.Logging.GetPageStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.Logging.GetPageStep"><Name>ServiceBus.Logging.GetPageStep</Name><Group>Logging</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A87DA9D7-A582-426B-A5DD-CB9B679641EA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.Logging.LogStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.Logging.LogStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.Logging.LogStep"><Name>ServiceBus.Logging.LogStep</Name><Group>Logging</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A26C2892-D71A-498F-BF16-E055AC870F6F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DSE.ServiceInvokeStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DSE.ServiceInvokeStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DSE.ServiceInvokeStep"><Name>ServiceBus.ServiceHost.DSE.ServiceInvokeStep</Name><Group>ServiceHost</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{CA0EB906-9279-4E65-8633-5CA80EE7E813}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep"><Name>ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep</Name><Group>Metering</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{D200805E-BB9C-48AE-9750-43E6588908CA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep"><Name>ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep</Name><Group>Metering</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{8F25CF5F-0778-414E-BE2A-97DB58F8BDF5}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.BooleanExpression'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.BooleanExpression'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.BooleanExpression"><Name>ServiceBus.ServiceHost.DseStep.BooleanExpression</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{270C9FCD-E078-4640-A227-BD79D9EE4896}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.BytesToString'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.BytesToString'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.BytesToString"><Name>ServiceBus.ServiceHost.DseStep.BytesToString</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A47DD34A-1D30-42F8-A8BB-1A084BDEA268}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.ExpressionEvaluation"><Name>ServiceBus.ServiceHost.DseStep.ExpressionEvaluation</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{94E05292-E32F-495E-8994-18991624DF4B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.LoadFileFromUri'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.LoadFileFromUri'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.LoadFileFromUri"><Name>ServiceBus.ServiceHost.DseStep.LoadFileFromUri</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{7116E072-3160-4AA8-9AB0-A28A1B743F1D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.RegexMatch'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.RegexMatch'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.RegexMatch"><Name>ServiceBus.ServiceHost.DseStep.RegexMatch</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A7055FC1-93D7-4A0C-A530-226E767D233C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.StringToBinary'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.StringToBinary'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.StringToBinary"><Name>ServiceBus.ServiceHost.DseStep.StringToBinary</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{EEC95C06-B19D-445E-991F-D540A0AEC1D7}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.StringToXmlDoc'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.StringToXmlDoc'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.StringToXmlDoc"><Name>ServiceBus.ServiceHost.DseStep.StringToXmlDoc</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{02D0641C-74C2-423F-ACB6-37FF215AD481}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.StringToXmlSchema'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.StringToXmlSchema'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.StringToXmlSchema"><Name>ServiceBus.ServiceHost.DseStep.StringToXmlSchema</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{1EABDB1D-7D9E-4C39-A334-F8751259E6A4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.ValidateXmlSchema"><Name>ServiceBus.ServiceHost.DseStep.ValidateXmlSchema</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{0157E273-67B6-4228-8C5E-D4940D0492DB}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.WriteBytesToFile'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.WriteBytesToFile'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.WriteBytesToFile"><Name>ServiceBus.ServiceHost.DseStep.WriteBytesToFile</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{E3DBD4DE-E47C-4A1A-94EA-8F4921746445}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile"><Name>ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{D21861F1-44E7-40C2-AE52-1EAB9057E70C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlAttributeValue'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlAttributeValue'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.XmlAttributeValue"><Name>ServiceBus.ServiceHost.DseStep.XmlAttributeValue</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{67039810-CD66-4A8B-9A14-FD2DF23AA877}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlDocToString'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlDocToString'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.XmlDocToString"><Name>ServiceBus.ServiceHost.DseStep.XmlDocToString</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A7297BFC-9C17-4A8D-BBEF-66388C831BB9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode"><Name>ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{84483FF1-32C7-4315-9934-B5125EE7A197}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlNodeName'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlNodeName'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.XmlNodeName"><Name>ServiceBus.ServiceHost.DseStep.XmlNodeName</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{E5F21FFB-85AD-4F4A-968D-D74B5CCE38F4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlNodeToString'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlNodeToString'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.XmlNodeToString"><Name>ServiceBus.ServiceHost.DseStep.XmlNodeToString</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{A6A38787-6FF3-4A31-9C9A-DBD3172744D0}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.XpathQueryMultiple"><Name>ServiceBus.ServiceHost.DseStep.XpathQueryMultiple</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{DB456943-1E7C-49CD-BB6D-2D65495838B7}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XpathQuerySingle'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XpathQuerySingle'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.DseStep.XpathQuerySingle"><Name>ServiceBus.ServiceHost.DseStep.XpathQuerySingle</Name><Group>Dse Steps</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{0B5FCE7B-7654-47A3-8AE0-374700775594}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.SaveRequestStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.SaveRequestStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.SaveRequestStep"><Name>ServiceBus.ServiceHost.RequestManagement.SaveRequestStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{2A11BF8F-58A5-421B-899C-B70D3360AC04}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.RouteByActionStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.RouteByActionStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.RouteByActionStep"><Name>ServiceBus.ServiceHost.RequestManagement.RouteByActionStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{4BF33037-BEE5-42D1-B67B-CBCB061918FF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep"><Name>ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{CDDCCC69-382B-427B-8BA0-9BFB2B4FB33A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep"><Name>ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{F8165980-1587-484B-942A-ED22350AD969}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep"><Name>ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{89DE6519-C8F3-4ABE-BD04-2BBC1FA702F8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep"><Name>ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{1709E3FA-F0D3-45A7-A51C-348F0D0EA319}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep"><Name>ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{931FC246-7D48-4FB3-BBA8-2BD7CBCA5D1E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep"><Name>ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{D4BBBB60-9BDD-4B6F-A4EA-85C4FD097CA1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep"><Name>ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{91D79A2C-B6B7-412D-8439-C6868D3160F4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep"><Name>ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{AC4B51AD-3CBA-48BC-A60F-6BE5CC5316AC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep"><Name>ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{2422FD8B-610F-4A22-AB48-B5EAAB4CBE07}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep"><Name>ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep</Name><Group>Request Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{57012014-E2C5-41AF-AFAB-7C161A0BC568}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep"><Name>ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep</Name><Group>Resource Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{53B505F6-3098-46E3-AE8B-000341A3826E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep"><Name>ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep</Name><Group>Resource Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	  
	  
	  
	SET	@FragmentId = '{84CD83BF-544F-4116-814B-92C4E08001F1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep'
			SET @Description = 'ServiceStepObserver.Step.ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep'
	  
			INSERT INTO Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceStepObserver',
				'<Step id="ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep"><Name>ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep</Name><Group>Resource Management</Group><ReferenceCounter>0</ReferenceCounter></Step>'
			)
		END
	  
	  
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	 
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted ServiceStepObserver data'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- PreviousReferenceID: 15634
SET @TrackingID = '{14756E16-68C5-4c9d-B371-3F7E741B2A3C}'
SET @ReferenceID = '18791'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7	-- Fragments created and linked to appropriate section(s)

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- 1. Move test cases to their own fragment
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- Create table that will temporarily hold new TestCase fragments
	CREATE TABLE #NewFragments18791
	(
		ServiceFragmentId uniqueidentifier,
		Id uniqueidentifier,
		RootGroupId uniqueidentifier,
		Name varchar(250),
		Description varchar(1024),
		SectionId uniqueidentifier,
		RootXmlNode varchar(1024),
		Contents xml
	)

	-- Populate temporary NewFragments table
	INSERT INTO #NewFragments18791
	SELECT	
			f.Id AS ServiceFragmentId,
			NEWID() AS Id, -- Generate new fragment id
			f.RootGroupId,
			f.Name + '.TestCase.' + TestCase.value( '@name', 'varchar( MAX )' ) AS Name,
			f.Description + ' test case' AS Description,
			f.SectionId,
			f.RootXmlNode +
				'/Service name="' + f.Contents.value( '(Service/@name)[1]', 'varchar( MAX )' ) +
				'"/ServiceTestCases' AS RootXmlNode,
			TestCase.query( '.' ) AS Contents
	FROM	dbo.Active_Fragments f
			CROSS APPLY
			f.Contents.nodes( 'Service/ServiceTestCases/TestCase' ) AS TestCases( TestCase )
	WHERE	f.Contents.exist( 'Service' ) = 1
			AND
			f.Contents.exist( 'Service/ServiceTestCases' ) = 1

	-- Insert new fragments
	INSERT INTO dbo.Active_Fragments
	(
		Id,
		RootGroupId,
		Name,
		Description,
		SectionId,
		RootXmlNode,
		Contents
	)
	SELECT	nf.Id,
			nf.RootGroupId,
			nf.Name,
			nf.Description,
			nf.SectionId,
			nf.RootXmlNode,
			nf.Contents
	FROM	#NewFragments18791 nf

	-- Insert associations for new fragments
	INSERT INTO dbo.Active_GroupFragments
	(
		RootGroupId,
		GroupId,
		FragmentId
	)
	SELECT	agf.RootGroupId,
			agf.GroupId,
			nf.Id AS FragmentId
	FROM	#NewFragments18791 nf
			JOIN
			Active_GroupFragments agf
				ON	agf.FragmentId = nf.ServiceFragmentId

	-- Now we have all test cases fragments inserted and associated:
	-- Remove ServiceTestCases element from every Service that has it
	UPDATE	dbo.Active_Fragments
	SET		Contents.modify( 'delete (Service/ServiceTestCases)' )
	FROM	dbo.Active_Fragments f
			JOIN
			#NewFragments18791 nf
				ON	nf.ServiceFragmentId = f.Id

	-- Drop temporary table
	DROP TABLE #NewFragments18791
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Moved test cases to their own fragment'
	COMMIT TRANSACTION
END
GO

--
-- ServiceBusConfiguration - Update test cases assert attribute name "Asynchronous" to "ServicePool.ExecutionType"
--

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{14756E16-68C5-4c9d-B371-3F7E741B2A3C}' -- PreviousReferenceID: 18791
SET @TrackingID = '{F85F728D-9757-4839-B5CA-4914A8931E04}'
SET @ReferenceID = '19358'
SET @Author = 'Haris Priganica'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1	-- Moved test cases to their own fragment
SET @Section = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- Update test cases assert attribute name "Asynchronous" to "ServicePool.ExecutionType"
	UPDATE Active_Fragments
	   SET Contents = REPLACE( CONVERT( varchar(max), Contents), 'Attribute name="Asynchronous"', 'Attribute name="ServicePool.ExecutionType"')
	 WHERE Contents.exist( './/TestCase/Assertions/Assert/Attribute [@name="Asynchronous"]' ) = 1
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Update test cases assert attribute name "Asynchronous" to "ServicePool.ExecutionType"'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID1 uniqueidentifier
DECLARE @PreviousTrackingID2 uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID1 = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- PreviousReferenceID: 15634
SET @PreviousTrackingID2 = '{D4F72549-EA20-4432-B2B7-F058C6C461C1}' -- PreviousReferenceID: 16823
SET @TrackingID = '{98CFAEE0-6C55-481a-A774-605B1E196416}'
SET @ReferenceID = '18285'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection1 int
DECLARE @PreviousSection2 int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection1 = 7	-- ServiceHost section fragments inserted
SET @PreviousSection2 = 4	-- PubSub section fragments inserted

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Ensure that receiveTimeout and inactivityTimeout have "Infinite" value
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID1, @PreviousSection1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @PreviousTrackingID2, @PreviousSection2 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	-- Create table that will temporarily hold matching fragments
	CREATE TABLE #UpdatedFragments18285
	(
		ExistingId int,
		NewContents xml,
		IsProcessed bit
	)
	
	-- Populate temporary table with fragments that contain binding
	INSERT INTO #UpdatedFragments18285
	SELECT		ReplicationId,
				Contents,
				0 -- At the beginning, fragments are not processed
	FROM		Active_Fragments
	WHERE		Contents.exist( './/BindingXml/bindings/customBinding/binding' ) = 1
	
	-- Delete receiveTimeout if it exists as binding attribute
	UPDATE	#UpdatedFragments18285
	SET		NewContents.modify
			('
				delete (.//BindingXml/bindings/customBinding/binding/@receiveTimeout)
			 ')
	WHERE	NewContents.exist( './/BindingXml/bindings/customBinding/binding/@receiveTimeout' ) = 1	
	
	DECLARE @HasMore bit
	DECLARE @Id int
	DECLARE @Contents xml
	DECLARE @Position int
	
	-- Insert receiveTimeout attribute
	SET		@HasMore = 1
	WHILE	( @HasMore = 1 )
		BEGIN
			-- Select next unprocessed fragment
			SELECT	@Id = ExistingId, @Contents = NewContents
			FROM	#UpdatedFragments18285
			WHERE	IsProcessed = 0
			
			IF @Id IS NULL
				SET @HasMore = 0
			ELSE
				BEGIN
					-- Prepare new contents
					SET		@Position = 1
					WHILE	( @Contents.exist('(.//BindingXml/bindings/customBinding/binding)[sql:variable("@Position")]') = 1 )
						BEGIN
							SET	@Contents.modify
							('
								insert attribute receiveTimeout {"Infinite"} into ((.//BindingXml/bindings/customBinding/binding)[sql:variable("@Position")])[1]
							 ')	
							
							SET	@Position = @Position + 1	
						END		
					
					-- Update contents and mark fragment as processed
					UPDATE	#UpdatedFragments18285
					SET		NewContents = @Contents,
							IsProcessed = 1
					WHERE	ExistingId = @Id
				END
			
			-- Reset Id
			SET	@Id = NULL
		END
	
	-- Reset Processed flag for all fragments
	UPDATE	#UpdatedFragments18285
	SET		IsProcessed = 0
	
	-- Delete inactivityTimeout if it exists as binding/reliableSession attribute
	UPDATE	#UpdatedFragments18285
	SET		NewContents.modify
			('
				delete (.//BindingXml/bindings/customBinding/binding/reliableSession/@inactivityTimeout)
			 ')
	WHERE	NewContents.exist( './/BindingXml/bindings/customBinding/binding/reliableSession/@inactivityTimeout' ) = 1	
	
	-- Insert inactivityTimeout attribute
	SET		@HasMore = 1
	WHILE	( @HasMore = 1 )
		BEGIN
			-- Select next unprocessed fragment
			SELECT	@Id = ExistingId, @Contents = NewContents
			FROM	#UpdatedFragments18285
			WHERE	IsProcessed = 0
			
			IF @Id IS NULL
				SET @HasMore = 0
			ELSE
				BEGIN
					-- Prepare new contents
					SET		@Position = 1
					WHILE	( @Contents.exist('(.//BindingXml/bindings/customBinding/binding/reliableSession)[sql:variable("@Position")]') = 1 )
						BEGIN
							SET	@Contents.modify
							('
								insert attribute inactivityTimeout {"Infinite"} into ((.//BindingXml/bindings/customBinding/binding/reliableSession)[sql:variable("@Position")])[1]
							 ')	
							
							SET	@Position = @Position + 1	
						END		
					
					-- Update contents and mark fragment as processed
					UPDATE	#UpdatedFragments18285
					SET		NewContents = @Contents,
							IsProcessed = 1
					WHERE	ExistingId = @Id
				END
			
			-- Reset Id
			SET	@Id = NULL
		END
	
	-- Update original fragment
	UPDATE	Active_Fragments
	SET		Contents = NewContents
	FROM	#UpdatedFragments18285
	WHERE	ReplicationId = ExistingId	

	-- Drop temporary table containing the updated fragments
	DROP TABLE #UpdatedFragments18285

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Set receiveTimeout and inactivityTimeout to "Infinite" value'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{bbcd35b2-0e19-4650-b4e4-883f39f1dccb}'
SET @ReferenceID = '16243'
SET @Author = 'Enes Pelko'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE	@LOGGING uniqueidentifier
SET		@LOGGING = '{398F8990-F814-4e83-9EBC-B6AD9E1E8BB4}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

-- Macros
DECLARE	@SP_SYSTEM_LOCAL uniqueidentifier
SET		@SP_SYSTEM_LOCAL = '{F1CB781D-6056-4599-9C6C-D802A84D96BA}'

DECLARE @LOGGING_FILENAME_LISTENER uniqueidentifier
SET		@LOGGING_FILENAME_LISTENER = '{A9B6C965-F5BB-4132-9B33-D250EF19A702}'

DECLARE @FragmentId uniqueidentifier

--
-- 5. Add resource
--
SET @Section = 5
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{6FECF978-2EBC-4b21-AC3A-6CFEA87C4D9E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll'
			SET @Description = 'ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll resource'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Contexts"',
				'
<Resource name="ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll" id="EC469A37-5EBD-4f15-8728-A0E2DA1D9177">
  <FileName>ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll</FileName>
  <Bytes />
  <Dependencies>
    <Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
    <Resource name="ServiceBus.Utility.Unity.dll" />
  </Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new resource: Resource.ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll'
	COMMIT TRANSACTION
END

--
-- 6. Update ServicePools to add new resource to implementation
--
SET @Section = 6
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	update Active_Fragments
	set Contents.modify
	(
		'insert <Resource name="ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll"/> into (/ServicePool/Implementation)[1]'
	) 
	where
	Contents.exist( '/ServicePool/Implementation/Resource[@name="ServiceBus.ServiceHost.Contexts.MeteringContext.dll"]' ) = 1 AND
	Contents.exist( '/ServicePool/Implementation/Resource[@name="ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll"]' ) = 0

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Updated ServicePools to add new resource to implementation'
	COMMIT TRANSACTION
END

--
-- 7. Add ServiceCallerContext to ContextManager configuration
--
SET @Section = 7
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	update Active_Fragments
	set Contents.modify
	(
		'insert 
		
			<ServiceCallerContexts>
				<Context name="ServiceCallerContext">
					<ContextFactoryData name="ServiceCallerContextFactory" />
				</Context>
			</ServiceCallerContexts>
			
		 into
		 (/ContextManager/ContextGroups)[1]'
	) 
	where
	Id = '{D7945F95-D22B-40c4-B6A7-13DD5F8DA636}' AND
	Contents.exist( '/ContextManager/ContextGroups/ServiceCallerContexts' ) = 0

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added ServiceCallerContext to ContextManager configuration'
	COMMIT TRANSACTION
END

--
-- 8. Add ServiceCallerContextFactory to Factories configuration
--
SET @Section = 8
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	update Active_Fragments
	set Contents.modify
	(
		'insert 
		
			<ContextFactory name="ServiceCallerContextFactory">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll" />
					<Type>ServiceBus.ServiceHost.Contexts.ServiceCallerContextFactory</Type>
				</Implementation>
			</ContextFactory>
		
		 into
		 (/Factories/ContextFactories)[1]'
	) 
	where
	Id = '{21344742-5675-4e34-B97A-89F0183A8816}' AND
	Contents.exist( '/Factories/ContextFactories/ContextFactory[@name="ServiceCallerContextFactory"]' ) = 0

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added ServiceCallerContextFactory to Factories configuration'
	COMMIT TRANSACTION
END


GO

--
-- ServiceBusConfiguration - Update default value for test cases assert attribute name "ServicePool.ExecutionType"
--

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{F85F728D-9757-4839-B5CA-4914A8931E04}' -- PreviousReferenceID: 19358
SET @TrackingID = '{BD0C3965-EF14-4748-BAA2-F82B3C867CA0}'
SET @ReferenceID = '19823'
SET @Author = 'Haris Priganica'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1	-- Update test cases assert attribute name "Asynchronous" to "ServicePool.ExecutionType"
SET @Section = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- Update default value for test cases assert attribute name "ServicePool.ExecutionType" from "False" to "Synchronous"
	UPDATE Active_Fragments
	   SET Contents.modify ('replace value of (.//TestCase/Assertions/Assert[@name="Attribute IsAsynchronuous"]/*/Default/Value/text())[1] with "Synchronous"') 
	 WHERE Contents.exist( './/TestCase/Assertions/Assert[@name="Attribute IsAsynchronuous"]/*/Default[Value = "False"]' ) = 1
	   AND Contents.exist( './/TestCase/Assertions/Assert[@name="Attribute IsAsynchronuous"]/Attribute [@name="ServicePool.ExecutionType"]' ) = 1
	  
	-- If any - Update default value for test cases assert attribute name "ServicePool.ExecutionType" from "True" to "Asynchronous" 
	UPDATE Active_Fragments
	   SET Contents.modify ('replace value of (.//TestCase/Assertions/Assert[@name="Attribute IsAsynchronuous"]/*/Default/Value/text())[1] with "Asynchronous"') 
	 WHERE Contents.exist( './/TestCase/Assertions/Assert[@name="Attribute IsAsynchronuous"]/*/Default[Value = "True"]' ) = 1
	   AND Contents.exist( './/TestCase/Assertions/Assert[@name="Attribute IsAsynchronuous"]/Attribute [@name="ServicePool.ExecutionType"]' ) = 1
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Update default value for test cases assert attribute name "ServicePool.ExecutionType"'
	COMMIT TRANSACTION
END
GO

--
-- ServiceBusConfiguration - Delete "SourcePath" and "DestinationPath" from Resource fragment/configuration
--
DECLARE @TrackingID uniqueidentifier, 
		@ReferenceID nchar(10), 
		@Author nvarchar(50)
		
SET @TrackingID = '{C890AD63-59AC-49c6-4701-6CE6344838E5}'
SET @ReferenceID = '18756'
SET @Author = 'Semir Babajic'

DECLARE @SectionCompleted bit, 
		@SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @Section = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

IF DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	--Create ControlData node if it does not exist
	UPDATE dbo.Active_Fragments
	   SET Contents.modify('
			insert
			<ControlData/>
			as last
			into 
			(Controls/Control [@name="ContractResolver"])[1]')
	 WHERE Contents.exist('Controls/Control [@name="ContractResolver"]/ControlData') = 0
	
	UPDATE dbo.Active_Fragments
	   SET Contents.modify('
			insert
			<Observer name="Types"><Implementation><FileName>.\Modules\ServiceBus.Administration.Modules.ContractResolver.dll</FileName><Type>ServiceBus.Administration.Modules.ContractResourceObserver</Type></Implementation></Observer>
			as first 
			into 
			(Controls/Control [@name="ContractResolver"]/ControlData)[1]')

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added ContractResourceObserver into ControlData for ContractResolver'
	COMMIT TRANSACTION
END


GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{C024273C-52E0-431b-85D7-7E95483E935A}'
SET @ReferenceID = '19210'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @PreviousTrackingID = '{09304203-E6D8-4032-8FAE-126A877E8FAA}'	-- PreviousReferenceID: 18279
SET @PreviousSection = 1											-- Fragments of unityConfiguration section created and associated with SERVICEHOST_SERVICE application

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize section ID constant(s)
--
DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4f38-B4ED-5C917010C756}'

--
-- Declare and initialize SERVICEHOST_SERVICE, ADMINISTRATIVE_CONSOLE and COMMANDLINE_RUNTESTCASES application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

--
-- Remove 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IStartStop' fragment and remove links to the fragment from all applications
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @FragmentId uniqueidentifier
	
	--
	-- Set id of 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IStartStop' fragment
	--
	SET	@FragmentId = '{1785CDA0-D9AD-4f6a-877E-1D50345B06A8}'
	
	--
	-- Ensure that we are deleting fragment that we have added to unityConfiguration section of specified environment
	-- and that the fragment contains the original or updated ServiceBus.ServiceHost.IStartStop type mapping
	--
	DECLARE @ReplicationId int
	SET		@ReplicationId = NULL
	
	SELECT	@ReplicationId = ReplicationId
	FROM	Active_Fragments
	WHERE	Id = @FragmentId
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @UNITY_CONFIGURATION
			AND
			(
				Contents.exist( 'type[@type="ServiceBus.ServiceHost.IStartStop, ServiceBus.ServiceHost.Interfaces"]') = 1
				OR
				Contents.exist( 'type[@type="ServiceBus.ServiceHost.IStartStop,ServiceBus.ServiceHost.Interfaces"]') = 1
			)
	
	IF ( @ReplicationId IS NOT NULL )
		BEGIN
			-- Delete the fragment
			DELETE
			FROM	Active_Fragments
			WHERE	ReplicationId = @ReplicationId
			
			-- Delete all associations to the fragment from SERVICEHOST_SERVICE, ADMINISTRATIVE_CONSOLE and COMMANDLINE_RUNTESTCASES applications
			DELETE
			FROM	Active_GroupFragments
			WHERE	RootGroupId = @ROOT_GROUP_ID
					AND
					GroupId = @SERVICEHOST_SERVICE
					AND
					FragmentId = @FragmentId

			DELETE
			FROM	Active_GroupFragments
			WHERE	RootGroupId = @ROOT_GROUP_ID
					AND
					GroupId = @ADMINISTRATIVE_CONSOLE
					AND
					FragmentId = @FragmentId
					
			DELETE
			FROM	Active_GroupFragments
			WHERE	RootGroupId = @ROOT_GROUP_ID
					AND
					GroupId = @COMMANDLINE_RUNTESTCASES
					AND
					FragmentId = @FragmentId
			
			EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Removed IStartStop fragment and links to the fragment from all applications'
		END
	ELSE
		EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'No fragment and association to fragment were removed because no matching IStartStop fragment was found.'

	COMMIT TRANSACTION
END
GO

--
-- Disable Metering until it is fully operational
--
DECLARE @TrackingID uniqueidentifier, 
		@ReferenceID nchar(10), 
		@Author nvarchar(50)
		
SET @TrackingID = '{4B06745D-49F9-4245-AC9A-40462590C7C1}'
SET @ReferenceID = '21959'
SET @Author = 'Rihad Seherac'

DECLARE @SectionCompleted bit, 
		@SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @Section = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

IF DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
		UPDATE [dbo].[Active_Fragments]
		SET [Contents] = '<Enabled>False</Enabled>' 
		WHERE [Name] = 'Enabled'
		  AND [SectionId] = (SELECT TOP 1 [Id] FROM [dbo].[Active_Sections] WHERE [Name] = 'ServiceBus.Metering')
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Disabled Metering until it is fully functional'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634 (Reorganize initial config)
SET @TrackingID = '{407F14BF-863D-4d34-85C3-7A233E150E00}'
SET @ReferenceID = '21607'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7 -- Created fragments and linked them to appropriate section(s)

--
-- 1. Move logging services to Logging service pool, create and link business context and service pool fragments
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'
	
	DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
	SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

	BEGIN TRANSACTION

	--
	-- Move following services to Logging service pool:
	--	ServiceBus.ServiceHost.BseModule.PickupLogEntries
	--	ServiceBus.System.Logging.LoggingService
	--	ServiceBus.System.Logging.GetContextMachineCounts
	--	ServiceBus.System.Logging.GetPage
	--
	
	--
	-- Remove ServicePools element
	--
	UPDATE	Active_Fragments
	SET		Contents.modify( 'delete /Service/ServiceHostData/ServicePools[1]' )
	WHERE	Id IN
			(
				'{7A031131-7959-4515-B750-153330E43278}', -- ServiceBus.ServiceHost.BseModule.PickupLogEntries
				'{C1152418-ECF5-44FE-AE0D-AD0E18665906}', -- ServiceBus.System.Logging.LoggingService
				'{659439DB-4074-42A7-BB84-03EFBC0F01A0}', -- ServiceBus.System.Logging.GetContextMachineCounts
				'{C4898072-052C-4EAB-9A95-BC321BB9D968}'  -- ServiceBus.System.Logging.GetPage
			)
			AND
			RootGroupId = @ROOT_GROUP_ID
	
	--
	-- Add ServicePools element with Logging service pool as default
	--	
	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert
									<ServicePools>
										<ServicePool name="Logging">
											<Default>True</Default>
										</ServicePool>
									</ServicePools>
							  as last
							  into (/Service/ServiceHostData)[1]' )
	WHERE	Id IN
			(
				'{7A031131-7959-4515-B750-153330E43278}', -- ServiceBus.ServiceHost.BseModule.PickupLogEntries
				'{C1152418-ECF5-44FE-AE0D-AD0E18665906}', -- ServiceBus.System.Logging.LoggingService
				'{659439DB-4074-42A7-BB84-03EFBC0F01A0}', -- ServiceBus.System.Logging.GetContextMachineCounts
				'{C4898072-052C-4EAB-9A95-BC321BB9D968}'  -- ServiceBus.System.Logging.GetPage
			)
			AND
			RootGroupId = @ROOT_GROUP_ID
	
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	
	--
	-- Create SP.LOGGING.LOCAL macro and assign it a value for client and server applications
	--
	DECLARE	@SP_LOGGING_LOCAL uniqueidentifier
	SET		@SP_LOGGING_LOCAL = '{15AC2DFD-1679-432b-9DE7-9A16C9A8BB43}'
	
	--
	-- Ensure that SP.LOGGING.LOCAL macro is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SP_LOGGING_LOCAL AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SP.LOGGING.LOCAL'
			SET @Description = 'Indicates whether ServicePool Logging is local'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@SP_LOGGING_LOCAL,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that value is assigned to macro SP_LOGGING_LOCAL for SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND MacroId = @SP_LOGGING_LOCAL ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@SP_LOGGING_LOCAL,
			'True'
		)
	
	--
	-- Ensure that value is assigned to macro SP_LOGGING_LOCAL for ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND MacroId = @SP_LOGGING_LOCAL ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@SP_LOGGING_LOCAL,
			'False'
		)
	
	--
	-- Ensure that value is assigned to macro SP_LOGGING_LOCAL for COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND MacroId = @SP_LOGGING_LOCAL ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@SP_LOGGING_LOCAL,
			'False'
		)
	
	--
	-- Create SP.LOGGING.WCF1.PORT macro and assign it a global value (common for client and server applications)
	--
	DECLARE	@SP_LOGGING_WCF1_PORT uniqueidentifier
	SET		@SP_LOGGING_WCF1_PORT = '{057D7307-4A3F-4bdf-B3E9-0217D887ABB3}'
	
	--
	-- Ensure that SP.LOGGING.WCF1.PORT macro is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SP_LOGGING_WCF1_PORT AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SP.LOGGING.WCF1.PORT'
			SET @Description = 'ServicePool Logging WcfServiceRequestChannel1 port'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@SP_LOGGING_WCF1_PORT,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that value is assigned to macro SP_LOGGING_WCF1_PORT for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SP_LOGGING_WCF1_PORT ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SP_LOGGING_WCF1_PORT,
			'47110'
		)
	
	--
	-- Create SP.LOGGING.WCF2.PORT macro and assign it a global value (common for client and server applications)
	--
	DECLARE	@SP_LOGGING_WCF2_PORT uniqueidentifier
	SET		@SP_LOGGING_WCF2_PORT = '{BF88AF52-DF50-409b-9003-36BDBD6AE501}'
	
	--
	-- Ensure that SP.LOGGING.WCF2.PORT macro is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SP_LOGGING_WCF2_PORT AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SP.LOGGING.WCF2.PORT'
			SET @Description = 'ServicePool Logging WcfServiceRequestChannel2 port'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@SP_LOGGING_WCF2_PORT,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that value is assigned to macro SP_LOGGING_WCF2_PORT for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SP_LOGGING_WCF2_PORT ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SP_LOGGING_WCF2_PORT,
			'47111'
		)

	DECLARE @FragmentId uniqueidentifier
	
	--
	-- Create business context fragment and associate it with all relevant applications
	--
	SET	@FragmentId = '{ADE0EE22-768F-4b31-9354-D57212D30361}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'BusinessContext.ServicePool.Logging'
			SET @Description = 'Business context for Logging service pool'
			
			INSERT INTO Active_Fragments( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'BusinessContexts/BusinessContext name="ServiceHost"/ServicePools',
				'<ServicePool name="Logging" />'
			)
		END
	
	--
	-- Ensure that BusinessContext.ServicePool.Logging fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId,	GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that BusinessContext.ServicePool.Logging fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId,	GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that BusinessContext.ServicePool.Logging fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId,	GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	-- Create service pool fragment and associate it with all relevant applications
	
	--
	-- Ensure that ServicePool.Logging fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{16088ACE-C7E5-4354-B4C9-60402492FCC7}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServicePool.Logging'
			SET @Description = 'Logging service pool'
			
			INSERT INTO Active_Fragments( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ServicePools',
				'
<ServicePool name="Logging">
  <Local>[DSCS:MACRO:SP.LOGGING.LOCAL]</Local>
  <ProcessLoader>
    <UseProcessLoader>False</UseProcessLoader>
    <DisplayDebugMessages>True</DisplayDebugMessages>
    <Implementation>
      <Resource name="ServiceBus.ServiceHost.ServicePoolLoader.exe" />
    </Implementation>
  </ProcessLoader>
  <RequestChannels>
    <RequestChannel name="WcfServiceRequestChannel1">
      <RetryPeriod>00:00:10</RetryPeriod>
      <RequestChannelFactoryData name="WCF">
        <Address>net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SP.LOGGING.WCF1.PORT]/ServiceRequestChannel</Address>
        <SmartStopTimeout>00:00:30</SmartStopTimeout>
        <BindingXml>
          <bindings>
            <customBinding>
              <binding name="CustomTcpBinding" openTimeout="00:00:01" sendTimeout="00:01:00" receiveTimeout="Infinite">
                <reliableSession inactivityTimeout="Infinite" maxRetryCount="8" acknowledgementInterval="00:00:00.2000000" flowControlEnabled="true" maxPendingChannels="3000" maxTransferWindowSize="4096" ordered="true" />
                <binaryMessageEncoding maxReadPoolSize="64" maxWritePoolSize="32" maxSessionSize="4096">
                  <readerQuotas maxDepth="64" maxStringContentLength="131072" maxArrayLength="104857600" maxBytesPerRead="16384" maxNameTableCharCount="32768" />
                </binaryMessageEncoding>
                <tcpTransport manualAddressing="false" maxBufferPoolSize="524288" maxReceivedMessageSize="10485760" connectionBufferSize="65536" hostNameComparisonMode="StrongWildcard" channelInitializationTimeout="00:00:05" maxBufferSize="10485760" maxPendingConnections="3000" maxOutputDelay="00:00:00.2000000" maxPendingAccepts="3000" transferMode="Buffered" listenBacklog="3000" portSharingEnabled="false" teredoEnabled="false">
                  <connectionPoolSettings groupName="default" leaseTimeout="00:05:00" idleTimeout="00:02:00" maxOutboundConnectionsPerEndpoint="5000" />
                </tcpTransport>
              </binding>
            </customBinding>
          </bindings>
        </BindingXml>
      </RequestChannelFactoryData>
    </RequestChannel>
    <RequestChannel name="WcfServiceRequestChannel2">
      <RetryPeriod>00:00:10</RetryPeriod>
      <RequestChannelFactoryData name="WCF">
        <Address>net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SP.LOGGING.WCF2.PORT]/ServiceRequestChannel</Address>
        <SmartStopTimeout>00:00:30</SmartStopTimeout>
        <BindingXml>
          <bindings>
            <customBinding>
              <binding name="CustomTcpBinding" openTimeout="00:00:01" sendTimeout="00:01:00" receiveTimeout="Infinite">
                <reliableSession inactivityTimeout="Infinite" maxRetryCount="8" acknowledgementInterval="00:00:00.2000000" flowControlEnabled="true" maxPendingChannels="3000" maxTransferWindowSize="4096" ordered="true" />
                <binaryMessageEncoding maxReadPoolSize="64" maxWritePoolSize="32" maxSessionSize="4096">
                  <readerQuotas maxDepth="64" maxStringContentLength="131072" maxArrayLength="104857600" maxBytesPerRead="16384" maxNameTableCharCount="32768" />
                </binaryMessageEncoding>
                <tcpTransport manualAddressing="false" maxBufferPoolSize="524288" maxReceivedMessageSize="10485760" connectionBufferSize="65536" hostNameComparisonMode="StrongWildcard" channelInitializationTimeout="00:00:05" maxBufferSize="10485760" maxPendingConnections="3000" maxOutputDelay="00:00:00.2000000" maxPendingAccepts="3000" transferMode="Buffered" listenBacklog="3000" portSharingEnabled="false" teredoEnabled="false">
                  <connectionPoolSettings groupName="default" leaseTimeout="00:05:00" idleTimeout="00:02:00" maxOutboundConnectionsPerEndpoint="5000" />
                </tcpTransport>
              </binding>
            </customBinding>
          </bindings>
        </BindingXml>
      </RequestChannelFactoryData>
    </RequestChannel>
  </RequestChannels>
  <Watchdog>
    <WatchdogFactoryData name="WDF">
      <IsEnabled>True</IsEnabled>
      <!-- Watchdog scan period -->
      <ScanFrequency>00:00:02</ScanFrequency>
      <!-- Maximum time a thread is allowed to run -->
      <MaximumServiceExecutionTime>00:00:20.0</MaximumServiceExecutionTime>
    </WatchdogFactoryData>
  </Watchdog>
  <ServiceRequestManager>
    <RequestQueues>
      <RequestQueue name="Sync">
        <RequestQueueFactoryData name="PassThrough" />
      </RequestQueue>
    </RequestQueues>
    <RequestClassifier>
      <RequestClassifierFactoryData name="SingleQueueClassifier">
        <RequestQueues>
          <RequestQueue name="Sync" />
        </RequestQueues>
      </RequestClassifierFactoryData>
    </RequestClassifier>
    <RequestScheduler>
      <RequestSchedulerFactoryData name="ThreadPool">
        <FloatingThreads>40</FloatingThreads>
        <RequestQueues>
          <RequestQueue name="Sync">
            <ThreadCleanupMode>Synchronous</ThreadCleanupMode>
            <ReservedThreads>60</ReservedThreads>
            <MaxThreads>100</MaxThreads>
          </RequestQueue>
        </RequestQueues>
      </RequestSchedulerFactoryData>
    </RequestScheduler>
  </ServiceRequestManager>
  <ServiceSynchronizationManager>
    <ServiceSynchronization name="SingleThreadedService">
      <ServiceSynchronizationFactoryData name="SingleThreadedService" />
    </ServiceSynchronization>
  </ServiceSynchronizationManager>
  <Implementation>
    <Resource name="ServiceBus.ServiceHost.Common.dll" />
    <Resource name="ServiceBus.Logging.Common.dll" />
    <Resource name="ServiceBus.PubSub.Common.dll" />
    <Resource name="ServiceBus.Metering.Common.dll" />
    <Resource name="ServiceBus.ServiceHost.PersistenceProviders.Request.dll" />
    <Resource name="ServiceBus.ServiceHost.Contexts.BusinessContext.dll" />
    <Resource name="ServiceBus.ServiceHost.Contexts.LoggingContext.dll" />
    <Resource name="ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll" />
    <Resource name="ServiceBus.ServiceHost.Contexts.MeteringContext.dll" />
    <Resource name="ServiceBus.Metering.Targets.ServiceHost.dll" />
    <Resource name="ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll" />
  </Implementation>
</ServicePool>
				'
			)
		END

	--
	-- Ensure that ServicePool.Logging fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId,	GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that ServicePool.Logging fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId,	GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that ServicePool.Logging fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments( RootGroupId,	GroupId, FragmentId )
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)	

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Moved logging services to Logging service pool, created and linked business context and service pool fragments'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634 (Reorganize initial config)
SET @TrackingID = '{81BFE358-885B-4837-B672-C573441C674E}'
SET @ReferenceID = '22352'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7 -- Created fragments and linked them to appropriate section(s)

--
-- 1.a. Create new resource fragment for ServiceBus.Utility.Wcf.dll
-- 1.b. Associate new resource fragment with all applications that require ServiceBus.Configuration.Client.dll assembly
-- 1.c. Add it as dependency into resource fragment of ServiceBus.Configuration.Client.dll
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'
	
	DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
	SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
	--
	-- Declare and initialize section ID constants resource fragment of ServiceBus.Configuration.Client.dll
	--
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

	BEGIN TRANSACTION

	--
	-- Create new resource fragment for ServiceBus.Utility.Wcf.dll
	--
	DECLARE @FragmentId uniqueidentifier
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	
	SET		@FragmentId = '980D4EDC-1CA7-4134-9F23-010D1FA5C06E'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET	@Name = 'Resource.ServiceBus.Utility.Wcf.dll'
			SET @Description = 'ServiceBus.Utility.Wcf.dll resource'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'
<Resource name="ServiceBus.Utility.Wcf.dll" id="08e02aaa-533b-4f9a-978e-c1f11c9353fe">
  <FileName>ServiceBus.Utility.Wcf.dll</FileName>
  <Bytes />
  <Dependencies />
</Resource>
				'
			)
		END
	
	
	--
	-- Associate new resource fragment with all applications that require ServiceBus.Configuration.Client.dll assembly
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	--
	-- Add ServiceBus.Utility.Wcf.dll as dependency of ServiceBus.Configuration.Client.dll resource
	-- (but only if it is not already there)
	--
	SET		@FragmentId = '3BB71F36-403A-47AB-AA39-94193CA59BAD' -- ServiceBus.Configuration.Client.dll resource fragment
	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert
									<Resource name="ServiceBus.Utility.Wcf.dll" />
							  as last
							  into (/Resource/Dependencies)[1]' )
	WHERE	Id = @FragmentId
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			Contents.exist( '/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Wcf.dll"]' ) = 0
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Created ServiceBus.Utility.Wcf.dll resource fragment, associated the fragment with relevant applications and added the resource as dependency'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{0600CFD4-76F2-4e7a-82F7-2971DAEA0309}' -- 18280 (Configuration service - Reduce number of entries in configuration file)
SET @TrackingID = '{AA01AE96-9204-4940-9FCD-59300CAFBE1C}'
SET @ReferenceID = '22601'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1 -- Created unityConfiguration section

--
-- 1.a. Create new type mapping fragment for ServiceBus.ServiceHost.IPlatformErrorFactory type
-- 1.b. Associate new type mapping fragment with all applications depending on it
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'
	
	DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
	SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
	--
	-- Declare and initialize section ID constants resource fragment of ServiceBus.Configuration.Client.dll
	--
	DECLARE @UNITY_CONFIGURATION uniqueidentifier
	SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4f38-B4ED-5C917010C756}'

	BEGIN TRANSACTION

	--
	-- Create new type mapping fragment for ServiceBus.ServiceHost.IPlatformErrorFactory type
	--
	DECLARE @FragmentId uniqueidentifier
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	
	SET		@FragmentId = '{049C4463-0756-44cb-8DE4-440CE1ADF8DE}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET	@Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IPlatformErrorFactory'
			SET @Description = 'Type mapping used for resolution of ServiceBus.PubSub.IPlatformErrorFactory instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.ServiceHost.IPlatformErrorFactory, ServiceBus.ServiceHost.Interfaces"
	  mapTo="ServiceBus.ServiceHost.PlatformErrorFactory, ServiceBus.ServiceHost.Common">
	<lifetime type="singleton" />
</type>
				'
			)
		END

	--
	-- Associate new type mapping fragment with all applications depending on it
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Created ServiceBus.ServiceHost.IPlatformErrorFactory type mapping fragment and associated the fragment with relevant applications'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author nvarchar( 50 )

SET @PreviousTrackingID = '{407F14BF-863D-4d34-85C3-7A233E150E00}' -- 21607 (Logging needs to have their own service pool)
SET @TrackingID = '{34969E08-2619-4e73-82E5-0FB6C7BCD361}'
SET @ReferenceID = '22598'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1 -- Moved logging services to Logging service pool, created and linked business context and service pool fragments

--
-- Update existing ServicePool fragments to migrate current configuration of WCF request channels
-- to format parsable by standard WCF parsers
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

	BEGIN TRANSACTION

	-- Create and populate temporary table to hold information about configuration to be migrated
	CREATE TABLE FragmentContents
	(
		Id int,
		ServicePoolName varchar( 256 ),
		RequestChannelName varchar( 256 ),
		RequestChannelAddress varchar( 1024 ),
		BindingType varchar( 50 ),
		BindingName varchar( 256 ),
		MigratedConfiguration xml,
		IsMigrated bit
	)

	INSERT INTO FragmentContents
	SELECT	ReplicationId,		
			ServicePool.value( './@name', 'varchar( 256 )' ),--AS ServicePoolName,
			RequestChannel.value( './@name', 'varchar( 256 )' ),-- AS RequestChannelName
			RequestChannel.value( '( ./RequestChannelFactoryData/Address )[ 1 ]', 'varchar( 1024 )' ),-- AS RequestChannelAddress
			RequestChannel.value( 'local-name( ( ./RequestChannelFactoryData/BindingXml/bindings/* )[ 1 ] )', 'varchar( 50 )' ),-- AS BindingType
			RequestChannel.value( '( ./RequestChannelFactoryData/BindingXml/bindings/*/binding/@name )[ 1 ]', 'varchar( 256 )' ),-- AS BindingName
			Contents,
			0	-- At the beginning, request channel configuration is not migrated
	FROM	Active_Fragments
			CROSS APPLY
			Contents.nodes( 'ServicePool' ) AS ServicePools( ServicePool )
			CROSS APPLY
			ServicePool.nodes( './RequestChannels/RequestChannel' ) AS RequestChannels( RequestChannel )
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			RootXmlNode = 'ServicePools'
			AND
			Contents.exist( 'ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData[ @name="WCF" ]' ) = 1

	DECLARE @ReplicationId int
	DECLARE @ServicePoolName varchar( 256 )
	DECLARE @RequestChannelName varchar( 256 )
	DECLARE @RequestChannelAddress varchar( 1024 )
	DECLARE @BindingType varchar( 50 )
	DECLARE @BindingName varchar( 256 )
	DECLARE @Bindings varchar( 4096 )
	DECLARE @Statement nvarchar( max )

	-- Migrate configuration of each WCF service request channel
	WHILE EXISTS( SELECT Id FROM FragmentContents WHERE IsMigrated = 0 )
	BEGIN
		-- Select information about the channel for configuration migration
		SELECT TOP 1
				@ReplicationId = Id,
				@ServicePoolName = ServicePoolName,
				@RequestChannelName = RequestChannelName,
				@RequestChannelAddress = RequestChannelAddress,
				@BindingType = BindingType,
				@BindingName = BindingName
		FROM	FragmentContents
		WHERE	IsMigrated = 0
		
		-- Ensure that 'ServiceModel' element and its 'services' and 'client' child elements are present
		EXEC
		(
			'UPDATE	FragmentContents
			SET		MigratedConfiguration.modify
					(
					''insert
							<ServiceModel>
								<services />
								<client />
								<behaviors>
									<serviceBehaviors />
								</behaviors>
							</ServiceModel>
					 as last
					 into ( ServicePool[ @name="' + @ServicePoolName + '" ]/RequestChannels/' +
							'RequestChannel[ @name="' + @RequestChannelName + '" ]/RequestChannelFactoryData[ @name="WCF" ] )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)

		-- Insert WCF service configuration
		EXEC
		(
			'UPDATE	FragmentContents
			SET		MigratedConfiguration.modify
					(
					''insert
							<service name="ServiceBus.ServiceHost.RequestChannels.Wcf.Service"
									 behaviorConfiguration="RequestChannelBehavior">
								<endpoint address=""
										  binding="' + @BindingType + '" bindingConfiguration="' + @BindingName + '"
										  contract="ServiceBus.ServiceHost.RequestChannels.Wcf.IService" />
								<host>
									<baseAddresses>
										<add baseAddress="' + @RequestChannelAddress + '" />
									</baseAddresses>
								</host>
							</service>
					  as last
					  into ( ServicePool[ @name="' + @ServicePoolName + '" ]/RequestChannels/' +
							'RequestChannel[ @name="' + @RequestChannelName + '" ]/RequestChannelFactoryData[ @name="WCF" ]/ServiceModel/services )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		-- Insert WCF service behavior configuration
		EXEC
		(
			'UPDATE	FragmentContents
			SET		MigratedConfiguration.modify
					(
					''insert
							<behavior name="RequestChannelBehavior">
								<serviceThrottling maxConcurrentCalls="500000" maxConcurrentSessions="500000" maxConcurrentInstances="1" />
							</behavior>
					  as last
					  into ( ServicePool[ @name="' + @ServicePoolName + '" ]/RequestChannels/' +
							'RequestChannel[ @name="' + @RequestChannelName + '" ]/RequestChannelFactoryData[ @name="WCF" ]/ServiceModel/behaviors/serviceBehaviors )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		-- Insert WCF client configuration
		EXEC
		(
			'UPDATE	FragmentContents
			SET		MigratedConfiguration.modify
					(
					''insert
							<endpoint name="' + @BindingName + '_IService"
									  address="' + @RequestChannelAddress + '"
									  binding="' + @BindingType + '" bindingConfiguration="' + @BindingName + '"
									  contract="ServiceBus.ServiceHost.RequestChannels.Wcf.IService" />
					  as last
					  into ( ServicePool[ @name="' + @ServicePoolName + '" ]/RequestChannels/' +
							'RequestChannel[ @name="' + @RequestChannelName + '" ]/RequestChannelFactoryData[ @name="WCF" ]/ServiceModel/client )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)

		-- Get WCF bindings configuration
		SET		@Bindings = NULL
		SET		@Statement = 
			N'SELECT	@Bindings = CONVERT
				( varchar( max ), MigratedConfiguration.query
					(
						''ServicePool[ @name="' + @ServicePoolName + '" ]/RequestChannels/' +
						'RequestChannel[ @name="' + @RequestChannelName + '" ]/RequestChannelFactoryData[ @name="WCF" ]/BindingXml/bindings''
					)
				)
			FROM	FragmentContents
			WHERE	Id = ' + CONVERT( varchar( 11 ), @ReplicationId )

		EXECUTE sp_executesql @Statement, N'@Bindings varchar( max ) OUTPUT', @Bindings = @Bindings OUTPUT
				
		-- Insert obtained WCF bindings configuration
		EXEC
		(
			'UPDATE	FragmentContents
			SET		MigratedConfiguration.modify
					(
					''insert
							' + @Bindings + '
					  as last
					  into ( ServicePool[ @name="' + @ServicePoolName + '" ]/RequestChannels/' +
							'RequestChannel[ @name="' + @RequestChannelName + '" ]/RequestChannelFactoryData[ @name="WCF" ]/ServiceModel )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		-- Delete BindingXml and Address elements
		EXEC
		(
			'UPDATE	FragmentContents
			SET		MigratedConfiguration.modify
					(
						''delete ( ServicePool[ @name="' + @ServicePoolName + '" ]/RequestChannels/' +
								'RequestChannel[ @name="' + @RequestChannelName + '" ]/RequestChannelFactoryData[ @name="WCF" ]/BindingXml )''
					)
			WHERE	Id = ' + @ReplicationId
		)	
		EXEC
		(
			'UPDATE	FragmentContents
			SET		MigratedConfiguration.modify
					(
						''delete ( ServicePool[ @name="' + @ServicePoolName + '" ]/RequestChannels/' +
								'RequestChannel[ @name="' + @RequestChannelName + '" ]/RequestChannelFactoryData[ @name="WCF" ]/Address )''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		-- Mark request channel configuration as migrated
		UPDATE	FragmentContents
		SET		IsMigrated = 1
		WHERE	Id = @ReplicationId
				AND
				ServicePoolName = @ServicePoolName
				AND
				RequestChannelName = @RequestChannelName
	END

	-- Now use migrated request channel configuration to update current configuration
	UPDATE	Active_Fragments
	SET		Contents = fc.MigratedConfiguration
	FROM	FragmentContents fc
	WHERE	ReplicationId = fc.Id

	-- Drop the temporary table containing information about migrated configuration
	DROP TABLE FragmentContents

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Migrated existing request channels configuration to format parsable by standard WCF parsers'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{F3177F0E-F90F-4204-B29C-6DCAD2B12A02}'
SET @ReferenceID = '23103'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @FragmentId uniqueidentifier
	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--Applications
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
	SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

	-- Sections
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'
		
	BEGIN TRANSACTION
	--
	-- Ensure that fragment is created for the root group
	--	
	SET @FragmentId = '{BDD9235D-33A5-4878-9410-1B42536E0ED6}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Requests.GetServiceResponse'
			SET @Description = 'GetServiceResponse SSE service'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Requests"',
				'
<Service name="ServiceBus.System.ServiceHost.Requests.GetServiceResponse">
  <ServiceContract>
    <Description>Gets ServiceResponse for the specified service</Description>
    <Inputs>
      <Input name="RequestId">
        <Description>Id of request for which to get ServiceResponse</Description>
        <MapTo>RequestId</MapTo>
        <Required>True</Required>
      </Input>
    </Inputs>
    <Results>
      <Result name="ServiceResponse">
        <Description>Service response of the specified request</Description>
        <MapTo>ServiceResponse</MapTo>
      </Result>
    </Results>
  </ServiceContract>
  <ServiceHostData>
    <ExecutionType>Synchronous</ExecutionType>
    <MaximumProcessingTime>0.00:01:00.000</MaximumProcessingTime>
    <ServicePools>
      <ServicePool name="System">
        <Default>True</Default>
      </ServicePool>
    </ServicePools>
  </ServiceHostData>
  <ServiceFactoryData name="SSE" />
</Service>
				'
			)
		END


	--
	-- Ensure that fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added GetServiceResponse SSE service.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{4162C37F-3640-4094-877A-11CC677B431A}'
SET @ReferenceID = '23151'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @FragmentId uniqueidentifier
	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--Applications
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
	SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

	-- Sections
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'
		
	BEGIN TRANSACTION
	
	--
	-- Ensure that fragment is created for the root group
	--	
	SET @FragmentId = '{778BFB3B-3513-4A44-A906-C479528BEE9E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'PubSubSubscriptionInactivityTimeout'
			SET @Description = 'PubSub subscription inactivity timeout'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'<PubSubSubscriptionInactivityTimeout>00:30:00</PubSubSubscriptionInactivityTimeout>'
			)
		END


	--
	-- Ensure that fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added PubSub subscription inactivity timeout.'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author nvarchar( 50 )

SET @PreviousTrackingID = '{bbcd35b2-0e19-4650-b4e4-883f39f1dccb}' -- 18682 (Added ServiceBus.CommandLine.RunTestCase application)
SET @TrackingID = '{D84BF437-A321-4c76-AF56-9968A5CAEBB1}'
SET @ReferenceID = '22289'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1 -- Created COMMANDLINE_RUNTESTCASES application

--
-- Update existing ServicePool fragments to migrate current configuration of WCF request channels
-- to format parsable by standard WCF parsers
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
	SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

	BEGIN TRANSACTION
	
	DECLARE @Name varchar( 250 )
	DECLARE @Description varchar( 1024 )
	DECLARE @FragmentId uniqueidentifier

	--
	-- 1. Ensure that ResultsRetentionTime fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{39351C6D-3B07-433c-AE36-ADA7E120A421}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ResultsRetentionTime'
			SET @Description = 'Timeout that indicates how long to wait for a service response receipt via PubSub'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'<ResultsRetentionTime>04:00:00</ResultsRetentionTime>'
			)
		END

	--
	-- 1.a. Ensure that ResultsRetentionTime fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- 1.b. Ensure that ResultsRetentionTime fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- 1.b. Ensure that ResultsRetentionTime fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)

	--
	-- 2. Insert PersistPending and PersistActive flags where necessary:
	--    Default value of PersistPending and PersistActive nodes was True.
	--    We must preserve that behavior because there might be some services relying on the behavior.
	--
	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert
									<PersistPending>True</PersistPending>
							  as first
							  into ( //Service/ServiceHostData )[ 1 ]' )
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			(
				LTRIM( RTRIM( RootXmlNode ) ) = 'Services'
				OR
				LTRIM( RTRIM( RootXmlNode ) ) LIKE 'Services/%'
			)
			AND
			Contents.exist( 'Service' ) = 1
			AND
			Contents.exist( 'Service/ServiceHostData/PersistPending' ) = 0

	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert
									<PersistActive>True</PersistActive>
							  as first
							  into ( //Service/ServiceHostData )[ 1 ]' )
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			(
				LTRIM( RTRIM( RootXmlNode ) ) = 'Services'
				OR
				LTRIM( RTRIM( RootXmlNode ) ) LIKE 'Services/%'
			)
			AND
			Contents.exist( 'Service' ) = 1
			AND
			Contents.exist( 'Service/ServiceHostData/PersistActive' ) = 0
	
	--
	-- 3. Insert PersistCompleted flag where necessary
	-- 
	--
	-- Create temporary table to hold information necessary for check and update of services configuration
	--
	CREATE TABLE RetentionTimes
	(
		ReplicationId int,
		RetentionTime varchar( max ),
		IsProcessed bit,
		IsValid bit
	)

	--
	-- Select all service having RetentionTime node
	--
	INSERT INTO RetentionTimes
	SELECT	ReplicationId,
			Contents.value( '( Service/ServiceHostData/RetentionTime )[ 1 ]', 'varchar(max)' ) AS RetentionTime,
			0 AS IsProcessed,	-- At the beginning, the service configuration is not checked
			0 AS IsValid		-- Suppose that RetentionTime format of service configuration is invalid
	FROM	Active_Fragments
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			(
				LTRIM( RTRIM( RootXmlNode ) ) = 'Services'
				OR
				LTRIM( RTRIM( RootXmlNode ) ) LIKE 'Services/%'
			)
			AND
			Contents.exist( 'Service/ServiceHostData/RetentionTime' ) = 1

	--
	-- Recognize all services with valid RetentionTime format
	--
	UPDATE	RetentionTimes
	SET		IsValid = 1
	WHERE	RetentionTime LIKE '__:__:__'
			OR
			RetentionTime LIKE '__:__:__.%'
			OR
			RetentionTime LIKE '%.__:__:__'
			OR
			RetentionTime LIKE '%.__:__:__.%'

	DECLARE @ReplicationId int
	DECLARE @RetentionTime varchar( max )
	DECLARE @Day int
	DECLARE @Time datetime

	--
	-- Check which services should be updated to include PersistCompleted flag:
	-- All services with RetentionTime specified in one of timespan formats, which is greater than TimeSpan.Zero
	-- should be updated with PersistCompleted flag.
	--
	WHILE EXISTS( SELECT ReplicationId FROM RetentionTimes WHERE IsProcessed = 0 AND IsValid = 1 )
	BEGIN
		--
		-- Select information about the service configuration to check
		--
		SELECT TOP 1
				@ReplicationId = ReplicationId,
				@RetentionTime = RetentionTime
		FROM	RetentionTimes
		WHERE	IsProcessed = 0
				AND
				IsValid = 1

		BEGIN TRY
			--
			-- If day is specified, check both day and time
			-- If day is not specified, check only time
			--
			IF ( ( @RetentionTime LIKE '%.__:__:__' ) OR ( @RetentionTime LIKE '%.__:__:__.%' ) )
			BEGIN
				--
				-- Check day part of timespan
				--
				SET @Day = CAST( SUBSTRING( @RetentionTime, 1, CHARINDEX( '.', @RetentionTime, 1 ) - 1 ) AS int )
				IF ( @Day < 0 )
					RAISERROR ( 50000, 0, 0 ) -- Raise error to go to catch block

				--
				--  Check time part of timespan
				--
				SET @Time = CAST( '1753-01-01 ' + SUBSTRING( @RetentionTime, CHARINDEX( '.', @RetentionTime, 1 ) + 1, LEN( @RetentionTime ) - CHARINDEX( '.', @RetentionTime, 1 ) ) AS datetime )
				IF ( ( @Day  = 0 ) AND ( @Time = CAST( '1753-01-01 00:00:00.000' AS datetime ) ) )
					RAISERROR ( 50000, 0, 0 ) -- Raise error to go to catch block
			END
			ELSE
			BEGIN
				--
				--  Check time part of timespan
				--
				SET @Time = CAST( '1753-01-01 ' + @RetentionTime AS datetime )
				IF ( @Time = CAST( '1753-01-01 00:00:00.000' AS datetime ) )
					RAISERROR ( 50000, 0, 0 ) -- Raise error to go to catch block
			END
			
			--
			-- Mark the current service configuration as processed
			--
			UPDATE	RetentionTimes
			SET		IsProcessed = 1
			WHERE	ReplicationId = @ReplicationId
		END TRY
		BEGIN CATCH
			--
			-- RetentionTime value format is invalid
			--
			DELETE FROM	RetentionTimes
			WHERE		ReplicationId = @ReplicationId
		END CATCH
	END

	--
	-- Delete RetentionTime from all services configuration
	--
	UPDATE	Active_Fragments
	SET		Contents.modify( 'delete ( //Service/ServiceHostData/RetentionTime )' )
	WHERE	ReplicationId IN ( SELECT ReplicationId FROM RetentionTimes )

	--
	-- Insert PersistCompleted flag in all services configuration with valid RetentionTime
	--
	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert
									<PersistCompleted>True</PersistCompleted>
							  as first
							  into ( //Service/ServiceHostData )[ 1 ]' )
	WHERE	ReplicationId IN ( SELECT ReplicationId FROM RetentionTimes WHERE IsValid = 1 )

	--
	-- Drop temporary table thats holds information that was necessary for check and update of services configuration
	--
	DROP TABLE RetentionTimes
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Unified persistence related configuration defaults'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634 (Reorganize initial config)
SET @TrackingID = '{AD9F5BDF-5C3F-4F9F-8956-11A58C8CC6E5}'
SET @ReferenceID = '21953'
SET @Author = 'Adnan Kovacic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7 -- Created fragments and linked them to appropriate section(s)

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- 1. Add macro for sql server for each request store
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @MacroId uniqueidentifier
	
	DECLARE @DataSource varchar(250)
	DECLARE @InitialCatalog varchar(250)
	DECLARE @IntegratedSecurity varchar(250)
	DECLARE @User varchar(250)
	DECLARE @Password varchar(250)
	DECLARE @ConnectionString varchar(1024)

	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'
	
	DECLARE @SQL_SERVER uniqueidentifier
	SET		@SQL_SERVER = '{C333BBE3-973C-47A3-A229-54ACA529D105}'

	DECLARE @SQL_REQUEST_STORE_DATABASE uniqueidentifier
	SET		@SQL_REQUEST_STORE_DATABASE = '{D1A923ED-7B0F-4CF7-B929-6CF0360E4A35}'

	DECLARE @SQL_METERING_STORE_DATABASE uniqueidentifier
	SET		@SQL_METERING_STORE_DATABASE = '{E5DA6BA8-F8E2-4666-97DB-A24926C500AE}'

	DECLARE @SQL_LOGGING_STORE_DATABASE uniqueidentifier
	SET		@SQL_LOGGING_STORE_DATABASE = '{9C0164DF-3C1C-46A2-A102-012A7481F153}'

	DECLARE @SQL_CONFIGURATION_STORE_DATABASE uniqueidentifier
	SET		@SQL_CONFIGURATION_STORE_DATABASE = '{05A241A5-59FB-43C3-832A-4EE77CF23334}'

	DECLARE @SQL_USER uniqueidentifier
	SET		@SQL_USER = '{1ADC84FF-F8BA-417B-9706-1C41434AAC5F}'

	DECLARE @SQL_PASSWORD uniqueidentifier
	SET		@SQL_PASSWORD = '{3BED3EA2-0D9C-42E8-B52B-1468AFA0E895}'

	DECLARE @SQL_INTEGRATED_SECURITY uniqueidentifier
	SET		@SQL_INTEGRATED_SECURITY = '{134EA7D2-A5EA-461C-8882-D054E51D40F3}'	

	DECLARE @DATABASES_FRAGMENT uniqueidentifier
	SET		@DATABASES_FRAGMENT = '{33FEC1DD-4119-4c95-A8F1-B684ABE6822B}'
	
	BEGIN TRANSACTION
	
	SELECT @DataSource = Value FROM Active_GroupMacroValues WHERE
						 RootGroupId = @ROOT_GROUP_ID AND
						 GroupId = @ROOT_GROUP_ID AND
						 MacroId = @SQL_SERVER
	
	SELECT @IntegratedSecurity = Value FROM Active_GroupMacroValues WHERE
						 RootGroupId = @ROOT_GROUP_ID AND
						 GroupId = @ROOT_GROUP_ID AND
						 MacroId = @SQL_INTEGRATED_SECURITY
	
	SELECT @User = Value FROM Active_GroupMacroValues WHERE
						 RootGroupId = @ROOT_GROUP_ID AND
						 GroupId = @ROOT_GROUP_ID AND
						 MacroId = @SQL_USER
	
	SELECT @Password = Value FROM Active_GroupMacroValues WHERE
						 RootGroupId = @ROOT_GROUP_ID AND
						 GroupId = @ROOT_GROUP_ID AND
						 MacroId = @SQL_PASSWORD
	
	--
	-- Ensure that SQL.LOGGING.STORE.CONNECTION.STRING macro is created for the root group
	--	
	SET @MacroId = '{3EFC03DA-A0EF-4A20-82EC-FFF55B49E248}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.LOGGING.STORE.CONNECTION.STRING'
			SET @Description = 'Connection string for logging store database'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@MacroId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	--
	-- Ensure that value is assigned to macro SQL.LOGGING.STORE.CONNECTION.STRING for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @MacroId ) )
		BEGIN
			SELECT @InitialCatalog = Value FROM Active_GroupMacroValues WHERE
									 RootGroupId = @ROOT_GROUP_ID AND
									 GroupId = @ROOT_GROUP_ID AND
									 MacroId = @SQL_LOGGING_STORE_DATABASE
								 
			SET @ConnectionString = 'Data Source=' + @DataSource + '; Initial Catalog=' + @InitialCatalog + '; Integrated Security=' + @IntegratedSecurity			
			IF ( @IntegratedSecurity = 'False' )
				BEGIN
					SET @ConnectionString = @ConnectionString + '; User=' + @User + '; Password=' + @Password
				END

			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@MacroId,
				@ConnectionString
			)
		END
		
	--
	-- Ensure that SQL.METERING.STORE.CONNECTION.STRING macro is created for the root group
	--	
	SET @MacroId = '{85A9E8B5-F08B-482F-A918-F250D9CF7ADF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.METERING.STORE.CONNECTION.STRING'
			SET @Description = 'Connection string for metering point store database'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@MacroId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	--
	-- Ensure that value is assigned to macro SQL.METERING.STORE.CONNECTION.STRING for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @MacroId ) )
		BEGIN
			SELECT @InitialCatalog = Value FROM Active_GroupMacroValues WHERE
									 RootGroupId = @ROOT_GROUP_ID AND
									 GroupId = @ROOT_GROUP_ID AND
									 MacroId = @SQL_METERING_STORE_DATABASE
								 
			SET @ConnectionString = 'Data Source=' + @DataSource + '; Initial Catalog=' + @InitialCatalog + '; Integrated Security=' + @IntegratedSecurity			
			IF ( @IntegratedSecurity = 'False' )
				BEGIN
					SET @ConnectionString = @ConnectionString + '; User=' + @User + '; Password=' + @Password
				END

			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@MacroId,
				@ConnectionString
			)
		END
		
	--
	-- Ensure that SQL.REQUEST.STORE.CONNECTION.STRING macro is created for the root group
	--	
	SET @MacroId = '{4A554902-F212-4E4A-9434-559FD556298D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.REQUEST.STORE.CONNECTION.STRING'
			SET @Description = 'Connection string for request store database'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@MacroId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	--
	-- Ensure that value is assigned to macro SQL.REQUEST.STORE.CONNECTION.STRING for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @MacroId ) )
		BEGIN
			SELECT @InitialCatalog = Value FROM Active_GroupMacroValues WHERE
									 RootGroupId = @ROOT_GROUP_ID AND
									 GroupId = @ROOT_GROUP_ID AND
									 MacroId = @SQL_REQUEST_STORE_DATABASE
								 
			SET @ConnectionString = 'Data Source=' + @DataSource + '; Initial Catalog=' + @InitialCatalog + '; Integrated Security=' + @IntegratedSecurity			
			IF ( @IntegratedSecurity = 'False' )
				BEGIN
					SET @ConnectionString = @ConnectionString + '; User=' + @User + '; Password=' + @Password
				END

			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@MacroId,
				@ConnectionString
			)
		END
		
	--
	-- Ensure that SQL.CONFIGURATION.STORE.CONNECTION.STRING macro is created for the root group
	--	
	SET @MacroId = '{DD9B37CF-BF81-4059-ABEF-B2A58CD00E2B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.CONFIGURATION.STORE.CONNECTION.STRING'
			SET @Description = 'Connection string for configuration store database'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@MacroId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
		
	--
	-- Ensure that value is assigned to macro SQL_SERVER for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @MacroId ) )
		BEGIN
			SELECT @InitialCatalog = Value FROM Active_GroupMacroValues WHERE
									 RootGroupId = @ROOT_GROUP_ID AND
									 GroupId = @ROOT_GROUP_ID AND
									 MacroId = @SQL_CONFIGURATION_STORE_DATABASE
								 
			SET @ConnectionString = 'Data Source=' + @DataSource + '; Initial Catalog=' + @InitialCatalog + '; Integrated Security=' + @IntegratedSecurity			
			IF ( @IntegratedSecurity = 'False' )
				BEGIN
					SET @ConnectionString = @ConnectionString + '; User=' + @User + '; Password=' + @Password
				END

			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@MacroId,
				@ConnectionString
			)
		END
		
	DELETE FROM Active_GroupMacroValues
	WHERE MacroId IN ( @SQL_SERVER,
					   @SQL_USER,
					   @SQL_PASSWORD,
					   @SQL_INTEGRATED_SECURITY,
					   @SQL_CONFIGURATION_STORE_DATABASE,
					   @SQL_LOGGING_STORE_DATABASE,
					   @SQL_METERING_STORE_DATABASE,
					   @SQL_REQUEST_STORE_DATABASE )
	
	DELETE FROM Active_Macros
	WHERE Id IN ( @SQL_SERVER,
					   @SQL_USER,
					   @SQL_PASSWORD,
					   @SQL_INTEGRATED_SECURITY,
					   @SQL_CONFIGURATION_STORE_DATABASE,
					   @SQL_LOGGING_STORE_DATABASE,
					   @SQL_METERING_STORE_DATABASE,
					   @SQL_REQUEST_STORE_DATABASE )
				   
	UPDATE Active_Fragments
	SET Contents = '
	<Databases>
		<Database name="RequestStore">
			<ConnectionString>[DSCS:MACRO:SQL.REQUEST.STORE.CONNECTION.STRING]</ConnectionString>
		</Database>
		<Database name="MeteringPointStore">
			<ConnectionString>[DSCS:MACRO:SQL.METERING.STORE.CONNECTION.STRING]</ConnectionString>
		</Database>
		<Database name="Logging">
			<ConnectionString>[DSCS:MACRO:SQL.LOGGING.STORE.CONNECTION.STRING]</ConnectionString>
		</Database>
		<!-- Configuration database is added only temporarily to trigger section changed event -->
		<Database name="Configuration">
			<ConnectionString>[DSCS:MACRO:SQL.CONFIGURATION.STORE.CONNECTION.STRING]</ConnectionString>
		</Database>
	</Databases>
				'
	WHERE Id = @DATABASES_FRAGMENT
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Created connection string macro for each database.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{DDFA9B7F-B572-4D42-B76B-7C7975772AEC}'
SET @ReferenceID = '22305'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @FragmentId uniqueidentifier

	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--Applications
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
	SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

	-- Sections
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	BEGIN TRANSACTION

	--
	-- Ensure that BSE.CLEAR.EXPIRED.RESULTS.START macro is created for the root group
	--	
	SET @FragmentId = '{F45C4757-3947-4CEC-8E03-798B757CBDD0}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'BSE.CLEAR.EXPIRED.RESULTS.START'
			SET @Description = 'True if the BSE module for clearing expired results should be loaded on ServicePool start, otherwise false'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
		
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @FragmentId ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@FragmentId,
			'True'
		)
	
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{17BA1A7B-2413-434B-A690-38216B3E0A39}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll'
			SET @Description = 'ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll resource'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="BseModule"',
				'
<Resource name="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll" id="7d0492de-eff7-4ec4-a24d-6eca0b158f10">
	<FileName>ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll</FileName>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.BSE.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
	</Dependencies>
</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.ClearExpiredResults fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{77A07EB9-8868-4351-BDDD-951A75CB5147}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.ServiceHost.BseModule.ClearExpiredResults'
			SET @Description = 'ServiceBus.ServiceHost.BseModule.ClearExpiredResults service'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="BseModule"',
				'
<Service name="ServiceBus.ServiceHost.BseModule.ClearExpiredResults">
	<ServiceContract>
		<Description>Deletes completed requests with retention time that has expired.</Description>
	</ServiceContract>
	<ServiceHostData>
		<LoadOnServicePoolStart>[DSCS:MACRO:BSE.CLEAR.EXPIRED.RESULTS.START]</LoadOnServicePoolStart>
		<ServicePools>
			<ServicePool name="System">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="BSE">
		<Implementation>
			<Resource name="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll" />
			<Type>ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure</Type>
		</Implementation>
		<StartConfig>
			<JobInterval>00:10:00</JobInterval>
			<ConnectionString>[DSCS:MACRO:SQL.REQUEST.STORE.CONNECTION.STRING]</ConnectionString>
			<ProcedureName>dbo.ClearExpiredResults</ProcedureName>
			<Parameters>
				<Parameter>
					<Name>RowCount</Name>
					<Value>100</Value>
				</Parameter>
			</Parameters>
		</StartConfig>
	</ServiceFactoryData>
</Service>
				'
			)
		END


	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.ClearExpiredResults fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.ClearExpiredResults fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.ClearExpiredResults fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	-- Move PickupLogEntries service and resource to BseModule group
	DECLARE @PickupLogEntriesService uniqueidentifier
	DECLARE @PickupLogEntriesResource uniqueidentifier
	
	SET @PickupLogEntriesService = '{7A031131-7959-4515-B750-153330E43278}'
	SET @PickupLogEntriesResource = '{715F9267-D09D-4642-8EE9-E4D9429643E0}'
	
	UPDATE Active_Fragments
	SET RootXmlNode = 'Services/ServiceGroup name="BseModule"'
	WHERE Id = @PickupLogEntriesService
	
	UPDATE Active_Fragments
	SET RootXmlNode = 'ResourceCatalog/ResourceGroup name="BseModule"'
	WHERE Id = @PickupLogEntriesResource
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added resource for ExecuteStoredProcedure BSE Module and BSE module for clearing expired results.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{DDFA9B7F-B572-4D42-B76B-7C7975772AEC}'
SET @ReferenceID = '22306'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @FragmentId uniqueidentifier
	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--Applications
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
	SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

	-- Sections
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'
		
	BEGIN TRANSACTION
	
	--
	-- Ensure that BSE.LOGGING.CONTEXT.SUMMARY.START macro is created for the root group
	--	
	SET @FragmentId = '{1C812910-9997-418F-9AE2-5791073D023B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'BSE.LOGGING.CONTEXT.SUMMARY.START'
			SET @Description = 'True if the BSE module creating logging context summary should be loaded on ServicePool start, otherwise false'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
		
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @FragmentId ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@FragmentId,
			'True'
		)
	
	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.CreateLoggingContextSummary fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{FF1151FC-BF97-468C-946E-4F35A93F4206}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.ServiceHost.BseModule.CreateLoggingContextSummary'
			SET @Description = 'ServiceBus.ServiceHost.BseModule.CreateLoggingContextSummary service'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="BseModule"',
				'
<Service name="ServiceBus.ServiceHost.BseModule.CreateLoggingContextSummary">
	<ServiceContract>
		<Description>Aggregates log entries.</Description>
	</ServiceContract>
	<ServiceHostData>
		<LoadOnServicePoolStart>[DSCS:MACRO:BSE.LOGGING.CONTEXT.SUMMARY.START]</LoadOnServicePoolStart>
		<ServicePools>
			<ServicePool name="Logging">
				<Default>True</Default>
			</ServicePool>
		</ServicePools>
	</ServiceHostData>
	<ServiceFactoryData name="BSE">
		<Implementation>
			<Resource name="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll" />
			<Type>ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure</Type>
		</Implementation>
		<StartConfig>
			<JobInterval>00:10:00</JobInterval>
			<ConnectionString>[DSCS:MACRO:SQL.LOGGING.STORE.CONNECTION.STRING]</ConnectionString>
			<ProcedureName>dbo.cpAggregateLogEntryByContextMachine</ProcedureName>
		</StartConfig>
	</ServiceFactoryData>
</Service>
				'
			)
		END


	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.CreateLoggingContextSummary fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.CreateLoggingContextSummary fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Service.ServiceBus.ServiceHost.BseModule.CreateLoggingContextSummary fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added BSE module for creating logging context summary.'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author nvarchar( 50 )

SET @PreviousTrackingID = '{bbcd35b2-0e19-4650-b4e4-883f39f1dccb}' -- 18682 (Added ServiceBus.CommandLine.RunTestCase application)
SET @TrackingID = '{E7ABEDF4-123A-46bc-9158-E897A477F701}'
SET @ReferenceID = '23149'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1 -- Created COMMANDLINE_RUNTESTCASES application

--
-- Add service that can invoke any service
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
	SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

	BEGIN TRANSACTION
	
	DECLARE @Name varchar( 250 )
	DECLARE @Description varchar( 1024 )
	DECLARE @FragmentId uniqueidentifier

	--
	-- 1. Ensure that 'Service.ServiceBus.System.DSE.InvokeService' fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{04529659-A6B9-4f72-8B96-AB2DD39C5C16}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceBus.System.DSE.InvokeService'
			SET @Description = 'Service that can invoke any service'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'Services/ServiceGroup name="Common"',
				'
				<Service name="ServiceBus.System.DSE.InvokeService">

					<ServiceContract>
						<Description>Invokes specified service</Description>

						<Inputs>
							<Input name="ServiceName">
								<Description>The name of the service to invoke</Description>
								<MapTo>ServiceName</MapTo>
								<Required>True</Required>
							</Input>
							<Input name="ForceSynchronous">
								<Description>Does this step always wait for the service to complete?</Description>
								<MapTo>ForceSynchronous</MapTo>
								<Required>False</Required>
							</Input>
							<Input name="Timeout">
								<Description>How long to wait for the service to complete?</Description>
								<MapTo>Timeout</MapTo>
								<Required>False</Required>
							</Input>
							<Input name="Inputs">
								<Description> Dictionary to contain values for service inputs of invoked service ({ServiceInputName, ServiceInputValue} pair(s))</Description>
								<MapTo>Inputs</MapTo>
								<Required>True</Required>
							</Input>
						</Inputs>

						<Results>
							<Result name="Results">
								<Description>Dictionary to contain service results of invoked service ({ServiceResultName, ServiceResultValue} pair(s))</Description>
								<MapTo>Results</MapTo>
							</Result>
						</Results>

					</ServiceContract>

					<ServiceHostData>
						<ServicePools>
							<ServicePool name="System">
								<Default>True</Default>
							</ServicePool>
						</ServicePools>
					</ServiceHostData>

					<ServiceFactoryData name="DSE">
						<Steps>
							<Step name="InvokeService">

								<Implementation>
									<Resource name="ServiceBus.ServiceHost.DSE.Common.dll" />
									<Type>ServiceBus.ServiceHost.DSE.InvokeServiceStep</Type>
								</Implementation>

								<Arguments>
									<Argument name="ServiceName">
										<Description>Input: The name of the service to invoke</Description>
										<MapTo>ServiceName</MapTo>
									</Argument>
									<Argument name="ForceSynchronous">
										<Description>Input: Does the step always wait for the service to complete?</Description>
										<MapTo>ForceSynchronous</MapTo>
										<Default>
											<Value>True</Value>
										</Default>
									</Argument>
									<Argument name="WaitForServiceResponse">
										<Description>Input (Optional): Does this step wait for the ServiceResponse? If False, service is invoked and forgotten.</Description>
										<Default>
											<Value>False</Value>
										</Default>
									</Argument>
									<Argument name="Timeout">
										<Description>Input: How long to wait for the service to complete?</Description>
										<MapTo>Timeout</MapTo>
										<Default>
											<Value>0.00:00:30.000</Value>
										</Default>
									</Argument>
									<Argument name="Inputs">
										<Description>Input: Dictionary to contain values for service inputs of invoked service ({ServiceInputName, ServiceInputValue} pair(s))</Description>
										<MapTo>Inputs</MapTo>
									</Argument>
									<Argument name="Results">
										<Description>Output: Dictionary to contain service results of invoked service ({ServiceResultName, ServiceResultValue} pair(s))</Description>
										<MapTo>Results</MapTo>
									</Argument>
									<Argument name="OutputAttributes">
										<Description>Output: Dictionary to contain all attributes returned in service response</Description>
										<MapTo>OutputAttributes</MapTo>
									</Argument>
									<Argument name="RequestID">
										<Description>Output: The identification of service request</Description>
										<MapTo>RequestID</MapTo>
									</Argument>
								</Arguments>

								<Routes>
									<Route name="Custom">
										<Code>Suspended</Code>
										<Action name="CompleteRequest">
											<Status>Failed</Status>
											<Message>Service execution has completed with Suspended status.</Message>
										</Action>
									</Route>
									<Route name="Custom">
										<Code>PendingOrActive</Code>
										<Action name="CompleteRequest">
											<Status>Succeeded</Status>
											<Message>Service execution is pending or has started.</Message>
										</Action>
									</Route>
								</Routes>

							</Step>
						</Steps>
					</ServiceFactoryData>

				</Service>
				'
			)
		END

	--
	-- 1.a. Ensure that ResultsRetentionTime fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- 1.b. Ensure that ResultsRetentionTime fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- 1.b. Ensure that ResultsRetentionTime fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added service that can invoke any service'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{9F53FEDC-871A-4875-90B3-6049A8C8EDB5}'
SET @ReferenceID = '24209'
SET @Author = 'Enes Pelko'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)


SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- Create table for ids
	declare @ids table (id uniqueidentifier )

	-- Find rows to update
	insert into @ids (id)
	select id from Active_Fragments
	where Contents.exist('Service/ServiceContract/IsCacheable[text() = "False"]' ) = 1

	-- Delete old node
	update Active_Fragments 
	set Contents.modify('delete (Service/ServiceContract/IsCacheable[text() = "False"])')
	where Id in (select Id from @ids)

	-- Add new
	update Active_Fragments 
	set Contents.modify('
		insert (<IsCacheable>False</IsCacheable>) 
				as last 
				into (Service/ServiceHostData)[1]
		')
	where Id in (select Id from @ids)

	delete @ids

	-- Find rows to update
	insert into @ids (id)
	select id from Active_Fragments
	where Contents.exist('Service/ServiceContract/IsCacheable[text() = "True"]' ) = 1

	-- Delete old node
	update Active_Fragments 
	set Contents.modify('delete (Service/ServiceContract/IsCacheable[text() = "True"])')
	where Id in (select Id from @ids)

	-- Add new
	update Active_Fragments 
	set Contents.modify('
		insert (<IsCacheable>True</IsCacheable>) 
				as last 
				into (Service/ServiceHostData)[1]
		')
	where Id in (select Id from @ids)

	
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Moves IsCachable node from Contract to ServiceHostData'
	COMMIT TRANSACTION
END


GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- PreviousReferenceID: 15634
SET @TrackingID = '{0B3DC5FF-FD56-4cb7-832C-30304F53CE7F}'
SET @ReferenceID = '24794'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7	-- ServiceHost section fragments inserted

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Correct value of all assertions whose name is "IsAsynchronuous"
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	-- Replace value only for assertions whose name attribute has incorrect value
	UPDATE	Active_Fragments
	SET		Contents.modify( '	replace value of ( .//TestCase/Assertions/Assert[@name="Attribute IsAsynchronuous"]/@name )[ 1 ]
								with "Attribute IsAsynchronous"' )
	WHERE	Contents.exist( './/TestCase/Assertions/Assert[@name="Attribute IsAsynchronuous"]' ) = 1

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Corrected mispelled name of test case assertions'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{9BE2FE4A-2EC9-46a5-80DE-6DC26E2EF9EE}'
SET @ReferenceID = '22607'
SET @Author = 'Enes Pelko'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4F38-B4ED-5C917010C756}'


DECLARE @FragmentId uniqueidentifier

-- SBACSecurity.ConfigurationExplorer
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{37B7AAB8-DF45-4220-87CD-34FCE63FFF21}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ConfigurationExplorer'
			SET @Description = 'Security preferences for Configuration Explorer module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Configuration Explorer">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ConfigurationExplorer'
	COMMIT TRANSACTION
END


-- SBACSecurity.ChangesetAdministration
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{AF04F3C5-EEC0-4E06-96EA-F010B7EA62F9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ChangesetAdministration'
			SET @Description = 'Security preferences for Changeset Administration module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Changeset Administration">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ChangesetAdministration'
	COMMIT TRANSACTION
END


-- SBACSecurity.ContractResolver
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{26733D97-0002-4351-91A8-69225BEC0079}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ContractResolver'
			SET @Description = 'Security preferences for Contract Resolver module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Contract Resolver">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ContractResolver'
	COMMIT TRANSACTION
END

-- SBACSecurity.DSEStepCatalog
SET @Section = 4
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{90C307D0-7EA3-43B3-87E0-CA567847B878}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.DSEStepCatalog'
			SET @Description = 'Security preferences for DSE Step Catalog module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="DSE Step Catalog">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END	

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.DSEStepCatalog'
	COMMIT TRANSACTION
END

-- SBACSecurity.LogViewer
SET @Section = 5
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{D6BA0EE4-B23B-43E2-8295-E21090804ADD}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.LogViewer'
			SET @Description = 'Security preferences for Log Viewer module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Log Viewer">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END	

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.LogViewer'
	COMMIT TRANSACTION
END

-- SBACSecurity.ResourceCatalog
SET @Section = 6
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{E8D48171-B5FA-4F1F-B12D-86554A12303E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ResourceCatalog'
			SET @Description = 'Security preferences for Resource Catalog module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Resource Catalog">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END	

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ResourceCatalog'
	COMMIT TRANSACTION
END

-- SBACSecurity.ServiceCatalog
SET @Section = 7
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{97DA2DDC-7411-4565-A3C1-62C4E4884945}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ServiceCatalog'
			SET @Description = 'Security preferences for Service Catalog module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Service Catalog">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END	

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ServiceCatalog'
	COMMIT TRANSACTION
END

-- SBACSecurity.ServiceHostAdministration
SET @Section = 8
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{295DF852-C2E7-4A6A-936B-43D5AD618C84}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ServiceHostAdministration'
			SET @Description = 'Security preferences for Service Host Administration module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="ServiceHost Administration">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END	

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ServiceHostAdministration'
	COMMIT TRANSACTION
END

-- SBACSecurity.ServiceInvoke
SET @Section = 9
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{69FE4339-EAA4-4829-9192-A25DD14CCC45}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ServiceInvoke'
			SET @Description = 'Security preferences for Service Invoke module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Service Invoke">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END	

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ServiceInvoke'
	COMMIT TRANSACTION
END

-- SBACSecurity.ServiceRequestExplorer
SET @Section = 10
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{2D5D5DC7-A84E-4F82-949A-EF413C530320}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ServiceRequestExplorer'
			SET @Description = 'Security preferences for Service Request Explorer module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Service Request Explorer">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END	

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ServiceRequestExplorer'
	COMMIT TRANSACTION
END

-- SBACSecurity.ModulesSecurity
SET @Section = 11
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{5252F7A7-F0C6-43EF-8DDF-FD66257FAEA3}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ModulesSecurity'
			SET @Description = 'Security preferences for Module Security module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Modules Security">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END	

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ModulesSecurity'
	COMMIT TRANSACTION
END

-- SBACSecurity.MeteringViewer
SET @Section = 12
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{1F1B5583-571E-4192-A553-22DCC1E6054F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.MeteringViewer'
			SET @Description = 'Security preferences for Module Security module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Metering Viewer">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END	

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.MeteringViewer'
	COMMIT TRANSACTION
END

-- SBACSecurity.MeteringViewer
SET @Section = 13
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	SET	@FragmentId = '{3993A625-7CE6-4BE5-B7AE-206C3B5BA849}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Administration.Security.IAuthenticationPlugin'
			SET @Description = 'Type mapping used for resolution of ServiceBus.Administration.Security.IAuthenticationPlugin instance'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'<type type="ServiceBus.Administration.Security.IAuthenticationPlugin, ServiceBus.Administration.Security" mapTo="ServiceBus.Administration.Security.Plugin, ServiceBus.Administration.Security.AuthenticationPlugin.Domain">
  <lifetime type="singleton" />
</type>'
			)
		END	

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: UnityConfiguration.Containers.Default.Types.ServiceBus.Administration.Security.IAuthenticationPlugin'
	COMMIT TRANSACTION
END

-- SBACSecurity.MeteringViewer
SET @Section = 14
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{0FA352E4-C674-404E-8A7B-9F0C6539C29B}'
	UPDATE Active_Fragments
	SET Contents = '<add key="InitialModule" value="Service Invoke" />'
	WHERE Id = @FragmentId
	AND CONVERT(VARCHAR(MAX), Contents) LIKE '<add key="InitialModule" value="ServiceInvokeModule"%'
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Updated AppSettings.InitialModule fragment'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{4BBA2635-D1C6-4863-88C3-4E2558F7F752}'
SET @ReferenceID = '25554'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @FragmentId uniqueidentifier

	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--Applications
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
	SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

	-- Sections
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	BEGIN TRANSACTION

	--
	-- Ensure that SERVICEHOST.PUBLISH.STATE macro is created for the root group
	--	
	SET @FragmentId = '{A11660AE-596E-4AD7-BBF9-CB253C9FF7C4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SERVICEHOST.PUBLISH.STATE'
			SET @Description = 'True if the ServiceHost should publish state, otherwise false'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
		
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @FragmentId ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId,
			'True'
		)
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @FragmentId ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			'False'
		)
		
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @FragmentId ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			'False'
		)
	
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{AA8C4D6A-7953-4059-BD87-D49094FCBC81}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceHostPublishState'
			SET @Description = 'Indicates whether the ServiceHost should publish state'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'<ServiceHostPublishState>[DSCS:MACRO:SERVICEHOST.PUBLISH.STATE]</ServiceHostPublishState>'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added configuration entry to control whether ServiceHost will publish state.'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID1 uniqueidentifier
DECLARE @PreviousTrackingID2 uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author nvarchar( 50 )

SET @PreviousTrackingID1 = '{D4F72549-EA20-4432-B2B7-F058C6C461C1}' -- 16823: Added PubSubConfiguration section
SET @PreviousTrackingID2 = '{98CFAEE0-6C55-481a-A774-605B1E196416}' -- 18285: Set receiveTimeout and inactivityTimeout to Infinite
SET @TrackingID = '{0DE23692-8BF1-4cbf-B337-020DD90E32C2}'
SET @ReferenceID = '25987'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection1 int
DECLARE @PreviousSection2 int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection1 = 4 -- PubSubConfiguration section, macros, macro values and fragments created
SET @PreviousSection2 = 1 -- Binding receiveTimeout and inactivityTimeout set to "Infinite" value

--
-- Update existing ServicePool fragments to migrate current configuration of WCF request channels
-- to format parsable by standard WCF parsers
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID1, @PreviousSection1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @PreviousTrackingID2, @PreviousSection2 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize section ID constant
	--
	DECLARE	@PUBSUB_CONFIGURATION uniqueidentifier
	SET		@PUBSUB_CONFIGURATION = '{4C93E0C6-A9A6-46ec-81CD-4AAE4F3608BB}'

	BEGIN TRANSACTION

	-- Create and populate temporary table to hold information about topics configuration to be changed
	CREATE TABLE TopicsMigration
	(
		Id int,
		PublicationChannel varchar( 256 ),
		SubscriptionChannel varchar( 256 ),
		MigratedConfiguration xml,
		IsMigrated bit
	)
	
	INSERT INTO TopicsMigration
	SELECT	ReplicationId,
			Topic.value( '( ./PublicationChannel/text() )[ 1 ]', 'varchar( 256 )' ),-- AS PublicationChannel
			Topic.value( '( ./SubscriptionChannel/text() )[ 1 ]', 'varchar( 256 )' ),-- AS SubscriptionChannel
			Contents,
			0	-- At the beginning, Topic configuration is not migrated
	FROM	Active_Fragments
			CROSS APPLY
			Contents.nodes( 'Topic' ) AS Topics( Topic )
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @PUBSUB_CONFIGURATION
			AND
			RootXmlNode = 'Topics'
			AND
			Contents.exist( 'Topic' ) = 1

	DECLARE @ReplicationId int
	DECLARE @PublicationChannel varchar( 256 )
	DECLARE @SubscriptionChannel varchar( 256 )

	-- Migrate configuration of each topic
	WHILE EXISTS( SELECT Id FROM TopicsMigration WHERE IsMigrated = 0 )
	BEGIN
		-- Select information about the topic for configuration migration
		SELECT TOP 1
				@ReplicationId = Id,
				@PublicationChannel = PublicationChannel,
				@SubscriptionChannel = SubscriptionChannel
		FROM	TopicsMigration
		WHERE	IsMigrated = 0
		
		-- Replace any publication channel name TestChannel with General
		IF ( LTRIM( RTRIM( @PublicationChannel ) ) = 'TestChannel' )
			EXEC
			(
				'UPDATE	TopicsMigration
				SET		MigratedConfiguration.modify
						(
						''replace value of
							( Topic/PublicationChannel[ text()="' + @PublicationChannel + '" ]/text() )[ 1 ]
						 with "General"''
						)
				WHERE	Id = ' + @ReplicationId
			)
		
		-- Replace any subscription channel name TestChannel with General
		IF ( LTRIM( RTRIM( @SubscriptionChannel ) ) = 'TestChannel' )
			EXEC
			(
				'UPDATE	TopicsMigration
				SET		MigratedConfiguration.modify
						(
						''replace value of
							( Topic/SubscriptionChannel[ text()="' + @SubscriptionChannel + '" ]/text() )[ 1 ]
						 with "General"''
						)
				WHERE	Id = ' + @ReplicationId
			)
		
		-- Mark topic configuration as migrated
		UPDATE	TopicsMigration
		SET		IsMigrated = 1
		WHERE	Id = @ReplicationId
				AND
				PublicationChannel = @PublicationChannel
				AND
				SubscriptionChannel = @SubscriptionChannel
	END

	-- Now use migrated topic configuration to update current configuration
	UPDATE	Active_Fragments
	SET		Contents = tm.MigratedConfiguration
	FROM	TopicsMigration tm
	WHERE	ReplicationId = tm.Id

	-- Drop the temporary table containing information about migrated topics configuration
	DROP TABLE TopicsMigration
	
	-- Create and populate temporary table to hold information about channels configuration to be migrated
	CREATE TABLE ChannelsMigration
	(
		Id int,
		NewFragmentName varchar( 250 ),
		ChannelName varchar( 256 ),
		ChannelAddress varchar( 1024 ),
		BindingType varchar( 50 ),
		BindingName varchar( 256 ),
		MigratedConfiguration xml,
		IsMigrated bit
	)

	INSERT INTO ChannelsMigration
	SELECT	ReplicationId,
			[Name],
			Channel.value( '( ./Name )[ 1 ]', 'varchar( 256 )' ),-- AS ChannelName
			Channel.value( '( ./Address )[ 1 ]', 'varchar( 1024 )' ),-- AS ChannelAddress
			Channel.value( 'local-name( ( ./BindingXml/bindings/* )[ 1 ] )', 'varchar( 50 )' ),-- AS BindingType
			Channel.value( '( ./BindingXml/bindings/*/binding/@name )[ 1 ]', 'varchar( 256 )' ),-- AS BindingName
			Contents,
			0	-- At the beginning, channel configuration is not migrated
	FROM	Active_Fragments
			CROSS APPLY
			Contents.nodes( 'Channel' ) AS Channels( Channel )
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @PUBSUB_CONFIGURATION
			AND
			RootXmlNode = 'Channels'
			AND
			Contents.exist( 'Channel' ) = 1

	DECLARE @ChannelName varchar( 256 )
	DECLARE @ChannelAddress varchar( 1024 )
	DECLARE @BindingType varchar( 50 )
	DECLARE @BindingName varchar( 256 )
	DECLARE @Bindings varchar( 4096 )
	DECLARE @Statement nvarchar( max )
	DECLARE @DeleteStatementStart nvarchar( max )
	DECLARE @DeleteStatementEnd nvarchar( max )

	-- Migrate configuration of each channel
	WHILE EXISTS( SELECT Id FROM ChannelsMigration WHERE IsMigrated = 0 )
	BEGIN
		-- Select information about the channel for configuration migration
		SELECT TOP 1
				@ReplicationId = Id,
				@ChannelName = ChannelName,
				@ChannelAddress = ChannelAddress,
				@BindingType = BindingType,
				@BindingName = BindingName
		FROM	ChannelsMigration
		WHERE	IsMigrated = 0
		
		-- Replace 'test' path of the endpoint address with 'PubSubService'
		DECLARE @Length int
		DECLARE @InvertedLastPosition int
		SELECT	@Length = DATALENGTH( @ChannelAddress ),
				@InvertedLastPosition = CHARINDEX( '/', REVERSE( @ChannelAddress ), 0 )

		IF ( ( @Length > 0 ) AND ( @InvertedLastPosition > 0 ) )
		BEGIN
			DECLARE @LastPosition int
			DECLARE @Path varchar( 1024 )

			SET	@LastPosition = @Length - @InvertedLastPosition + 1	
			SET	@Path = LOWER( LTRIM( RTRIM( SUBSTRING( @ChannelAddress, @LastPosition + 1, @InvertedLastPosition - 1 ) ) ) )
			
			IF	( @Path = 'test' )
				SET	@ChannelAddress = SUBSTRING( @ChannelAddress, 0, @LastPosition + 1 ) + 'PubSubService'
		END
		
		-- Ensure that 'ServiceModel' element and its 'client' child element are present
		EXEC
		(
			'UPDATE	ChannelsMigration
			SET		MigratedConfiguration.modify
					(
					''insert
							<ServiceModel>
								<client />
							</ServiceModel>
					 as last
					 into ( Channel[ Name[ text()="' + @ChannelName + '" ] ] )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		-- Insert WCF client configuration
		EXEC
		(
			'UPDATE	ChannelsMigration
			SET		MigratedConfiguration.modify
					(
					''insert
							<endpoint name="' + @BindingName + '_IPubSubService"
									  address="' + @ChannelAddress + '"
									  binding="' + @BindingType + '" bindingConfiguration="' + @BindingName + '"
									  contract="ServiceBus.PubSub.IPubSubService" />
					  as last
					  into ( Channel[ Name[ text()="' + @ChannelName + '" ] ]/ServiceModel/client )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)

		-- Ensure that customBinding has reliableSession configured with maxRetryCount = 4
		IF ( LTRIM( RTRIM( @BindingType ) ) = 'customBinding' )
		BEGIN
			DECLARE @BindingAdded bit
			DECLARE @ReliableSessionAdded bit
			DECLARE @MaxRetryCount int
			
			SET @Statement =
				'SELECT	@BindingAdded = MigratedConfiguration.exist( ''Channel[ Name[ text()="' + @ChannelName + '" ] ]/BindingXml/bindings/customBinding/binding'' ),
						@ReliableSessionAdded = MigratedConfiguration.exist( ''Channel[ Name[ text()="' + @ChannelName + '" ] ]/BindingXml/bindings/customBinding/binding/reliableSession'' ),
						@MaxRetryCount = MigratedConfiguration.value( ''( Channel[ Name[ text()="' + @ChannelName + '" ] ]/BindingXml/bindings/customBinding/binding/reliableSession/@maxRetryCount )[ 1 ]'', ''int'' )
				FROM	ChannelsMigration
				WHERE	Id = ' + CONVERT( varchar( 11 ), @ReplicationId )
				
			EXECUTE sp_executesql
				@Statement,
				N'@BindingAdded bit OUTPUT, @ReliableSessionAdded bit OUTPUT, @MaxRetryCount int OUTPUT',
				@BindingAdded = @BindingAdded OUTPUT,
				@ReliableSessionAdded = @ReliableSessionAdded OUTPUT,
				@MaxRetryCount = @MaxRetryCount OUTPUT

			IF ( @BindingAdded = 1 )
			BEGIN
				IF ( @ReliableSessionAdded = 0 )
				BEGIN
					EXEC
					(
						'UPDATE	ChannelsMigration
						SET		MigratedConfiguration.modify
								(
								''insert
										<reliableSession maxRetryCount="4" acknowledgementInterval="00:00:00.2000000" flowControlEnabled="true"
														 inactivityTimeout="Infinite" maxPendingChannels="3000" maxTransferWindowSize="4096" ordered="true" />
								  as first
								  into ( Channel[ Name[ text()="' + @ChannelName + '" ] ]/BindingXml/bindings/customBinding/binding )[ 1 ]''
								)
						WHERE	Id = ' + @ReplicationId
					)
				END
				ELSE IF ( @MaxRetryCount IS NULL )
				BEGIN
					EXEC
					(
						'UPDATE	ChannelsMigration
						SET		MigratedConfiguration.modify
								(
								''insert attribute
										maxRetryCount { "4" }
								  into ( Channel[ Name[ text()="' + @ChannelName + '" ] ]/BindingXml/bindings/customBinding/binding/reliableSession )[ 1 ]''
								)
						WHERE	Id = ' + @ReplicationId
					)
				END
				ELSE IF ( @MaxRetryCount <> 4 )
				BEGIN
					EXEC
					(
						'UPDATE	ChannelsMigration
						SET		MigratedConfiguration.modify
								(
								''replace value of
										( Channel[ Name[ text()="' + @ChannelName + '" ] ]/BindingXml/bindings/customBinding/binding/reliableSession/@maxRetryCount )[ 1 ]
								  with 4''
								)
						WHERE	Id = ' + @ReplicationId
					)
				END
			END
		END

		-- Get WCF bindings configuration
		SET		@Bindings = NULL
		SET		@Statement = 
			N'SELECT	@Bindings = CONVERT
				( varchar( max ), MigratedConfiguration.query
					(
						''Channel[ Name[ text()="' + @ChannelName + '" ] ]/BindingXml/bindings''
					)
				)
			FROM	ChannelsMigration
			WHERE	Id = ' + CONVERT( varchar( 11 ), @ReplicationId )

		EXECUTE sp_executesql @Statement, N'@Bindings varchar( max ) OUTPUT', @Bindings = @Bindings OUTPUT
				
		-- Insert obtained WCF bindings configuration
		EXEC
		(
			'UPDATE	ChannelsMigration
			SET		MigratedConfiguration.modify
					(
					''insert
							' + @Bindings + '
					  as last
					  into ( Channel[ Name[ text()="' + @ChannelName + '" ] ]/ServiceModel )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		-- Delete Address, MaxCommunicationRetries, WaitBetweenRetries, ConnectionSettings and BindingXml elements
		SET	@DeleteStatementStart = 
			'UPDATE	ChannelsMigration
			SET		MigratedConfiguration.modify
					(
						''delete ( Channel[ Name[ text()="' + @ChannelName + '" ] ]/'
		SET	@DeleteStatementEnd =
			')''
					)
			WHERE	Id = ' + CONVERT( varchar( 11 ), @ReplicationId )
			
		SET	@Statement = @DeleteStatementStart + 'Address' + @DeleteStatementEnd
		EXEC( @Statement )

		SET	@Statement = @DeleteStatementStart + 'MaxCommunicationRetries' + @DeleteStatementEnd
		EXEC( @Statement )
		
		SET	@Statement = @DeleteStatementStart + 'WaitBetweenRetries' + @DeleteStatementEnd
		EXEC( @Statement )
		
		SET	@Statement = @DeleteStatementStart + 'ConnectionSettings' + @DeleteStatementEnd
		EXEC( @Statement )
		
		SET	@Statement = @DeleteStatementStart + 'BindingXml' + @DeleteStatementEnd
		EXEC( @Statement )

		-- Replace any channel name TestChannel with General
		IF ( LTRIM( RTRIM( @ChannelName ) ) = 'TestChannel' )
		BEGIN
			-- Change the channel name to General
			EXEC
			(
				'UPDATE	ChannelsMigration
				SET		MigratedConfiguration.modify
						(
						''replace value of
							( Channel/Name[ text()="' + @ChannelName + '" ]/text() )[ 1 ]
						 with "General"''
						)
				WHERE	Id = ' + @ReplicationId
			)
		
			-- Change the name of the fragment containing the channel
			UPDATE	ChannelsMigration
			SET		NewFragmentName = 'Channel.General'
			WHERE	Id = @ReplicationId
					AND
					ChannelName = @ChannelName
		END

		-- Mark channel configuration as migrated
		UPDATE	ChannelsMigration
		SET		IsMigrated = 1
		WHERE	Id = @ReplicationId
				AND
				ChannelName = @ChannelName
	END

	-- Now use migrated channel configuration to update current configuration
	UPDATE	Active_Fragments
	SET		[Name] = NewFragmentName,
			Contents = cm.MigratedConfiguration
	FROM	ChannelsMigration cm
	WHERE	ReplicationId = cm.Id

	-- Drop the temporary table containing information about migrated channels configuration
	DROP TABLE ChannelsMigration

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Migrated existing PubSub channels configuration to format parsable by standard WCF parsers'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{0DE23692-8BF1-4cbf-B337-020DD90E32C2}'
SET @TrackingID = '{1224A59F-31BD-4487-AA4A-C64A16670C5C}'
SET @ReferenceID = '27232'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE	@PUBSUB_CONFIGURATION uniqueidentifier
SET		@PUBSUB_CONFIGURATION = '{4C93E0C6-A9A6-46ec-81CD-4AAE4F3608BB}'

DECLARE @CONFIGURATION_POOL_ADDRESS_MACRO_NAME varchar(100)
SET		@CONFIGURATION_POOL_ADDRESS_MACRO_NAME = 'CONFIGURATION.POOL.ADDRESS'

DECLARE @CONFIGURATION_POOL_ADDRESS_MACRO_VALUE varchar(100)
SET		@CONFIGURATION_POOL_ADDRESS_MACRO_VALUE = 'localhost'

DECLARE @CONFIGURATION_POOL_ADDRESS uniqueidentifier
SET		@CONFIGURATION_POOL_ADDRESS = '{BBF951EF-97A9-4485-96C9-AC06EC7B6545}'

DECLARE @PUBSUB_CONFIGURATION_WCF1_PORT_MACRO_NAME varchar(100)
SET		@PUBSUB_CONFIGURATION_WCF1_PORT_MACRO_NAME = 'PUBSUB.CONFIGURATION.WCF1.PORT'

DECLARE @PUBSUB_CONFIGURATION_WCF1_PORT uniqueidentifier
SET		@PUBSUB_CONFIGURATION_WCF1_PORT = '{1E64823A-B8AE-4f84-B895-17EF04703206}'

--
-- 1. Extract PubSub channel address to macros
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	CREATE TABLE ChannelsMigration
	(
		Id int,
		ChannelName varchar( 256 ),
		ChannelAddress varchar( 1024 ),
		MigratedConfiguration xml,
		IsMigrated bit
	)

	INSERT INTO ChannelsMigration
	SELECT	ReplicationId,
			[Name],
			Channel.value( '( ServiceModel/client/endpoint/@address )[ 1 ]', 'varchar( 1024 )' ),-- AS ChannelAddress
			Contents,
			0	-- At the beginning, channel configuration is not migrated
	FROM	Active_Fragments
			CROSS APPLY
			Contents.nodes( 'Channel' ) AS Channels( Channel )
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @PUBSUB_CONFIGURATION
			AND
			RootXmlNode = 'Channels'
			AND
			Contents.exist( 'Channel' ) = 1
		
	DECLARE @ReplicationId int
	DECLARE @ChannelName varchar( 256 )
	DECLARE @ChannelAddress varchar( 1024 )

	WHILE EXISTS( SELECT Id FROM ChannelsMigration WHERE IsMigrated = 0 )
	BEGIN
		-- Select information about the channel for configuration migration
		SELECT TOP 1
				@ReplicationId = Id,
				@ChannelName = ChannelName,
				@ChannelAddress = ChannelAddress
		FROM	ChannelsMigration
		WHERE	IsMigrated = 0

		-- Replace machine name and port parts of the endpoint address with macros
		DECLARE @Length int
		DECLARE @StartPosition int		-- //
		DECLARE @MiddlePosition int		-- :
		DECLARE @EndPosition int		-- /
		DECLARE @MachineName varchar(250)
		DECLARE @PortNumber varchar(50)

		SELECT	@Length = DATALENGTH( @ChannelAddress ),
				@StartPosition = CHARINDEX( '//', @ChannelAddress, 0 ),
				@MiddlePosition = CHARINDEX( ':', @ChannelAddress, @StartPosition ),
				@EndPosition = CHARINDEX( '/', @ChannelAddress, @MiddlePosition ),
				@MachineName = SUBSTRING( @ChannelAddress, @StartPosition + 2, @MiddlePosition - @StartPosition - 2 ),
				@PortNumber = SUBSTRING( @ChannelAddress, @MiddlePosition + 1, @EndPosition - @MiddlePosition - 1 )
				
		SET @CONFIGURATION_POOL_ADDRESS_MACRO_VALUE = @MachineName
		SET	@ChannelAddress = SUBSTRING( @ChannelAddress, 0, @StartPosition + 2 ) +
							  '[DSCS:MACRO:' + @CONFIGURATION_POOL_ADDRESS_MACRO_NAME + ']' + ':' +
							  '[DSCS:MACRO:' + @PUBSUB_CONFIGURATION_WCF1_PORT_MACRO_NAME + ']' + 
							  SUBSTRING( @ChannelAddress, @EndPosition, @Length - @EndPosition + 1 )

		UPDATE	ChannelsMigration
		SET		MigratedConfiguration.modify( 'replace value of (Channel/ServiceModel/client/endpoint/@address)[1] with sql:variable("@ChannelAddress")' )
		WHERE	Id = @ReplicationId
				AND
				ChannelName = @ChannelName
		
		-- Mark channel configuration as migrated
		UPDATE	ChannelsMigration
		SET		IsMigrated = 1
		WHERE	Id = @ReplicationId
				AND
				ChannelName = @ChannelName

	END

	-- Now use migrated channel configuration to update current configuration
	UPDATE	Active_Fragments
	SET		Contents = cm.MigratedConfiguration
	FROM	ChannelsMigration cm
	WHERE	ReplicationId = cm.Id

	DROP TABLE ChannelsMigration
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Extracted Configuration Pool Address and PubSub channel WCF port to macros from PubSub channel address'
	COMMIT TRANSACTION
END

--
-- 2. Insert CONFIGURATION.POOL.ADDRESS macro
--

SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that CONFIGURATION.POOL.ADDRESS macro is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @CONFIGURATION_POOL_ADDRESS AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Description = 'Configuration Pool Server Name'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@CONFIGURATION_POOL_ADDRESS,
				@ROOT_GROUP_ID,
				@CONFIGURATION_POOL_ADDRESS_MACRO_NAME,
				@Description,
				'System.String'
			)
		END
		
	--
	-- Ensure that value is assigned to macro CONFIGURATION.POOL.ADDRESS for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @CONFIGURATION_POOL_ADDRESS ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@CONFIGURATION_POOL_ADDRESS,
			@CONFIGURATION_POOL_ADDRESS_MACRO_VALUE
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added macro value for macro CONFIGURATION.POOL.ADDRESS to the environment'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{1224A59F-31BD-4487-AA4A-C64A16670C5C}'
SET @TrackingID = '{77BD97A2-D35F-4DDA-B79A-9E74FB2E1542}'
SET @ReferenceID = '27472'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 2

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	CREATE TABLE ChannelsMigration
	(
		Id int,
		ChannelName varchar( 256 ),
		MigratedConfiguration xml,
		IsMigrated bit
	)
	
	-- select * from ChannelsMigration

	INSERT INTO ChannelsMigration
	SELECT	ReplicationId,
			Channel.value( '( @name )[ 1 ]', 'varchar( 256 )' ),-- AS ChannelAddress
			Contents,
			0	-- At the beginning, channel configuration is not migrated
	FROM	Active_Fragments
			CROSS APPLY
			Contents.nodes( 'ServicePool/RequestChannels/RequestChannel' ) AS Channels( Channel )
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			RootXmlNode = 'ServicePools'
			AND
			Contents.exist( 'ServicePool/RequestChannels/RequestChannel' ) = 1
	
	
	DECLARE @ReplicationId int
	DECLARE @ChannelName varchar( 256 )

	WHILE EXISTS( SELECT Id FROM ChannelsMigration WHERE IsMigrated = 0 )
	BEGIN
		-- Select information about the channel for configuration migration
		SELECT TOP 1
				@ReplicationId = Id,
				@ChannelName = ChannelName
		FROM	ChannelsMigration
		WHERE	IsMigrated = 0
		
		EXEC
		(
			'UPDATE ChannelsMigration
			 SET MigratedConfiguration.modify
			 (
				''replace value of ( .//RequestChannels/RequestChannel[@name="'+@ChannelName+'"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@maxPendingConnections )[ 1 ]
						  with "10"''
			 )
			 WHERE	Id = ' + @ReplicationId +'
			 AND MigratedConfiguration.exist
			 (
				''.//RequestChannels/RequestChannel[@name="'+@ChannelName+'"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@maxPendingConnections''
			 ) = 1
			 '
		)
		
		EXEC
		(
			'UPDATE ChannelsMigration
			 SET MigratedConfiguration.modify
			 (
				''replace value of ( .//RequestChannels/RequestChannel[@name="'+@ChannelName+'"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@maxPendingAccepts )[ 1 ]
						  with "10"''
			 )
			 WHERE	Id = ' + @ReplicationId +'
			 AND MigratedConfiguration.exist
			 (
				''.//RequestChannels/RequestChannel[@name="'+@ChannelName+'"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@maxPendingAccepts''
			 ) = 1
			 '
		)
		
		EXEC
		(
			'UPDATE ChannelsMigration
			 SET MigratedConfiguration.modify
			 (
				''replace value of ( .//RequestChannels/RequestChannel[@name="'+@ChannelName+'"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@listenBacklog )[ 1 ]
						  with "10"''
			 )
			 WHERE	Id = ' + @ReplicationId +'
			 AND MigratedConfiguration.exist
			 (
				''.//RequestChannels/RequestChannel[@name="'+@ChannelName+'"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/tcpTransport/@listenBacklog''
			 ) = 1
			 '
		)
		
		-- Mark channel configuration as migrated
		UPDATE	ChannelsMigration
		SET		IsMigrated = 1
		WHERE	Id = @ReplicationId
				AND
				ChannelName = @ChannelName

	END
	
	-- Now use migrated channel configuration to update current configuration
	UPDATE	Active_Fragments
	SET		Contents = cm.MigratedConfiguration
	FROM	ChannelsMigration cm
	WHERE	ReplicationId = cm.Id


	DROP TABLE ChannelsMigration
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Changed maxPendingConnections, maxPendingAccepts and listenBacklog attributes in ServicePools channels configuration'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4E3B-BD17-02B3C0130B3A}' -- PreviousReferenceID: 15634 - Reorganize Initial Config
SET @TrackingID = '{A8FE2E92-47C0-406F-9A61-CEF0929314D5}'
SET @ReferenceID = '27831'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7	-- Fragments created and linked to appropriate section(s)

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- 1. Move ServiceHostData to its own fragment
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- Prepare list of names of element that will be moved to separate fragment
	CREATE TABLE #Elements27831
	(
		Name varchar( 20 )
	)
	INSERT INTO #Elements27831
	SELECT 'ServiceHostData'
	UNION
	SELECT 'ServicePermissions'
	
	-- Create table that will temporarily hold new fragments
	CREATE TABLE #NewFragments27831
	(
		ServiceFragmentId uniqueidentifier,
		Id uniqueidentifier,
		RootGroupId uniqueidentifier,
		Name varchar(250),
		Description varchar(1024),
		SectionId uniqueidentifier,
		RootXmlNode varchar(1024),
		Contents xml
	)
	
	DECLARE @ElementName varchar( 20 )
	WHILE ( EXISTS ( SELECT Name FROM #Elements27831 ) )
	BEGIN
		-- Select one name from the list
		SELECT TOP 1
				@ElementName = Name	
		FROM	#Elements27831

		-- Populate temporary NewFragments table
		INSERT INTO #NewFragments27831
		SELECT	
				f.Id AS ServiceFragmentId,
				NEWID() AS Id, -- Generate new fragment id
				f.RootGroupId,
				f.Name + '.' + @ElementName AS Name,
				f.[Description] + ' ' + @ElementName AS [Description],
				f.SectionId,
				f.RootXmlNode + '/Service name="' + f.Contents.value( '(Service/@name)[1]', 'varchar( MAX )' ) + '"' AS RootXmlNode,
				Element.query( '.' ) AS Contents
		FROM	dbo.Active_Fragments f
				cross apply
				f.Contents.nodes( 'Service/*[local-name()=sql:variable( "@ElementName" )]' ) AS [Service]( Element )
		WHERE	f.SectionId = @SERVICEHOST
				and
				LTRIM( f.RootXmlNode ) like 'Services%'

		-- Remove the element from every Service that has it
		UPDATE	dbo.Active_Fragments
		SET		Contents.modify( 'delete (Service/*[local-name()=sql:variable( "@ElementName" )])' )
		FROM	dbo.Active_Fragments f
				JOIN
				#NewFragments27831 nf
					ON	nf.ServiceFragmentId = f.Id

		-- Exclude all potential fragments without any element
		DELETE FROM #NewFragments27831
		WHERE	LTRIM( RTRIM( CONVERT( varchar( MAX ), Contents.query( '*' ) ) ) ) = ''
		
		-- Insert new fragments
		INSERT INTO dbo.Active_Fragments
		(
			Id,
			RootGroupId,
			Name,
			Description,
			SectionId,
			RootXmlNode,
			Contents
		)
		SELECT	nf.Id,
				nf.RootGroupId,
				nf.Name,
				nf.[Description],
				nf.SectionId,
				nf.RootXmlNode,
				nf.Contents
		FROM	#NewFragments27831 nf

		-- Insert associations for new fragments
		INSERT INTO dbo.Active_GroupFragments ( RootGroupId, GroupId, FragmentId )
		SELECT	agf.RootGroupId,
				agf.GroupId,
				nf.Id AS FragmentId
		FROM	#NewFragments27831 nf
				JOIN
				Active_GroupFragments agf
					ON	agf.FragmentId = nf.ServiceFragmentId
	
		-- Delete the name from the list
		DELETE FROM #Elements27831
		WHERE	Name = @ElementName
		
		-- Delete all new fragments from temporary table
		DELETE FROM #NewFragments27831
	END
	
	-- Drop temporary tables
	DROP TABLE #NewFragments27831
	DROP TABLE #Elements27831
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Moved ServiceHostData and ServicePermissions to their own fragment'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{9BE2FE4A-2EC9-46a5-80DE-6DC26E2EF9EE}'
SET @ReferenceID = '28500'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
DECLARE @PreviousSection int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

SET @PreviousSection = 14

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4F38-B4ED-5C917010C756}'


DECLARE @FragmentId uniqueidentifier

-- SBACSecurity.ExportConfiguration
SET @Section = 15
IF 	DataFix.SectionState( @TrackingID, @PreviousSection ) = @SectionCompleted
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{6C181822-87D5-42D8-B01D-A72D063F6DF6}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ExportConfiguration'
			SET @Description = 'Security preferences for Export Configuration module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Export Configuration">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ExportConfiguration'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{25EC733A-30B5-494D-AE2D-A24B8245CC42}'
SET @ReferenceID = '28914'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

--
-- Declare and initialize section ID constants
--
DECLARE @CONFIGURATION uniqueidentifier
SET		@CONFIGURATION = '{23D28783-F431-4dc9-83E5-14390D15686B}'

--
-- 1. Create ServiceBus.Configuration section
-- 2. Create SchemaVersion fragment for the new section
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	-----
	--
	-- Ensure that ServiceBus.Configuration section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @CONFIGURATION AND @ROOT_GROUP_ID = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus.Configuration'
			SET @Description = 'ServiceBus.Configuration section'
			
			INSERT INTO Active_Sections
			(
				Id,
				RootGroupId,
				SectionGroupName,
				Name,
				Description,
				HandlerType,
				ConfigFile,
				IsLegacySection,
				IsRemoteOnly,
				ConfigurationHelperType,
				SectionAttributes
			)
			VALUES
			(
				@CONFIGURATION,
				@ROOT_GROUP_ID,
				NULL,
				@Name,
				@Description,
				'ServiceBus.Configuration.XmlNodeConfigHandler, ServiceBus.Configuration.Common', -- Handler type
				'App.config',
				1, -- Is legacy configuration?
				0,
				NULL,
				NULL
			)
		END
	
	DECLARE @FragmentId uniqueidentifier
	
	-----
	--
	-- Ensure that Configuration.SchemaVersion fragment is created for CONFIGURATION section
	--
	SET	@FragmentId = '{D21BB9B7-5A33-4F6E-B4B3-583257590256}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Configuration.SchemaVersion'
			SET @Description = 'The current schema version of configuration items contained within Configuration Service'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@CONFIGURATION,
				NULL,
				'<SchemaVersion>3.1.1.11</SchemaVersion>' -- COMMENT OUT FOR SETUP
				--'<SchemaVersion>{DS:MACRO:SCHEMA_VERSION}</SchemaVersion>' 	-- UNCOMMENT FOR SETUP
			)
		END
	
	--
	-- Ensure that Configuration.SchemaVersion fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added SchemaVersion into ServiceBus.Configuration section'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634 (Reorganize initial config)
SET @TrackingID = '{BB2817A3-7B98-4fa3-AF30-4C257210136B}'
SET @ReferenceID = '29334'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7 -- Created fragments and linked them to appropriate section(s)

--
-- 1. Select fragment(s) containing ServiceCatalog configuration.
-- 2. Ensure that ControlData element exists in the selected fragment(s).
-- 3. Update ControlData element(s) to insert common test case assertion attributes.
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize section ID constants
	--
	DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
	SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

	BEGIN TRANSACTION
	
	--
	-- 1. Select fragment(s) containing ServiceCatalog configuration.
	--
	DECLARE @Ids TABLE
	(
		ID int
	)
	INSERT INTO @Ids
	SELECT	ReplicationId
	FROM	Active_Fragments
	WHERE	SectionId = @ADMINISTRATION_CONFIGURATION
			AND
			( RootXmlNode IS NULL OR LTRIM( RTRIM( RootXmlNode ) ) = '' )
			AND
			Contents.exist( 'Controls/Control[ConfigurationPath[text()="ServiceBus.ServiceHost/Services"]]' ) = 1

	--
	-- 2. Ensure that ControlData element exists in the selected fragment(s).
	--
	UPDATE	Active_Fragments
	SET		Contents.modify
			(
				'insert
						<ControlData />
				 as last
				 into ( Controls/Control[ConfigurationPath[text()="ServiceBus.ServiceHost/Services"]] )[ 1 ] '
			)
	FROM	Active_Fragments f
			JOIN
			@Ids i
				ON f.ReplicationId = i.ID
	WHERE	f.Contents.exist( '( Controls/Control[ConfigurationPath[text()="ServiceBus.ServiceHost/Services"]] )[ 1 ]/ControlData' ) = 0
	
	--
	-- 3. Update ControlData element(s) to insert common test case assertion attributes.
	--
	UPDATE	Active_Fragments
	SET		Contents.modify
			(
				'insert
						<Service>
							<TestCases>
								<Assertion>
									<Attributes>
										<Attribute name="ServicePool.InvokeService.Duration" />
										<Attribute name="ServiceHost.InvokeService.Duration" />
										<Attribute name="ServiceHost.RequestedPriority" />
										<Attribute name="ServiceHost.RequestedExecutionType" />
										<Attribute name="ServicePool.ExecutionType" />
										<Attribute name="ServiceHost.IsTestCase" />
										<Attribute name="ServiceHost.TestCase.Name" />
									</Attributes>
								</Assertion>
							</TestCases>
						</Service>
				 as first
				 into ( Controls/Control[ConfigurationPath[text()="ServiceBus.ServiceHost/Services"]]/ControlData )[ 1 ] '
			)
	FROM	Active_Fragments f
			JOIN
			@Ids i
				ON f.ReplicationId = i.ID
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added common test case assertion attributes'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634: Reorganize Initial Config
SET @TrackingID = '{8E9909A1-A979-46E9-AED2-88A71511D6CD}'
SET @ReferenceID = '30889'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 5	-- Created filters for the applications

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'
	
DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
--
-- Declare and initialize section ID constants resource fragment of ServiceBus.ServiceHost.Common.dll
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE @Name varchar( 250 )
DECLARE @Description varchar( 1024 )

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Add ServicePoolLoader filter to ServiceBus ServiceHost Service application
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that ServiceBus.ServiceHost.ServicePoolLoader application filter for the root group is created
	--	
	DECLARE	@FilterId uniqueidentifier
	SET	@FilterId = '{1002C7EF-7E7E-4DF3-BC88-9D675DC0A518}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Filters WHERE Id = @FilterId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus ServiceHost ServicePoolLoader'
			SET @Description =
				'This filter is matched by any version of ServiceBus ServiceHost ServicePoolLoader application ' +
				'running on any machine under any account regardless of application and configuration paths.'
			
			INSERT INTO Active_Filters
			(
				Id,
				RootGroupId,
				Name,
				Description,
				MachineName,
				AppName,
				AppPath,
				AppConfigFilePath,
				AppVersion,
				AppUser
			)
			VALUES
			(
				@FilterId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				'ServiceBus.ServiceHost.ServicePoolLoader',
				NULL,
				NULL,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that the ServiceBus ServiceHost ServicePoolLoader filter is linked to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFilters WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FilterId = @FilterId ) )
		INSERT INTO Active_GroupFilters
		(
			RootGroupId,
			GroupId,
			FilterId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FilterId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added ServicePoolLoader filter to ServiceBus ServiceHost Service application'
	COMMIT TRANSACTION
END

--
-- 1.a. Create new resource fragment for ServiceBus.Utility.Security.dll
-- 1.b. Associate new resource fragment with all applications that require ServiceBus.ServiceHost.Common.dll assembly
-- 1.c. Add it as dependency into resource fragment of ServiceBus.ServiceHost.Common.dll
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Create new resource fragment for ServiceBus.Utility.Security.dll
	--
	DECLARE @FragmentId uniqueidentifier
	SET		@FragmentId = '{5646B113-277A-41E5-9E8B-AA78015AC903}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET	@Name = 'Resource.ServiceBus.Utility.Security.dll'
			SET @Description = 'ServiceBus.Utility.Security.dll resource'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'
<Resource name="ServiceBus.Utility.Security.dll" id="b4c187aa-0b3f-4e9e-9f16-ec98a16bc6a2">
  <FileName>ServiceBus.Utility.Security.dll</FileName>
  <Bytes />
  <Dependencies />
</Resource>
				'
			)
		END
	
	
	--
	-- Associate new resource fragment with all applications that require ServiceBus.ServiceHost.Common.dll assembly
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	--
	-- Add ServiceBus.Utility.Security.dll as dependency of ServiceBus.ServiceHost.Common.dll resource
	-- (but only if it is not already there)
	--
	SET		@FragmentId = '3C97C2AF-8143-4DB5-833A-4505732D729B' -- ServiceBus.ServiceHost.Common.dll resource fragment
	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert
									<Resource name="ServiceBus.Utility.Security.dll" />
							  as last
							  into (/Resource/Dependencies)[1]' )
	WHERE	Id = @FragmentId
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			Contents.exist( '/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Security.dll"]' ) = 0
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Created ServiceBus.Utility.Security.dll resource fragment, associated the fragment with relevant applications and added the resource as dependency'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{CCC04794-9082-4C43-A882-3F10BDDCA80C}'
SET @ReferenceID = '31307'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	UPDATE Active_Fragments
	SET Contents.modify('replace value of (//ServiceHostData/PersistPending[1]/text())[1] with "False"')
	WHERE
	RootXmlNode LIKE 'Services/ServiceGroup name="Logging"%'
	AND Contents.exist('//ServiceHostData/PersistPending[text() = "True"]' ) = 1
	
	UPDATE Active_Fragments
	SET Contents.modify('replace value of (//ServiceHostData/PersistActive[1]/text())[1] with "False"')
	WHERE
	RootXmlNode LIKE 'Services/ServiceGroup name="Logging"%'
	AND Contents.exist('//ServiceHostData/PersistActive[text() = "True"]' ) = 1
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Turned off Persist Pending and Persist Completed in Logging services'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{73DD60BA-537C-4332-B585-C302F72188E7}'
SET @ReferenceID = '30887'
SET @Author = 'Enes Pelko'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	-- Create table that will temporarily hold matching fragments
	CREATE TABLE #UpdatedFragments30887
	(
		ExistingId int,
		NewContents xml,
		IsProcessed bit
	)
	
	-- Populate temporary table with fragments that contain New key node
	INSERT INTO #UpdatedFragments30887
	SELECT		ReplicationId,
				Contents,
				0 -- At the beginning, fragments are not processed
	FROM		Active_Fragments
	WHERE		Contents.exist( '//Dictionary/Add/New' ) = 1
	
	DECLARE @HasMore bit
	DECLARE @Id int
	DECLARE @Contents xml
	DECLARE @Position int	
	
	SET		@HasMore = 1
	WHILE	( @HasMore = 1 )
		BEGIN
			-- Select next unprocessed fragment
			SELECT	@Id = ExistingId, @Contents = NewContents
			FROM	#UpdatedFragments30887
			WHERE	IsProcessed = 0
			
			IF @Id IS NULL
				SET @HasMore = 0
			ELSE
				BEGIN
					-- Prepare new contents
					SET		@Position = 1
					WHILE	( @Contents.exist('(//Dictionary/Add/New)[sql:variable("@Position")]') = 1 )
						BEGIN
							SET	@Contents.modify
							('
								insert <Key><New /></Key> after ((//Dictionary/Add/New)[sql:variable("@Position")])[1]
							 ')	
							
							SET	@Position = @Position + 1	
						END		
					
					-- Update contents and mark fragment as processed
					UPDATE	#UpdatedFragments30887
					SET		NewContents = @Contents,
							IsProcessed = 1
					WHERE	ExistingId = @Id
				END
			
			-- Reset Id
			SET	@Id = NULL
		END
		
	Update	#UpdatedFragments30887 
	SET		NewContents.modify('delete //Dictionary/Add/New')
	
	-- Update original fragment
	UPDATE	Active_Fragments
	SET		Contents = NewContents
	FROM	#UpdatedFragments30887
	WHERE	ReplicationId = ExistingId	

	-- Drop temporary table containing the updated fragments
	DROP TABLE #UpdatedFragments30887

EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Move new key node in dictionary to key node.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{BCE967A1-402F-4BF8-A571-CDD4C1891BE5}'
SET @ReferenceID = '27893'
SET @Author = 'Nermin Redzo'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--Sections
DECLARE @APP_SETTINGS uniqueidentifier
SET		@APP_SETTINGS = '{6B76A284-E8F4-47AB-83FB-4C984BC4EE13}'

DECLARE @FragmentId uniqueidentifier

-- AppSettings.ConfigurationExplorer.DisplayContentSize
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{37E93F13-CCC9-4914-A43C-582446310D7F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'AppSettings.ConfigurationExplorer.DisplayContentSize'
			SET @Description = 'Maximum size of content to be displayed in configuration explorer'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@APP_SETTINGS,
				null,
				'<add key="ConfigurationExplorer.DisplayContentSize" value="2000" />' )
		END

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: AppSettings.ConfigurationExplorer.DisplayContentSize'
	COMMIT TRANSACTION
END

GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID1 uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID1 = '{303D0A74-36FB-4d3b-85E4-8564F5FD8279}'	-- PreviousReferenceID: 22322
SET @TrackingID = '{26496CF7-33E3-4d61-A7F5-F077FF1AC80A}'
SET @ReferenceID = '23156'
SET @Author = 'Mirano Galijasevic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection1 int
DECLARE @PreviousSection2 int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection1 = 1	-- Configuration Service application created

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

--
-- Declare and initialize section ID constants
--
DECLARE @CONFIGURATION_PLUGINS uniqueidentifier
SET		@CONFIGURATION_PLUGINS = '{23D28783-F431-4DC9-83E5-14390D15686B}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'


SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID1, @PreviousSection1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @FragmentId uniqueidentifier
	
	-----
	--
	-- Ensure that Configuration.Plugins.CompressionPlugins fragment is created for CONFIGURATION_PLUGINS section
	--
	SET	@FragmentId = '{9A47540C-6E14-471e-B8C3-BB2F020F59D4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Configuration.Plugins.ConfigurationPlugins'
			SET @Description = 'The plugins that can be used for compression and decompression'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@CONFIGURATION_PLUGINS,
				NULL,
				'
				<CompressionPlugins enabled="False">
					<CompressionPlugin name="GZip">
						<Implementation>
							<Assembly>ServiceBus.Configuration.Plugins.Compression.GZip.dll</Assembly>
							<Type>ServiceBus.Configuration.Plugins.Compression.GZipCompressionPlugin</Type>
						</Implementation>
						<InitializationData>
							<MinBytes>2147483647</MinBytes>
							<MaxBytes>2147483647</MaxBytes>
						</InitializationData>
					</CompressionPlugin>
				</CompressionPlugins>
				'
			)
		END
	
	--
	-- Ensure that Configuration.Plugins.CompressionPlugins fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Configuration.Plugins.CompressionPlugins fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Configuration.Plugins.CompressionPlugins fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that Configuration.Plugins.CompressionPlugins fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added CompressionPlugins configuration to ServiceBus.Configuration section'
	COMMIT TRANSACTION
END
GO

--
-- ServiceBusConfiguration - Update ServicePools fragments to include information on supported invoke types. The information is part of RequestQueue node.
--

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{0A1450B5-F2F7-4088-A376-B52F81F51EF2}'
SET @ReferenceID = '30764'
SET @Author = 'Ahmed Vila'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @Section = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	------------------------------------------------------
	-- Add Sync queue to installed pools where they do not exist
	------------------------------------------------------
	UPDATE	Active_Fragments 
	SET		Contents.modify('insert <RequestQueue name="Sync"><RequestQueueFactoryData name="PassThrough" /></RequestQueue>
				as first into (./ServicePool/ServiceRequestManager/RequestQueues)[1]')
	WHERE	RootXmlNode = 'ServicePools'
	AND		( Name = 'ServicePool.System' OR Name = 'ServicePool.Logging' )
	AND		Contents.exist('./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="PassThrough"]]') = 0
	
	DECLARE @AsyncQueueExists bit
	DECLARE @NewMacroId uniqueidentifier

	------------------------------------------------------------
	--- Add Async Queue with path macro value to Logging Pool --
	------------------------------------------------------------

	SELECT @AsyncQueueExists =	Contents.exist('./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="Msmq"]]')
								FROM Active_Fragments
								WHERE	RootGroupId = @ROOT_GROUP_ID
								AND		SectionId = @SERVICEHOST
								AND		RootXmlNode = 'ServicePools'
								AND		Name = 'ServicePool.Logging'
							
	IF ( @AsyncQueueExists = 0 )
	BEGIN
	
		SET @NewMacroId = '{0034E8CB-A4BF-47EE-9E58-6D8151F4EFC1}'
	
		--
		-- Ensure that LOGGING.FILETARGET.FOLDER macro is created for the root group
		--
		IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @NewMacroId AND RootGroupId = @ROOT_GROUP_ID ) )
			BEGIN
			
				INSERT INTO Active_Macros
				(
					Id,
					RootGroupId,
					Name,
					Description,
					ValueType
				)
				VALUES
				( 
					@NewMacroId,
					@ROOT_GROUP_ID,
					'SP.LOGGING.ASYNC1.QUEUE.PATH',
					'Msmq path for Async request queue in Logging ServicePool',
					'System.String'
				)
			END
	
		--
		-- Ensure that value is assigned to macro SP.LOGGING.ASYNC1.QUEUE.PATH for all applications
		--
		IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @NewMacroId ) )
			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@NewMacroId,
				'.\Private$\ServiceBus.Logging.AsyncRequestQueue1'
			)
	
		UPDATE	Active_Fragments 
		SET		Contents.modify('insert 
				<RequestQueue name="Async">
					<RequestQueueFactoryData name="Msmq">
						<QueuePath>[DSCS:MACRO:SP.LOGGING.ASYNC1.QUEUE.PATH]</QueuePath>
						<MaximumMessageSize>102400</MaximumMessageSize>
					</RequestQueueFactoryData>
				</RequestQueue>
				as last into (./ServicePool/ServiceRequestManager/RequestQueues)[1]')
		WHERE	RootGroupId = @ROOT_GROUP_ID
		AND		SectionId = @SERVICEHOST
		AND		RootXmlNode = 'ServicePools'
		AND		Name = 'ServicePool.Logging'
	END

	------------------------------------------------------------
	--- Add Async Queue with path macro value to System Pool ---
	------------------------------------------------------------

	SELECT @AsyncQueueExists =	Contents.exist('./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="Msmq"]]')
								FROM Active_Fragments
								WHERE	RootGroupId = @ROOT_GROUP_ID
								AND		SectionId = @SERVICEHOST
								AND		RootXmlNode = 'ServicePools'
								AND		Name = 'ServicePool.System'
							
	IF ( @AsyncQueueExists = 0 )
	BEGIN
	
		SET @NewMacroId = '{F11C6725-E22B-4CCE-9D11-C0A2F42E4744}'
	
		--
		-- Ensure that LOGGING.FILETARGET.FOLDER macro is created for the root group
		--
		IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @NewMacroId AND RootGroupId = @ROOT_GROUP_ID ) )
			BEGIN
			
				INSERT INTO Active_Macros
				(
					Id,
					RootGroupId,
					Name,
					Description,
					ValueType
				)
				VALUES
				( 
					@NewMacroId,
					@ROOT_GROUP_ID,
					'SP.SYSTEM.ASYNC1.QUEUE.PATH',
					'Msmq path for Async request queue in System ServicePool',
					'System.String'
				)
			END
	
		--
		-- Ensure that value is assigned to macro SP.SYSTEM.ASYNC1.QUEUE.PATH for all applications
		--
		IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @NewMacroId ) )
			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@NewMacroId,
				'.\Private$\ServiceBus.System.AsyncRequestQueue1'
			)
	
		UPDATE	Active_Fragments 
		SET		Contents.modify('insert 
				<RequestQueue name="Async">
					<RequestQueueFactoryData name="Msmq">
						<QueuePath>[DSCS:MACRO:SP.SYSTEM.ASYNC1.QUEUE.PATH]</QueuePath>
						<MaximumMessageSize>102400</MaximumMessageSize>
					</RequestQueueFactoryData>
				</RequestQueue>
				as last into (./ServicePool/ServiceRequestManager/RequestQueues)[1]')
		WHERE	RootGroupId = @ROOT_GROUP_ID
		AND		SectionId = @SERVICEHOST
		AND		RootXmlNode = 'ServicePools'
		AND		Name = 'ServicePool.System'
	END

	------------------------------------------------------
	-- Remove all queues from SingleQueueClassifier for installed pools
	------------------------------------------------------
	UPDATE	Active_Fragments 
	SET		Contents.modify('delete (./ServicePool/ServiceRequestManager/RequestClassifier/RequestClassifierFactoryData[@name="SingleQueueClassifier"]/RequestQueues/RequestQueue)')
	WHERE	RootGroupId = @ROOT_GROUP_ID
	AND		SectionId = @SERVICEHOST
	AND		RootXmlNode = 'ServicePools'
	AND		( Name = 'ServicePool.System' OR Name = 'ServicePool.Logging' )
	AND		Contents.exist('./ServicePool/ServiceRequestManager/RequestClassifier/RequestClassifierFactoryData[@name="SingleQueueClassifier"]/RequestQueues') = 1
		
	------------------------------------------------------
	-- Add Supported to Request Queues
	------------------------------------------------------
	UPDATE	Active_Fragments 
	SET		Contents.modify('insert <Supported><Synchronous /></Supported> 
				as first into (./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="PassThrough"]])[1]')
	WHERE	RootGroupId = @ROOT_GROUP_ID
	AND		SectionId = @SERVICEHOST
	AND		RootXmlNode = 'ServicePools'
	AND		Contents.exist('./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="PassThrough"]]') = 1
	AND		Contents.exist('./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="PassThrough"]]/Supported') = 0
	
	UPDATE	Active_Fragments 
	SET		Contents.modify('insert <Supported><Asynchronous /></Supported>
				as first into (./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="Msmq"]])[1]')
	WHERE	RootGroupId = @ROOT_GROUP_ID
	AND		SectionId = @SERVICEHOST
	AND		RootXmlNode = 'ServicePools'
	AND		Contents.exist('./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="Msmq"]]') = 1
	AND		Contents.exist('./ServicePool/ServiceRequestManager/RequestQueues/RequestQueue[RequestQueueFactoryData[@name="Msmq"]]/Supported') = 0

	------------------------------------------------------
	-- Add Queues that are missing to ThreadPool Request Scheduler
	------------------------------------------------------
	
	CREATE TABLE QueuesMigration
	(
		Id int,
		QueueName varchar( 256 ),
		MigratedConfiguration xml,
		IsMigrated bit
	)

	INSERT INTO QueuesMigration
	SELECT	ReplicationId,
			RequestQueue.value( '( @name )[ 1 ]', 'varchar( 1024 )' ),
			Contents,
			0	-- At the beginning, queue configuration is not migrated
	FROM	Active_Fragments
			CROSS APPLY
			Contents.nodes( './ServicePool/ServiceRequestManager/RequestQueues/RequestQueue' ) AS RequestQueues( RequestQueue )
	WHERE	RootGroupId = @ROOT_GROUP_ID
	AND		SectionId = @SERVICEHOST
	AND		RootXmlNode = 'ServicePools'
		
	DECLARE @ReplicationId int
	DECLARE @QueueName varchar( 256 )

	WHILE EXISTS( SELECT Id FROM QueuesMigration WHERE IsMigrated = 0 )
	BEGIN
		-- Select information about the channel for configuration migration
		SELECT TOP 1
				@ReplicationId = Id,
				@QueueName = QueueName
		FROM	QueuesMigration
		WHERE	IsMigrated = 0

		UPDATE	Active_Fragments
		SET		Contents.modify('insert
				<RequestQueue name="3A2090D2-3351-4CA4-9B39-63DD1083A1A1">
					<ThreadCleanupMode>Synchronous</ThreadCleanupMode>
					<ReservedThreads>10</ReservedThreads>
					<MaxThreads>15</MaxThreads>
				</RequestQueue>
				as first into (./ServicePool/ServiceRequestManager/RequestScheduler/RequestSchedulerFactoryData[@name="ThreadPool"]/RequestQueues)[1]')
		WHERE	ReplicationId = @ReplicationId
		AND		Contents.exist('(./ServicePool/ServiceRequestManager/RequestScheduler/RequestSchedulerFactoryData[@name="ThreadPool"]/RequestQueues/RequestQueue/@name)[. = sql:variable("@QueueName")]') = 0
		
		UPDATE	Active_Fragments
		SET		Contents.modify( 'replace value of (./ServicePool/ServiceRequestManager/RequestScheduler/RequestSchedulerFactoryData[@name="ThreadPool"]/RequestQueues/RequestQueue[@name="3A2090D2-3351-4CA4-9B39-63DD1083A1A1"]/@name)[1] with sql:variable("@QueueName")' )
		WHERE	ReplicationId = @ReplicationId
		
		-- Mark configuration as migrated
		UPDATE	QueuesMigration
		SET		IsMigrated = 1
		WHERE	Id = @ReplicationId
				AND
				QueueName = @QueueName

	END

	DROP TABLE QueuesMigration
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Updated ServicePool fragments to include information on supported invoke types.'
	COMMIT TRANSACTION
END

GO

--
-- ServiceBusConfiguration - Rename "XML Node To String" node to "XML Doc To String" in ServiceBus.ServiceHost.DseStep.XmlDocToString Step
--

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{D2ADF170-25A9-43DB-BA5F-E3F17EFB6C84}'
SET @ReferenceID = '31302'
SET @Author = 'Ahmed Vila'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @Section = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	UPDATE Active_Fragments
	   SET Contents = REPLACE( CONVERT( varchar(max), Contents), 'XML Node To String', 'XML Doc To String')
	 WHERE Contents.exist( './Step[@name="ServiceBus.ServiceHost.DseStep.XmlDocToString"]/Metadata/Attributes/Attribute[@type="DseStep"]/Properties/Property[@name="friendlyName"]' ) = 1
	 
	 UPDATE Active_Fragments
	   SET Contents = REPLACE( CONVERT( varchar(max), Contents), 'Converted string from XML node', 'Converted string from XML document')
	 WHERE Contents.exist( './Step[@name="ServiceBus.ServiceHost.DseStep.XmlDocToString"]/Metadata/Attributes/Attribute[@type="DseStepArgument"]/Properties/Property[@name="description"]' ) = 1

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Renamed "XML Node To String" node to "XML Doc To String"'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{25EC733A-30B5-494D-AE2D-A24B8245CC42}'
SET @ReferenceID = '33051'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

--
-- Declare and initialize section ID constants
--
DECLARE @CONFIGURATION uniqueidentifier
SET		@CONFIGURATION = '{23D28783-F431-4dc9-83E5-14390D15686B}'

--
-- 1. Create ServiceBus.Configuration section
-- 2. Create SchemaVersion fragment for the new section
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted
AND	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	DECLARE @FragmentId uniqueidentifier
	SET	@FragmentId = '{D21BB9B7-5A33-4F6E-B4B3-583257590256}'
	
	UPDATE	Active_Fragments
	SET		Contents = '<SchemaVersion>3.2.0.4</SchemaVersion>'
	WHERE	Id = @FragmentId
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Updated Schema Version to 3.2.0.4'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{118EEACE-8DF8-42FE-BC37-0DC7C0C7B5EF}'
SET @ReferenceID = '00000'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--Sections
DECLARE @APP_SETTINGS uniqueidentifier
SET		@APP_SETTINGS = '{6B76A284-E8F4-47AB-83FB-4C984BC4EE13}'

DECLARE @FragmentId uniqueidentifier

-- AppSettings.ConfigurationExplorer.DisplayContentSize
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION	
	
	--
	-- Ensure that 'AppSettings.ServiceBus.Administration.ServiceHostAdministration.UserResourceCatalogTemplate' fragment is created for APP_SETTINGS section
	--
	SET	@FragmentId = '{F81881B6-CBFF-42BD-AD9B-B7B856ECAC0E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'AppSettings.ServiceBus.Administration.ServiceHostAdministration.UserResourceCatalogTemplate'
			SET @Description = 'Indicates whether the ServiceHostAdministration module should try to use ServicePool template from Resource Catalog'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@APP_SETTINGS,
				NULL,
				'<add key="ServiceBus.Administration.ServiceHostAdministration.UserResourceCatalogTemplate" value="False" />'
			)
		END
		
	--
	-- Ensure that 'AppSettings.ServiceBus.Administration.ServiceHostAdministration.UserResourceCatalogTemplate' fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: AppSettings.ServiceBus.Administration.ServiceHostAdministration.UserResourceCatalogTemplate'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{09304203-E6D8-4032-8FAE-126A877E8FAA}' -- PreviousReferenceID: 18279
SET @TrackingID = 'A7CDFA68-641F-4C61-9D63-3E5CEABB46F2'
SET @ReferenceID = '30105'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1	-- CONFIGURATION_SERVICE application created
							-- Unity configuration section and its fragments are created
							-- ServiceBus.Logging section created

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)
DECLARE @FragmentId uniqueidentifier

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize CONFIGURATION_SERVICE application (child group) id constant
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

--
-- Declare and initialize section ID constant(s)
--
DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4f38-B4ED-5C917010C756}'

DECLARE	@LOGGING uniqueidentifier
SET		@LOGGING = '{398F8990-F814-4e83-9EBC-B6AD9E1E8BB4}'

--
-- 1. Associate Logging related unity type mappings with ServiceBus Configuration Service
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	-- ServiceBus.Logging types --
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogging' fragment is added to CONFIGURATION_SERVICE application
	--
	SET	@FragmentId = '{4FA3B666-1953-429f-A8BC-B74F411FE98E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryFactory' fragment is added to CONFIGURATION_SERVICE application
	--
	SET	@FragmentId = '{9C406AAD-FC20-4a17-A44E-AAF76877412F}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
				
	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeFactory' fragment is added to CONFIGURATION_SERVICE application
	--
	SET	@FragmentId = '{F2D86F6E-427B-4357-A845-ABCF27BFC0AD}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeCollectionFactory' fragment is added to CONFIGURATION_SERVICE application
	--
	SET	@FragmentId = '{D324DD1F-77A4-422f-BBF4-F110F8AE10BA}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Associated Logging related unity type mappings with ServiceBus Configuration Service'
	
	COMMIT TRANSACTION
END

--
-- 2. Create new ServiceBus.Logging section fragments for ServiceBus Configuration Service
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	--
	-- Ensure that CS.Properties fragment is created for LOGGING section
	--
	SET	@FragmentId = '{CC89E490-3435-4598-8CBE-16E4EA0770B9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'CS.Properties'
			SET @Description = 'Logging properties for Configuration Windows service'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING,
				NULL,
				'
<Properties>
	<Property name="Level">Warning</Property>
	<!--
		<Property name="MachineName">Dev</Property>
		<Property name="ApplicationName">TestApp</Property>
	-->
	<Property name="AttributeCodeSize">80</Property>
	<Property name="AttributeValueSize">250</Property>
	<Property name="CommandTimeout">250</Property>
</Properties>
				'
			)
		END
		
	--
	-- Ensure that CS.Properties fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that CS.Targets fragment is created for LOGGING section
	--
	SET	@FragmentId = '{1F9EC59C-306B-4896-A54B-77E4035E4FD0}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'CS.Targets'
			SET @Description = 'Logging targets for Configuration Windows service'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@LOGGING,
				NULL,
				'
<Targets>
	<Target name="NonLoggingPools-MSMQ">
		<Assembly>ServiceBus.Logging.Targets.MSMQ.dll,ServiceBus.Logging.MSMQTarget</Assembly>
		<Properties>
			<LogInternalException>True</LogInternalException>
			<Property name="QueuePath">.\Private$\ServiceBus.logging</Property>
		</Properties>
		<Filter>
			<LogLevel>
				<Value>Warning</Value>
				<Match>GreaterThenOrEqual</Match>
			</LogLevel>
			<Flags>
				<Flag name="ForwardedByService">
					<IsSet>False</IsSet>
				</Flag>
			</Flags>
		</Filter>
		<SubTargets>
			<Target name="File">
				<Assembly>ServiceBus.Logging.Targets.File.dll,ServiceBus.Logging.FileTarget</Assembly>
				<Properties>
					<Property name="DirectoryPath">[DSCS:MACRO:LOGGING.FILETARGET.FOLDER]</Property>
					<Property name="MaxFileSize">10240</Property>
				</Properties>
			</Target>
		</SubTargets>
	</Target>
</Targets>
				'
			)
		END
		
	--
	-- Ensure that CS.Targets fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created new ServiceBus.Logging section fragments for ServiceBus Configuration Service'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)


SET @TrackingID = '{F4118D11-59BE-4560-900A-0D0B2F59FE76}'
SET @ReferenceID = '32829'
SET @Author = 'Todd Muscat'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0


EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- 1. Add macro and macro value
--
SET @Section = 1

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @MacroId uniqueidentifier
	
	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'	
	
	
	BEGIN TRANSACTION
	
	--
	-- Ensure that LOGGING.LOGLEVEL macro is created for the root group
	--	
	SET @MacroId = '{FAEE35A6-5C2A-40CB-A74E-CC6C77F58069}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'LOGGING.LOGLEVEL'
			SET @Description = 'Global minimal log level.'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@MacroId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	--
	-- Ensure that value is assigned to macro SQL.LOGGING.STORE.CONNECTION.STRING for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @MacroId ) )
		BEGIN			
			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@MacroId,
				'Informational'
			)
		END	
	
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Macro for global log level has been created.'
	COMMIT TRANSACTION
END

--
-- 2. For fragmets where log level is set above informational preserve settings by setting macro value for that group
--
SET @Section = 2

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- Create table that will temporarily hold matching fragments
	declare @FragmentsToFix table
	(
		ExistingId int,
		LogLevel varchar(50),
		FragmentId uniqueIdentifier,
		IsProcessed bit
	)
	
	-- Populate temporary table with fragments that contain New key node
	INSERT INTO @FragmentsToFix
	SELECT		ReplicationId,
				Convert(varchar, Contents.query('/Properties/Property[@name="Level"]/text()')),
				Id,
				0 -- At the beginning, fragments are not processed				
	FROM		Active_Fragments
	WHERE		Convert(varchar, Contents.query('/Properties/Property[@name="Level"]/text()')) in ('Debug', 'Informational', 'Warning', 'Critical' )
				and SectionId = '398F8990-F814-4E83-9EBC-B6AD9E1E8BB4'
				
	-- create table for groups taht need macro value
	declare @GroupsToFix table
	(
		Id uniqueIdentifier,
		IsProcessed bit,
		LogLevel varchar(50)
	)				
	
	-- populate temp table with groups that have lgo level set above informational
	insert into @GroupsToFix
	select g.id, 0, ff.LogLevel
	from @FragmentsToFix  	ff 
	join Active_GroupFragments mv (nolock) on mv.FragmentId = ff.FragmentId
	join Active_Groups g  (nolock)	on g.Id = mv.GroupId 	
	where ff.LogLevel not in ('Debug', 'Informational')				
	
	DECLARE @HasMore bit
	DECLARE @GroupId uniqueidentifier
	DECLARE @Level varchar(50)
	DECLARE @Position int	
	
	SET		@HasMore = 1
	WHILE	( @HasMore = 1 )
		BEGIN
			-- Select next unprocessed group
			SELECT	@GroupId = id, @Level = LogLevel
			FROM	@GroupsToFix
			WHERE	IsProcessed = 0
			
			IF @GroupId IS NULL
				SET @HasMore = 0
			ELSE
				BEGIN
					-- Create New Macro Value only for fragments that have level above informational.					
					if not exists (select * from Active_GroupMacroValues where MacroId = @MacroId and GroupId = @GroupId )
						insert into Active_GroupMacroValues ( RootGroupId, GroupId, MacroId, Value )
						values (@ROOT_GROUP_ID, @GroupId, @MacroId, @Level)
					else
						update Active_GroupMacroValues
						set Value = @Level
						where MacroId = @MacroId and GroupId = @GroupId	
						
						-- Update contents and mark fragment as processed
					UPDATE	@GroupsToFix
					SET		IsProcessed = 1
					WHERE	Id = @GroupId
				END
			
			-- Reset Id
			SET	@GroupId = NULL
		END
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Macro values added for groups with log level above informtional'
	COMMIT TRANSACTION
END

--
-- 3. Update existing fragments to use macros
--
SET @Section = 3

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	update	Active_Fragments
	set		Contents.modify( 'replace value of (/Properties/Property[@name="Level"]/text())[1] 
			with "[DSCS:MACRO:LOGGING.LOGLEVEL]"')
	WHERE		Convert(varchar, Contents.query('/Properties/Property[@name="Level"]/text()')) in ('Debug', 'Informational', 'Warning', 'Critical' )
				and SectionId = '398F8990-F814-4E83-9EBC-B6AD9E1E8BB4'
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Fragments updated with new macro'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{0600CFD4-76F2-4e7a-82F7-2971DAEA0309}' -- 18280 (Configuration service - Reduce number of entries in configuration file)
SET @TrackingID = '{D676C52F-3C09-44A2-BCC9-83F0182ECE07}'
SET @ReferenceID = '30103'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1 -- Created unityConfiguration section

--
-- 1.a. Create new type mapping fragment for ServiceBus.Logging.ILoggingPersistenceProvider type
-- 1.b. Associate new type mapping fragment with all applications depending on it
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'
	
	--
	-- Declare and initialize section ID constants
	--
	DECLARE @UNITY_CONFIGURATION uniqueidentifier
	SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4f38-B4ED-5C917010C756}'

	BEGIN TRANSACTION

	--
	-- Create new type mapping fragment for ServiceBus.Logging.ILoggingPersistenceProvider type
	--
	DECLARE @FragmentId uniqueidentifier
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	
	SET		@FragmentId = '{32FF66B2-EC37-40AC-AFAE-9F033AA6B570}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET	@Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILoggingPersistenceProvider'
			SET @Description = 'Type mapping used for resolution of ServiceBus.Logging.ILoggingPersistenceProvider instance'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@UNITY_CONFIGURATION,
				'containers/container/types',
				'
<type type="ServiceBus.Logging.ILoggingPersistenceProvider, ServiceBus.Logging.Interfaces"
	  mapTo="ServiceBus.Logging.PersistenceProviders.LogEntry.PersistenceProvider, ServiceBus.Logging.PersistenceProviders.LogEntry">
	<lifetime type="singleton" />
</type>
				'
			)
		END

	--
	-- Associate new type mapping fragment with all applications that are currently using ServiceBus.ServiceHost.IPersistenceProviderManager type mapping
	--
	DECLARE @ManagerFragmentid uniqueidentifier
	SET		@ManagerFragmentid = '57F2D383-EF54-4B2F-A9A8-290FA7722793'

	INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
	SELECT	gf1.RootGroupId, gf1.GroupId, @FragmentId
	FROM	Active_GroupFragments gf1
			LEFT JOIN
			Active_GroupFragments gf2
				ON	gf1.RootGroupId = gf2.RootGroupId
					AND
					gf1.GroupId = gf2.GroupId
					AND
					gf2.FragmentId = @FragmentId
	WHERE	gf1.FragmentId = @ManagerFragmentId
			AND
			gf2.FragmentId IS NULL
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Created ServiceBus.Logging.ILoggingPersistenceProvider type mapping fragment and associated the fragment with relevant applications'
	COMMIT TRANSACTION
END

SET @Section = 2

IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

	BEGIN TRANSACTION

	UPDATE	Active_Fragments
	SET		Contents.modify( 
			'insert
				<Resource name="ServiceBus.Logging.PersistenceProviders.LogEntry.dll" />
			 into
			 ( ServicePool/Implementation )[ 1 ]
			' )
	WHERE	SectionId = @SERVICEHOST
			AND
			RootXmlNode = 'ServicePools'
			AND
			Contents.exist( 'ServicePool' ) = 1
			AND
			Contents.exist( 'ServicePool/Implementation/Resource[@name="ServiceBus.Logging.PersistenceProviders.LogEntry.dll"]' ) = 0

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Created ServiceBus.Logging.ILoggingPersistenceProvider type mapping fragment and associated the fragment with relevant applications'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634 (Reorganize initial config)
SET @TrackingID = '{0E519398-F52B-4C4C-A4E9-D06401717FE2}'
SET @ReferenceID = '30104'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7 -- Created fragments and linked them to appropriate section(s)

--
-- 1. Replace Logging Target Severity with Level element
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'
	
	--
	-- Declare and initialize section ID constants
	--

	DECLARE @METERING uniqueidentifier
	SET		@METERING = '{DE385948-E7CA-495b-B325-4BACC2C09C2D}'

	BEGIN TRANSACTION

	DECLARE @ReplicationID int	
	DECLARE @Severity varchar( 256 )
	
	-- Search for Severity element in factory data of Logging metering target	
	SELECT	@ReplicationID = f.ReplicationId,
			@Severity = f.Contents.value( '( Targets/Target[@name="Logging"]/TargetFactoryData[@name="LoggingFactory"]/Severity )[ 1 ]', 'varchar( 256 )' )
	FROM	Active_Fragments f
	WHERE	f.RootGroupId = @ROOT_GROUP_ID
			AND
			f.SectionId = @METERING
			AND
			f.RootXmlNode IS NULL
			AND
			f.Contents.exist( 'Targets/Target[@name="Logging"]' ) = 1
	
	-- If Severity element is found in factory data of Logging metering target, replace it with appropriate Level element
	IF ( @Severity IS NOT NULL )
	BEGIN
		UPDATE	Active_Fragments
		SET		Contents.modify
		(
			'delete ( Targets/Target[@name="Logging"]/TargetFactoryData[@name="LoggingFactory"]/Severity )[ 1 ]' 
		)
		WHERE	ReplicationId = @ReplicationID
		
		-- Translate Error -> Critical, Information -> Informational, Verbose -> Debug
		-- Leave all other values as they are 
		-- (Critical and Warning are valid ones - 
		-- if those values appear, they will be accepted when parsed at application level;
		-- however, if some other value is encountered, Debug value will be used at application level)
		DECLARE @Level varchar( 256 )
		IF ( @Severity = 'Error' )
			SET	@Level = 'Critical'
		ELSE IF ( @Severity = 'Information' )
			SET	@Level = 'Informational'
		ELSE IF ( @Severity = 'Verbose' )
			SET	@Level = 'Debug'
		ELSE
			SET	@Level = @Severity	
		
		EXEC
		(
			'UPDATE	Active_Fragments
			SET		Contents.modify
			(
				''insert
					<Level>' + @Level + '</Level>
				as first
				into ( Targets/Target[@name="Logging"]/TargetFactoryData[@name="LoggingFactory"] )[ 1 ]''
			)
			WHERE	ReplicationId = ' + @ReplicationID
		)
	END

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Replaced Logging Target Severity with Level element'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634 (Reorganize initial config)
SET @TrackingID = '{2ACFE9C8-1F7E-4DB3-8119-F116179954D1}'
SET @ReferenceID = '34482'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7 -- Created fragments and linked them to appropriate section(s)

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'
	
	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'
	
	--
	-- Declare and initialize section ID constant
	--
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	--
	-- Declare and initialize macro ID constants
	--
	DECLARE @SP_SYSTEM_WCFSERVICEENDPOINT_PORT uniqueidentifier
	SET		@SP_SYSTEM_WCFSERVICEENDPOINT_PORT = '{C3A721CC-BD1B-491D-9F2D-F60C92F99919}'

	BEGIN TRANSACTION

	--
	-- Ensure that SP.SYSTEM.WCFSERVICEENDPOINT.PORT macro is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @SP_SYSTEM_WCFSERVICEENDPOINT_PORT AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SP.SYSTEM.WCFSERVICEENDPOINT.PORT'
			SET @Description = 'WCF service endpoint port of System service pool'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@SP_SYSTEM_WCFSERVICEENDPOINT_PORT,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	
	--
	-- Ensure that value is assigned to macro SP.SYSTEM.WCFSERVICEENDPOINT.PORT for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @SP_SYSTEM_WCFSERVICEENDPOINT_PORT ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@SP_SYSTEM_WCFSERVICEENDPOINT_PORT,
			'47999'
		)
	
	DECLARE @FragmentId uniqueidentifier
	
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServiceEndpoints.Wcf.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{2C1CA5E4-1063-45B7-8CDF-62C80FAA0BD6}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.ServiceEndpoints.Wcf.dll'
			SET @Description = 'ServiceBus.ServiceHost.ServiceEndpoints.Wcf.dll resource'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceEndpoints"',
				'
<Resource name="ServiceBus.ServiceHost.ServiceEndpoints.Wcf.dll" id="f54bd595-2c9d-4887-a9b0-61af97e8d809">
	<FileName>ServiceBus.ServiceHost.ServiceEndpoints.Wcf.dll</FileName>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Wcf.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
	</Dependencies>
</Resource>
				'
			)
		END
	
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServiceEndpoints.Wcf.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	--
	-- Ensure that ServicePool.System.ServiceEndpoints fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{F6F97DDD-4E61-4783-8434-0A15ED9ACF3C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServicePool.System.ServiceEndpoints'
			SET @Description = 'Service endpoints of System service pool'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ServicePools/ServicePool name="System"',
				'
<ServiceEndpoints>
	<ServiceEndpoint name="WcfServiceEndpoint">
		<ServiceEndpointFactoryData name="Wcf">
			<ServiceModel>
				<services>
					<service name="ServiceBus.ServiceHost.ServiceEndpoints.Wcf.ServiceInvoker"
							 behaviorConfiguration="ServiceEndpointBehavior">
						<endpoint address=""
								  binding="basicHttpBinding"
								  contract="ServiceBus.ServiceHost.ServiceEndpoints.Wcf.IServiceInvoker" />
						<endpoint address="mex"
								  binding="mexHttpBinding"
								  contract="IMetadataExchange" />
						<host>
							<baseAddresses>
								<add baseAddress="http://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SP.SYSTEM.WCFSERVICEENDPOINT.PORT]/WcfServiceEndpoint" />
							</baseAddresses>
						</host>
					</service>
				</services>
				<behaviors>
					<serviceBehaviors>
						<behavior name="ServiceEndpointBehavior">
							<serviceMetadata httpGetEnabled="true" />
						</behavior>
					</serviceBehaviors>
				</behaviors>
				<bindings>
					<basicHttpBinding>
						<binding name="CustomHttpBinding"
								 openTimeout="00:00:10" sendTimeout="00:01:00" receiveTimeout="Infinite"
								 maxBufferPoolSize="524288" maxBufferSize="10485760" maxReceivedMessageSize="10485760">
							<readerQuotas maxDepth="64" maxStringContentLength="131072" maxArrayLength="104857600"
										  maxBytesPerRead="16384" maxNameTableCharCount="32768" />
						</binding>
					</basicHttpBinding>
				</bindings>
			</ServiceModel>
		</ServiceEndpointFactoryData>
	</ServiceEndpoint>
</ServiceEndpoints>
				'
			)
		END
	
	--
	-- Ensure that ServicePool.System.ServiceEndpoints fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Modify Factories fragment to include ServiceEndpointFactories element
	--
	SET	@FragmentId = '21344742-5675-4E34-B97A-89F0183A8816'
	UPDATE	Active_Fragments
	SET		Contents.modify
	(
		'
		insert
			<ServiceEndpointFactories>
				<ServiceEndpointFactory name="Wcf">
					<Implementation>
						<Resource name="ServiceBus.ServiceHost.ServiceEndpoints.Wcf.dll" />
						<Type>ServiceBus.ServiceHost.ServiceEndpoints.Wcf.WcfServiceEndpointFactory</Type>
					</Implementation>
				</ServiceEndpointFactory>
			</ServiceEndpointFactories>
		as first
		into ( Factories )[ 1 ]
		'
	)
	WHERE	Id = @FragmentId
			AND
			SectionId = @SERVICEHOST

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted configuration for generic ServiceBus WCF endpoint'
	COMMIT TRANSACTION
END



GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{8ACA84DF-839B-49ED-A122-723B9A272EE1}'
SET @ReferenceID = '17446'
SET @Author = 'Enes Pelko'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE	@LOGGING uniqueidentifier
SET		@LOGGING = '{398F8990-F814-4e83-9EBC-B6AD9E1E8BB4}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

-- Macros
DECLARE	@SP_SYSTEM_LOCAL uniqueidentifier
SET		@SP_SYSTEM_LOCAL = '{F1CB781D-6056-4599-9C6C-D802A84D96BA}'

DECLARE @LOGGING_FILENAME_LISTENER uniqueidentifier
SET		@LOGGING_FILENAME_LISTENER = '{A9B6C965-F5BB-4132-9B33-D250EF19A702}'

DECLARE @FragmentId uniqueidentifier

-- 1. Add resource ServiceBus.Utility.Helpers.dll
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	--
	-- Ensure that Resource.ServiceBus.Utility.Helpers.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{4FBA64A4-4FB1-4FE9-9EC9-E6FA45FF0AC5}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.Utility.Helpers.dll'
			SET @Description = 'ServiceBus.Utility.Helpers.dll resource'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="Utility"',
				'<Resource name="ServiceBus.Utility.Helpers.dll" id="4930a3c3-398a-4560-8185-b705d68fa4A6">
					<FileName>ServiceBus.Utility.Helpers.dll</FileName>
					<Dependencies />
				</Resource>'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.Utility.Helpers.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.Utility.Helpers.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Resource.ServiceBus.Utility.Helpers.dll fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new resource: Resource.ServiceBus.Utility.Helpers.dll'
	COMMIT TRANSACTION
END

-- 2. Add resource ServiceBus.ServiceHost.WWF.Common.dll
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WWF.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{9A546F5F-28B0-4C18-961C-372B5599E3B9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.WWF.Common.dll'
			SET @Description = 'ServiceBus.ServiceHost.WWF.Common.dll resource'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'<Resource name="ServiceBus.ServiceHost.WWF.Common.dll" id="0164fd8b-a35c-4431-a079-4658c4ad7252">
					<FileName>ServiceBus.ServiceHost.WWF.Common.dll</FileName>
					<Dependencies>
						<Resource name="ServiceBus.Logging.Interfaces.dll" />
						<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
						<Resource name="ServiceBus.ServiceHost.WWF.Interfaces.dll" />
						<Resource name="ServiceBus.Utility.Assembly.dll" />
						<Resource name="ServiceBus.Utility.Cache.dll" />
						<Resource name="ServiceBus.Utility.Helpers.dll" />
						<Resource name="ServiceBus.Utility.Unity.dll" />
						<Resource name="ServiceBus.Utility.Database.dll" />
					</Dependencies>
				</Resource>'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WWF.Common.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WWF.Common.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WWF.Common.dll fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new resource: Resource.ServiceBus.ServiceHost.WWF.Common.dll'
	COMMIT TRANSACTION
END

-- 3. Add resource ServiceBus.ServiceHost.WWF.Interfaces.dll
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WWF.Interfaces.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{4632A245-09EF-4766-8B7A-BD841B43B271}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.WWF.Interfaces.dll'
			SET @Description = 'ServiceBus.ServiceHost.WWF.Interfaces.dll resource'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'<Resource name="ServiceBus.ServiceHost.WWF.Interfaces.dll" id="af38a654-20a1-4ec5-a717-26eb0e262093">
					<FileName>ServiceBus.ServiceHost.WWF.Interfaces.dll</FileName>
					<Dependencies>
						<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
					</Dependencies>
				</Resource>'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WWF.Interfaces.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WWF.Interfaces.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WWF.Interfaces.dll fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new resource: Resource.ServiceBus.ServiceHost.WWF.Interfaces.dll'
	COMMIT TRANSACTION
END

--
-- 4. Add WWF ServiceFactory to Factories configuration
--
SET @Section = 4
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	update Active_Fragments
	set Contents.modify
	(
		'insert 		
			<ServiceFactory name="WWF">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.WWF.Common.dll" />
					<Type>ServiceBus.ServiceHost.WWF.ServiceFactory</Type>
				</Implementation>
			</ServiceFactory>
		
		 into
		 (/Factories/ServiceFactories)[1]'
	) 
	where
	Id = '{21344742-5675-4e34-B97A-89F0183A8816}' AND
	Contents.exist( '/Factories/ServiceFactories/ServiceFactory[@name="WWF"]' ) = 0

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added WWF ServiceFactory to Factories configuration'
	COMMIT TRANSACTION
END


GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{0800B3C6-1EB8-4782-8722-E5262BAD3272}'
SET @ReferenceID = '34520'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	UPDATE Active_Fragments
	SET Contents.modify
	(
		'insert 
		<Observer name="WwfActivityCatalog">
			<Implementation>
				<FileName>.\Modules\ServiceBus.Administration.Modules.WwfActivityCatalog.dll</FileName>
				<Type>ServiceBus.Administration.Modules.WwfActivityResourceObserver</Type>
			</Implementation>
		</Observer>
		into (/Controls/Control[@name="ResourceCatalog"]/ControlData)[1]'
	) 
	WHERE
	Id='98EB1790-63FF-4121-A290-5286F5A722BD' AND
	Contents.exist( '/Controls/Control[@name="ResourceCatalog"]/ControlData/Observer[@name="WwfActivityCatalog"]' ) = 0
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added WWF Activity Observer.'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID1 uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID1 = '{26496CF7-33E3-4d61-A7F5-F077FF1AC80A}'	-- PreviousReferenceID: 23156
SET @TrackingID = '{97C59174-96F3-4625-B100-01ADEDEF2AEA}'
SET @ReferenceID = '35298'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection1 int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection1 = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

--
-- Declare and initialize section ID constants
--
DECLARE @CONFIGURATION_PLUGINS uniqueidentifier
SET		@CONFIGURATION_PLUGINS = '{23D28783-F431-4dc9-83E5-14390D15686B}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID1, @PreviousSection1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	DECLARE @FragmentId uniqueidentifier
	
	-----
	--
	-- Ensure that Configuration.Plugins.Shares fragment is created for CONFIGURATION_PLUGINS section
	--
	SET	@FragmentId = '{7B979CE6-9E52-44ac-91A8-8376CDAF7322}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Configuration.Plugins.Shares'
			SET @Description = 'The shares used by configuration plugins'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				[Description],
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@CONFIGURATION_PLUGINS,
				NULL,
				'<Shares />'	-- ResourceCatalog.Repository share will be moved to this fragment
			)
		END
		
	--
	-- 1. Select the ResourceCatalog.Repository share from Shares fragment of SERVICEHOST section
	--    (this will select all shares named 'ResourceCatalog.Repository')
	--
	DECLARE @Contents xml
	SELECT	@Contents = Contents.query( './Shares/Share[@name="ResourceCatalog.Repository"]' )
	FROM	Active_Fragments
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			Id = '53B43449-923D-4C5A-AD19-46AFC8DDC7CF'	-- ID of Shares fragment of SERVICEHOST section
			AND
			( RootXmlNode IS NULL OR LTRIM( RTRIM( RootXmlNode ) ) = '' )
	
	--
	-- 2. Insert the share into Configuration.Plugins.Shares fragment
	--
	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert
									sql:variable( "@Contents" )
							  as first
							  into ( ./Shares )[ 1 ]')
	WHERE	Id = @FragmentId
	
	--
	-- Ensure that Configuration.Plugins.Shares fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Configuration.Plugins.Shares fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
	
	--
	-- Ensure that Configuration.Plugins.Shares fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that Configuration.Plugins.Shares fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted ServiceBus.Configuration section and removed resource related services'
	COMMIT TRANSACTION
END

GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID1 uniqueidentifier
DECLARE @PreviousTrackingID2 uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID1 = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634 (Reorganize initial config)
SET @PreviousTrackingID2 = '{AE95B23B-443C-4e84-861C-BC6EB8857154}' -- 18338 (Included Observer data for existing resources)
SET @TrackingID = '{AD5690E5-7248-4696-ADF2-4063482434CD}'
SET @ReferenceID = '34726'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection1 int
DECLARE @PreviousSection2 int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection1 = 7	-- Created fragments and linked them to appropriate section(s)
SET @PreviousSection2 = 2	-- Inserted Step data

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize section ID constants
--
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- I. Replace ObjectBuilder2 with Unity resource dependency
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID1, @PreviousSection1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	--
	-- 1. Add dependency to Microsoft.Practices.Unity.dll resource if the dependency does not already exist
	--
	UPDATE	Active_Fragments
	SET		Contents.modify
	(
		'insert
			<Resource name="Microsoft.Practices.Unity.dll" />
		as first
		into ( .//Dependencies )[ 1 ]'
	)
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			RootXmlNode LIKE 'ResourceCatalog%'
			AND
			Contents.exist( './/Dependencies/Resource[@name="Microsoft.Practices.ObjectBuilder2.dll"]' ) = 1
			AND
			Contents.exist( './/Dependencies/Resource[@name="Microsoft.Practices.Unity.dll"]' ) = 0
			AND
			Contents.exist( 'Resource[@name="Microsoft.Practices.Unity.dll"]' ) = 0
	
	--
	-- 2. Remove dependencies to Microsoft.Practices.ObjectBuilder2.dll resource
	--
	UPDATE	Active_Fragments
	SET		Contents.modify
	(
		'delete ( .//Dependencies/Resource[@name="Microsoft.Practices.ObjectBuilder2.dll"] )[ 1 ]'
	)
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			RootXmlNode LIKE 'ResourceCatalog%'
			AND
			Contents.exist( './/Dependencies/Resource[@name="Microsoft.Practices.ObjectBuilder2.dll"]' ) = 1
	
	--
	-- 3. Delete associations to Microsoft.Practices.ObjectBuilder2.dll resource fragment
	--
	DELETE	Active_GroupFragments
	FROM	Active_GroupFragments gf
			JOIN
			Active_Fragments f
				ON	gf.RootGroupId = f.RootGroupId
					AND
					gf.FragmentId = f.Id
	WHERE	f.RootGroupId = @ROOT_GROUP_ID
			AND
			f.SectionId = @SERVICEHOST
			AND
			f.RootXmlNode LIKE 'ResourceCatalog%'
			AND
			f.Contents.exist( 'Resource[@name="Microsoft.Practices.ObjectBuilder2.dll"]' ) = 1
	
	--
	-- 4. Delete Microsoft.Practices.ObjectBuilder2.dll resource fragment
	--
	DELETE	Active_Fragments
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			RootXmlNode LIKE 'ResourceCatalog%'
			AND
			Contents.exist( 'Resource[@name="Microsoft.Practices.ObjectBuilder2.dll"]' ) = 1
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Replaced ObjectBuilder2 with Unity resource dependency'
	COMMIT TRANSACTION
END

--
-- II. Delete step resource observer entry for ObjectBuilder2 resource
--
SET @Section = 2

IF 	DataFix.SectionState( @PreviousTrackingID2, @PreviousSection2 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	--
	-- 5. Delete associations to step resource observer entry
	--
	DELETE	Active_GroupFragments
	FROM	Active_GroupFragments gf
			JOIN
			Active_Fragments f
				ON	gf.RootGroupId = f.RootGroupId
					AND
					gf.FragmentId = f.Id
	WHERE	f.RootGroupId = @ROOT_GROUP_ID
			AND
			f.SectionId = @ADMINISTRATION_CONFIGURATION
			AND
			f.RootXmlNode LIKE 'ObserverData/StepResourceObserver%'
			AND
			f.Contents.exist( 'Resource[@id="Microsoft.Practices.ObjectBuilder2.dll"]' ) = 1

	--
	-- 6. Delete step resource observer entry
	--
	DELETE	Active_Fragments
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @ADMINISTRATION_CONFIGURATION
			AND
			RootXmlNode LIKE 'ObserverData/StepResourceObserver%'
			AND
			Contents.exist( 'Resource[@id="Microsoft.Practices.ObjectBuilder2.dll"]' ) = 1
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Deleted step resource observer entry for ObjectBuilder2 resource'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{9171F787-08EF-4844-B7F0-DB3E448B99FD}'
SET @ReferenceID = '35139'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE @FragmentId uniqueidentifier

-- SBACSecurity.ConfigurationExplorer
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{911C55C9-8836-4C8A-938A-1EEFD4343745}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.WWFActivityCatalog'
			SET @Description = 'Security preferences for WWF Activity Catalog module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="WWF Activity Catalog">
  <Full>
    <Identity name="Everyone"/>
  </Full>
  <ReadOnly/>
  <Deny/>
</Module>'
			)
		END
	--
	-- Ensure that SBACSecurity.WWFActivityCatalog fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.WWFActivityCatalog'
	COMMIT TRANSACTION
END

-- SBACSecurity.ChangesetAdministration
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{32E92D4B-30F5-4FC6-93D1-8E2D6BD03C62}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus.System.Fragments'
			SET @Description = 'ServiceBus System Fragments that should be excluded from export'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				null,
				'<SystemFragments>
  <Resources>
    <Resource name="Castle.Core.dll" />
    <Resource name="Castle.DynamicProxy2.dll" />
    <Resource name="Iesi.Collections.dll" />
    <Resource name="Interop.MSMQ.dll" />
    <Resource name="log4net.dll" />
    <Resource name="Microsoft.Ccr.Core.dll" />
    <Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" />
    <Resource name="Microsoft.Practices.EnterpriseLibrary.Logging.dll" />
    <Resource name="Microsoft.Practices.ObjectBuilder2.dll" />
    <Resource name="Microsoft.Practices.Unity.Configuration.dll" />
    <Resource name="Microsoft.Practices.Unity.dll" />
    <Resource name="NHibernate.dll" />
    <Resource name="ServiceBus.Configuration.Client.dll" />
    <Resource name="ServiceBus.Configuration.Common.dll" />
    <Resource name="ServiceBus.Logging.Common.dll" />
    <Resource name="ServiceBus.Logging.config" />
    <Resource name="ServiceBus.Logging.Interfaces.dll" />
    <Resource name="ServiceBus.Logging.LoggingManagement.dll" />
    <Resource name="ServiceBus.Logging.LogStep.dll" />
    <Resource name="ServiceBus.Logging.PersistenceProviders.LogEntry.dll" />
    <Resource name="ServiceBus.Logging.Targets.BlackHole.dll" />
    <Resource name="ServiceBus.Logging.Targets.Database.dll" />
    <Resource name="ServiceBus.Logging.Targets.File.dll" />
    <Resource name="ServiceBus.Logging.Targets.MSMQ.dll" />
    <Resource name="ServiceBus.Metering.Common.dll" />
    <Resource name="ServiceBus.Metering.config" />
    <Resource name="ServiceBus.Metering.Interfaces.dll" />
    <Resource name="ServiceBus.Metering.MeteringPointManagement.dll" />
    <Resource name="ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll" />
    <Resource name="ServiceBus.Metering.Targets.Logging.dll" />
    <Resource name="ServiceBus.Metering.Targets.ServiceHost.dll" />
    <Resource name="ServiceBus.PubSub.Common.dll" />
    <Resource name="ServiceBus.PubSub.config" />
    <Resource name="ServiceBus.PubSub.Interfaces.dll" />
    <Resource name="ServiceBus.ServiceHost.BSE.Common.dll" />
    <Resource name="ServiceBus.ServiceHost.BSE.Interfaces.dll" />
    <Resource name="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll" />
    <Resource name="ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll" />
    <Resource name="ServiceBus.ServiceHost.Common.dll" />
    <Resource name="ServiceBus.ServiceHost.config" />
    <Resource name="ServiceBus.ServiceHost.Contexts.BusinessContext.dll" />
    <Resource name="ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll" />
    <Resource name="ServiceBus.ServiceHost.Contexts.LoggingContext.dll" />
    <Resource name="ServiceBus.ServiceHost.Contexts.MeteringContext.dll" />
    <Resource name="ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll" />
    <Resource name="ServiceBus.ServiceHost.DSE.Common.dll" />
    <Resource name="ServiceBus.ServiceHost.DSE.Interfaces.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.BooleanExpression.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.BytesToString.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.RegexMatch.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.StringToBinary.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.XmlDocToString.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.XmlNodeName.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll" />
    <Resource name="ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll" />
    <Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
    <Resource name="ServiceBus.ServiceHost.PersistenceProviders.Request.dll" />
    <Resource name="ServiceBus.ServiceHost.RequestChannels.Remoting.dll" />
    <Resource name="ServiceBus.ServiceHost.RequestChannels.Wcf.dll" />
    <Resource name="ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll" />
    <Resource name="ServiceBus.ServiceHost.RequestClassifiers.Random.dll" />
    <Resource name="ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll" />
    <Resource name="ServiceBus.ServiceHost.RequestManagement.dll" />
    <Resource name="ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll" />
    <Resource name="ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll" />
    <Resource name="ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll" />
    <Resource name="ServiceBus.ServiceHost.ResourceManagement.dll" />
    <Resource name="ServiceBus.ServiceHost.ServiceEndpoints.Wcf.dll" />
    <Resource name="ServiceBus.ServiceHost.ServicePoolLoader.exe" />
    <Resource name="ServiceBus.ServiceHost.ServicePoolLoader.exe.config" />
    <Resource name="ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll" />
    <Resource name="ServiceBus.ServiceHost.Watchdogs.Watchdog.dll" />
    <Resource name="ServiceBus.ServiceHost.WWF.Common.dll" />
    <Resource name="ServiceBus.ServiceHost.WWF.Interfaces.dll" />
    <Resource name="ServiceBus.Utility.Assembly.dll" />
    <Resource name="ServiceBus.Utility.Cache.dll" />
    <Resource name="ServiceBus.Utility.Configuration.dll" />
    <Resource name="ServiceBus.Utility.Database.dll" />
    <Resource name="ServiceBus.Utility.Helpers.dll" />
    <Resource name="ServiceBus.Utility.Logging.dll" />
    <Resource name="ServiceBus.Utility.Security.dll" />
    <Resource name="ServiceBus.Utility.Sharing.dll" />
    <Resource name="ServiceBus.Utility.Timer.dll" />
    <Resource name="ServiceBus.Utility.Unity.dll" />
    <Resource name="ServiceBus.Utility.Wcf.dll" />
    <Resource name="unityConfiguration.config" />
  </Resources>
</SystemFragments>'
			)
		END
	--
	-- Ensure that ServiceBus.System.Fragments fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: ServiceBus.System.Fragments'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{51567CDE-9DCA-427D-8BAC-BC826CD8D4B3}'
SET @ReferenceID = '33125'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
DECLARE @PreviousSection int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE @AttributeId uniqueidentifier

-- SBACSecurity.ExportConfiguration
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@AttributeId = '{D300464A-F94B-44EE-AE84-5B5774EE47B8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Attributes WHERE Id = @AttributeId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServicePool.Name'
			SET @Description = 'Service pool name filter attribute'
 
			INSERT INTO Active_Attributes
			(
				Id,
				RootGroupId,
				Name,
				Description
			)
			VALUES
			(
				@AttributeId,
				@ROOT_GROUP_ID,
				@Name,
				@Description
			)
		END	
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added ServicePool.Name filter attribute'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{655E0BA0-21D2-4A78-A4DE-30483C24056B}'
SET @ReferenceID = '35626'
SET @Author = 'Anel Hidic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

-- 
DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)
DECLARE @FragmentId uniqueidentifier

-- Declare and initialize ID constants
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}' -- ServiceBus

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}' -- ServiceBus Administrative Console

DECLARE @SERVICE_HOST uniqueidentifier
SET		@SERVICE_HOST = '{4FF5DBB5-A888-4C76-B222-8EE53950E511}' -- ServiceBus ServiceHost Service

DECLARE @RUN_TESTCASE uniqueidentifier
SET		@RUN_TESTCASE = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}' -- ServiceBus RunTestCase

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- CREATE FRAGMENT FOR Resource.Microsoft.Practices.ServiceLocation.dll RESOURCE
	SET	@FragmentId = '{4182C947-E8B2-4208-95E0-0BDD00250DB6}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.Microsoft.Practices.ServiceLocation.dll'
			SET @Description = 'Resource.Microsoft.Practices.ServiceLocation.dll'
	  
			INSERT INTO Active_Fragments 
			( 
				Id, 
				RootGroupId, 
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents 
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'{12BB99C3-3045-498D-BD54-D2690935D845}', -- ServiceBus.ServiceHost section
				'ResourceCatalog/ResourceGroup name="Microsoft"',
				'<Resource name="Microsoft.Practices.ServiceLocation.dll" id="b47ed0cf-e62e-47a8-b3bc-ca8eba53e223">
				 <FileName>Microsoft.Practices.ServiceLocation.dll</FileName>
				 <Dependencies />
				 </Resource>'
			)
		END
	
	-- ADD FRAGMENT TO THE SERVICE HOST APPLICATION
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE GroupId = @SERVICE_HOST AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
			VALUES ( @ROOT_GROUP_ID, @SERVICE_HOST, @FragmentId );
		END
	
	-- ADD FRAGMENT TO THE ADMINISTRATIVE CONSOLE APPLICATION	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
			VALUES ( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId );
		END
		
	-- ADD FRAGMENT TO THE RUN TEST CASE APPLICATION
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE GroupId = @RUN_TESTCASE AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments( RootGroupId, GroupId, FragmentId )
			VALUES ( @ROOT_GROUP_ID, @RUN_TESTCASE, @FragmentId );
		END
	
	
	-- UPDATE FRAGMENT Resource.ServiceBus.Metering.Common.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{06AA48E9-B4E9-4228-95CE-8D725D1B81E0}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
	
	
	-- UPDATE FRAGMENT Resource.ServiceBus.PubSub.Common.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Wcf.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{0C265D21-4CDC-4195-8380-2F749FDBD3C9}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Wcf.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Unity.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{0C265D21-4CDC-4195-8380-2F749FDBD3C9}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Unity.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Unity.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{10E0D20B-4D70-447C-B38D-D4581F54DC4D}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Unity.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{10E0D20B-4D70-447C-B38D-D4581F54DC4D}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
	
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Unity.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{17BA1A7B-2413-434B-A690-38216B3E0A39}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Unity.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{17BA1A7B-2413-434B-A690-38216B3E0A39}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.Watchdogs.Watchdog.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Unity.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{200C9030-377D-48D4-9CDF-30B53DED00E5}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Unity.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{200C9030-377D-48D4-9CDF-30B53DED00E5}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.DSE.Common.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{221A4740-90FF-44A6-BE87-AB4EF08403FC}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.Metering.Targets.ServiceHost.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{33F0D1F8-104C-4EB4-966A-C6ED003373CC}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.Common.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{3C97C2AF-8143-4DB5-833A-4505732D729B}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Configuration.Common.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{3C97C2AF-8143-4DB5-833A-4505732D729B}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Configuration.Common.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Configuration.Client.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{3C97C2AF-8143-4DB5-833A-4505732D729B}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Configuration.Client.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.RequestChannels.Remoting.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{3FD5C274-8F83-4DC7-92DF-3D2EA7073B06}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.RequestChannels.Wcf.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{4283AAD5-2E47-4E46-ACB2-25C4C6206CC9}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Wcf.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{4283AAD5-2E47-4E46-ACB2-25C4C6206CC9}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Wcf.dll"]') = 0
	
	-- UPDATE FRAGMENT Resource.Microsoft.Practices.Unity.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="Microsoft.Practices.ServiceLocation.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{512B71E4-CD36-4A65-B930-44C7C689D35C}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="Microsoft.Practices.ServiceLocation.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{63B2057D-F7C6-4E77-8C27-7E5CB3D7F436}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.Metering.Targets.Logging.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{646223D8-4AA9-4D8E-8A09-645E07715FD8}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Unity.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{646223D8-4AA9-4D8E-8A09-645E07715FD8}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Unity.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.Utility.Unity.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Configuration.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{9F941A37-683C-45AB-9988-8326B3AE3410}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Configuration.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{AC4426D3-AB0E-4CAB-BB71-6C9E439A4688}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.Utility.Cache.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{B3F1AF33-8EBE-4063-9F9A-F4DFF6C8D598}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Unity.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{B3F1AF33-8EBE-4063-9F9A-F4DFF6C8D598}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Unity.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.Utility.Assembly.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Unity.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{CF0BF3A9-681F-45F3-A7A9-784231A162E3}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Unity.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{CF0BF3A9-681F-45F3-A7A9-784231A162E3}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.ServiceHost.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{CF0BF3A9-681F-45F3-A7A9-784231A162E3}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.ServiceHost.Interfaces.dll"]') = 0	
		
	--UPDATE FRAGMENT Resource.ServiceBus.Logging.Common.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{DC9126EA-831D-493A-B5EF-AD13E324EA36}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="Microsoft.Practices.EnterpriseLibrary.Common.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{F2B55C04-5D60-4B67-9E9E-529D608EC8FF}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.ResourceManagement.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Assembly.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{FBD341EE-D841-4A2D-8E35-BD2B34C4B46F}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Assembly.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Sharing.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{FBD341EE-D841-4A2D-8E35-BD2B34C4B46F}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Sharing.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{FBD341EE-D841-4A2D-8E35-BD2B34C4B46F}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	-- UPDATE FRAGMENT Resource.ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Logging.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{FD23D216-21FE-48EA-9365-21000A790FC1}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Logging.Interfaces.dll"]') = 0
		
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.Utility.Unity.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{FD23D216-21FE-48EA-9365-21000A790FC1}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Unity.dll"]') = 0
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added WWF Activity Observer.'
	COMMIT TRANSACTION
END

GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{99D9B419-B450-4297-B6CD-CBA7816C496C}'
SET @ReferenceID = '36041'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Mark each unique configuration item except latest one as historical
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	-- Mark each unique attribute except latest one as historical
	UPDATE	[dbo].[Active_Attributes]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Attributes] t1
			JOIN
			(
				-- Select latest version from each attribute group
				SELECT	RootGroupId,
						Id,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_Attributes]
				GROUP BY RootGroupId, Id			
			) t2
				-- Exclude latest version of each unique attribute
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.Id = t2.Id
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical attributes from update

	-- Mark each unique filter except latest one as historical
	UPDATE	[dbo].[Active_Filters]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Filters] t1
			JOIN
			(
				-- Select latest version from each filter group
				SELECT	RootGroupId,
						Id,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_Filters]
				GROUP BY RootGroupId, Id
			) t2
				-- Exclude latest version of each unique filter
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.Id = t2.Id
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical filters from update

	-- Mark each unique fragment except latest one as historical
	UPDATE	[dbo].[Active_Fragments]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Fragments] t1
			JOIN
			(
				-- Select latest version from each fragment group
				SELECT	RootGroupId,
						Id,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_Fragments]
				GROUP BY RootGroupId, Id
			) t2
				-- Exclude latest version of each unique fragment
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.Id = t2.Id
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical fragments from update

	-- Mark each unique group except latest one as historical
	UPDATE	[dbo].[Active_Groups]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Groups] t1
			JOIN
			(
				-- Select latest version from each group
				SELECT	RootGroupId,
						Id,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_Groups]
				GROUP BY RootGroupId, Id
			) t2
				-- Exclude latest version of each unique group
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.Id = t2.Id
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical groups from update

	-- Mark each unique macro except latest one as historical
	UPDATE	[dbo].[Active_Macros]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Macros] t1
			JOIN
			(
				-- Select latest version from each macro group
				SELECT	RootGroupId,
						Id,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_Macros]
				GROUP BY RootGroupId, Id
			) t2
				-- Exclude latest version of each unique macro
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.Id = t2.Id
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical macros from update

	-- Mark each unique section except latest one as historical
	UPDATE	[dbo].[Active_Sections]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_Sections] t1
			JOIN
			(
				-- Select latest version from each section group
				SELECT	RootGroupId,
						Id,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_Sections]
				GROUP BY RootGroupId, Id
			) t2
				-- Exclude latest version of each unique section
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.Id = t2.Id
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical sections from update

	-- Mark each unique filter attribute value except latest one as historical
	UPDATE	[dbo].[Active_FilterAttributeValues]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_FilterAttributeValues] t1
			JOIN
			(
				-- Select latest version from each filter attribute value group
				SELECT	RootGroupId,
						FilterId,
						AttributeId,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_FilterAttributeValues]
				GROUP BY RootGroupId, FilterId, AttributeId
			) t2
				-- Exclude latest version of each unique filter attribute value
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.FilterId = t2.FilterId
					AND
					t1.AttributeId = t2.AttributeId
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical filter attribute values from update

	-- Mark each unique group filter except latest one as historical
	UPDATE	[dbo].[Active_GroupFilters]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_GroupFilters] t1
			JOIN
			(
				-- Select latest version from each group filter group
				SELECT	RootGroupId,
						GroupId,
						FilterId,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_GroupFilters]
				GROUP BY RootGroupId, GroupId, FilterId
			) t2
				-- Exclude latest version of each unique group filter
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.GroupId = t2.GroupId
					AND
					t1.FilterId = t2.FilterId
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical group filters from update

	-- Mark each unique group fragment except latest one as historical
	UPDATE	[dbo].[Active_GroupFragments]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_GroupFragments] t1
			JOIN
			(
				-- Select latest version from each group fragment group
				SELECT	RootGroupId,
						GroupId,
						FragmentId,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_GroupFragments]
				GROUP BY RootGroupId, GroupId, FragmentId
			) t2
				-- Exclude latest version of each unique group fragment
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.GroupId = t2.GroupId
					AND
					t1.FragmentId = t2.FragmentId
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical group fragments from update

	-- Mark each unique group-group association except latest one as historical
	UPDATE	[dbo].[Active_GroupGroups]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_GroupGroups] t1
			JOIN
			(
				-- Select latest version from each group-group association
				SELECT	RootGroupId,
						GroupId,
						ChildGroupId,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_GroupGroups]
				GROUP BY RootGroupId, GroupId, ChildGroupId
			) t2
				-- Exclude latest version of each unique group-group association
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.GroupId = t2.GroupId
					AND
					t1.ChildGroupId = t2.ChildGroupId
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical group-group associations from update

	-- Mark each unique group macro value except latest one as historical
	UPDATE	[dbo].[Active_GroupMacroValues]
	SET		IsHistorical = 1
	FROM	[dbo].[Active_GroupMacroValues] t1
			JOIN
			(
				-- Select latest version from each group macro value group
				SELECT	RootGroupId,
						GroupId,
						MacroId,
						MAX( ReplicationId ) as ReplicationId
				FROM	[dbo].[Active_GroupMacroValues]
				GROUP BY RootGroupId, GroupId, MacroId
			) t2
				-- Exclude latest version of each unique group macro value
				ON	t1.RootGroupId = t2.RootGroupId
					AND
					t1.GroupId = t2.GroupId
					AND
					t1.MacroId = t2.MacroId
					AND
					t1.ReplicationId <> t2.ReplicationId
	WHERE	t1.IsHistorical = 0	-- Exclude historical group macro values from update

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Marked each unique configuration item except latest one as historical'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{A391785E-72EC-4623-A5D2-5B834A4B15F2}'
SET @ReferenceID = '36042'
SET @Author = 'Anel Hidic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

-- 
DECLARE @ID INT;
DECLARE @PROCESSED BIT;
DECLARE @FULLMACRONAME VARCHAR(250);
DECLARE @MACRONAME VARCHAR(250);
DECLARE @MACROID UNIQUEIDENTIFIER;
DECLARE @MACROVALUE VARCHAR(250);

-- Declare and initialize ID constants
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}' -- ServiceBus
DECLARE @SERVICE_HOST uniqueidentifier
SET		@SERVICE_HOST = '{4FF5DBB5-A888-4C76-B222-8EE53950E511}' -- ServiceBus ServiceHost Service

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- PREPARE ROWS TO PROCESS
	IF OBJECT_ID('tempdb..#ServicePoolMacroUpdate36042') IS NOT NULL
	BEGIN
		PRINT 'DROPPING TABLE tempdb..#ServicePoolMacroUpdate36042'
		DROP TABLE #ServicePoolMacroUpdate36042
	END
	CREATE TABLE #ServicePoolMacroUpdate36042
		(
			PoolId INT,
			PoolFragment XML,
			PoolName VARCHAR(250),
			PoolProcessed BIT
		) 

	-- GET ALL SERVICE POOL FRAGMENTS FOR WHICH LOCAL ELEMENT IS CONFIGURED TO USE MACRO
	INSERT INTO 
		#ServicePoolMacroUpdate36042( PoolId, PoolFragment, PoolName, PoolProcessed )
	SELECT 
		ReplicationId, Contents, Name, 0
	FROM 
		[dbo].[Active_Fragments]
	WHERE
		Contents.exist('/ServicePool')=1
		AND Name LIKE 'ServicePool.%'
		AND 
		(
			Contents.value('(ServicePool/Local)[1]', 'nvarchar(max)' ) LIKE '[[]DSCS:MACRO:%'
		)
	
	-- PROCESS ROWS
	
	WHILE EXISTS( SELECT PoolId FROM #ServicePoolMacroUpdate36042 WHERE PoolProcessed = 0 )
	BEGIN
		-- GET NEXT ROW
		SELECT TOP (1)
			@ID = PoolId,
			@MACROVALUE = PoolFragment.value('(/ServicePool/Local/text())[1]', 'varchar(250)'),
			@PROCESSED = PoolProcessed
		FROM 
			#ServicePoolMacroUpdate36042
		WHERE 
			PoolProcessed = 0;
		
		-- UPDATE PROCESSED ROW STATUS
		
		UPDATE #ServicePoolMacroUpdate36042 SET PoolProcessed = 1 WHERE PoolId = @ID;
		
		IF ( @MACROVALUE IS NOT NULL )
			BEGIN
			
				-- EXTRACT MACRO NAME ( FORMAT IS [DSCS:MACRO:MACRONAME] )
				
				SET @MACRONAME = SUBSTRING(@MACROVALUE, LEN('[DSCS:MACRO:')+1, LEN(@MACROVALUE)- (LEN('[DSCS:MACRO:')+1));
				
				-- GET MACRO ID
				
				SET @MACROID = ( SELECT TOP(1) Id FROM dbo.Active_Macros WHERE Name = @MACRONAME );
				
				IF ( @MACROID IS NOT NULL )
					BEGIN
					
						-- DELETE ALL MACRO VALUES OUTSIDE OF SERVICEHOST APPLICATION 
						-- Note: Macro values from child groups of service host application are not deleted
						
						DELETE
						FROM 
							dbo.Active_GroupMacroValues 
						WHERE  
							MacroId = @MACROID AND
							Value = 'False' AND 
							dbo.Active_GroupMacroValues.GroupId <> @SERVICE_HOST AND
							dbo.Active_GroupMacroValues.GroupId NOT IN ( SELECT ChildGroupId FROM dbo.Active_GroupGroups WHERE GroupId = @SERVICE_HOST )
						
						-- CHECK IF MACRO REFERENCE EXIST ON ROOT LEVEL
						
						IF NOT EXISTS ( SELECT ReplicationId FROM dbo.Active_GroupMacroValues WHERE MacroId = @MACROID AND GroupId = @ROOT_GROUP_ID )
							BEGIN
								INSERT INTO 
									dbo.Active_GroupMacroValues
										( 
											RootGroupId, 
											GroupId, 
											MacroId, 
											Value 
										)
								VALUES 
									( 
										@ROOT_GROUP_ID, 
										@ROOT_GROUP_ID, 
										@MACROID, 
										'False' 
									);
							END
					END
			END
	END
	DROP TABLE #ServicePoolMacroUpdate36042;
	
	DECLARE @FragmentId uniqueidentifier
	SET	@FragmentId = '{D21BB9B7-5A33-4F6E-B4B3-583257590256}'
	
	UPDATE	Active_Fragments
	SET		Contents = '<SchemaVersion>3.2.0.16</SchemaVersion>'
	WHERE	Id = @FragmentId
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Macro values update finished'
	COMMIT TRANSACTION
END

GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID1 uniqueidentifier
DECLARE @PreviousTrackingID2 uniqueidentifier
DECLARE @PreviousTrackingID3 uniqueidentifier

DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection1 int
DECLARE @PreviousSection2 int
DECLARE @PreviousSection3 int
DECLARE @Section int

SET @PreviousTrackingID1 = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634 (Reorganize initial config)
SET @PreviousTrackingID2 = '{F4118D11-59BE-4560-900A-0D0B2F59FE76}' -- 32829 (Added global log level macro)
SET @PreviousTrackingID3 = '{51567CDE-9DCA-427D-8BAC-BC826CD8D4B3}' -- 33125 (Added ServicePool.Name filter attribute)

SET @TrackingID = '{5395E7DD-A64A-4E42-A555-BB100B628229}'
SET @ReferenceID = '22293'
SET @Author = 'Admir Rogovic'

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection1 = 7 -- Created fragments and linked them to appropriate section(s)
SET @PreviousSection2 = 1 -- Macro for global log level has been created.
SET @PreviousSection3 = 1 -- Added ServicePool.Name filter attribute

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Decrease CleanupInterval of PickupLogEntries BSE module to 1 minute
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID1, @PreviousSection1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	-- Declare and initialize ID of fragment containing the PickupLogEntries service
	DECLARE	@PICK_UP_LOG_ENTRIES_SERVICE uniqueidentifier
	SET		@PICK_UP_LOG_ENTRIES_SERVICE = '{7A031131-7959-4515-B750-153330E43278}'

	UPDATE	Active_Fragments
	SET		Contents.modify
			('
				replace value of
					( /Service[@name="ServiceBus.ServiceHost.BseModule.PickupLogEntries"]/ServiceFactoryData[@name="BSE"]/StartConfig/CleanupInterval/text() )[ 1 ]
				with
					"00:01:00"
			')
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Id = @PICK_UP_LOG_ENTRIES_SERVICE

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Decreased CleanupInterval of PickupLogEntries BSE module to 1 minute'
	COMMIT TRANSACTION
END

--
-- Minimize number of log entries created by Logging system
--
SET @Section = 2
IF 	DataFix.SectionState( @PreviousTrackingID1, @PreviousSection1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @PreviousTrackingID2, @PreviousSection2 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @PreviousTrackingID3, @PreviousSection3 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	
	SET		@Name = 'ServicePool.Logging'

	--
	-- Determine ID of ServicePool.Logging group
	--
	DECLARE @LOGGING_SERVICE_POOL_GROUP uniqueidentifier
	SELECT	@LOGGING_SERVICE_POOL_GROUP = Id
	FROM	Active_Groups
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Name = @Name
	
	--
	-- Ensure that ServicePool.Logging group is created
	--
	IF ( @LOGGING_SERVICE_POOL_GROUP IS NULL )
		BEGIN
			SET	@LOGGING_SERVICE_POOL_GROUP = '{5EEC62C2-AE8F-49B2-8A38-D53ACEF39ED4}'
			SET @Description = 'Logging service pool group'
		
			INSERT INTO Active_Groups
			(
				Id,
				RootGroupId,
				Name,
				Description,
				GroupTemplateId,
				IsRootGroup
			)
			VALUES
			(
				@LOGGING_SERVICE_POOL_GROUP,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				0
			)
		END
	
	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'
	
	--
	-- Ensure that ServicePool.Logging group is linked to ServiceHost Service group
	-- 
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupGroups WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND ChildGroupId = @LOGGING_SERVICE_POOL_GROUP ) )
		INSERT INTO Active_GroupGroups
		(
			RootGroupId,
			GroupId,
			ChildGroupId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@LOGGING_SERVICE_POOL_GROUP
		)
		
	--
	-- Declare and initialize LOGGING.LOGLEVEL macro ID
	--
	DECLARE	@LOGGING_LOG_LEVEL uniqueidentifier
	SET		@LOGGING_LOG_LEVEL = '{FAEE35A6-5C2A-40CB-A74E-CC6C77F58069}'		
		
	--
	-- Ensure that LOGGING.LOGLEVEL macro has value of Warning for ServicePool.Logging group
	-- 
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @LOGGING_SERVICE_POOL_GROUP AND MacroId = @LOGGING_LOG_LEVEL ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@LOGGING_SERVICE_POOL_GROUP,
			@LOGGING_LOG_LEVEL,
			'Warning'
		)
	ELSE
		UPDATE	Active_GroupMacroValues
		SET		Value = 'Warning'
		WHERE	RootGroupId = @ROOT_GROUP_ID
				AND
				GroupId = @LOGGING_SERVICE_POOL_GROUP
				AND
				MacroId = @LOGGING_LOG_LEVEL
	
	--
	-- Determine ID of ServicePool.Logging filter
	--
	DECLARE	@LOGGING_SERVICE_POOL_FILTER uniqueidentifier
	SELECT	@LOGGING_SERVICE_POOL_FILTER = Id
	FROM	Active_Filters
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Name = @Name
	
	--
	-- Ensure that ServicePool.Logging filter is created
	--
	IF ( @LOGGING_SERVICE_POOL_FILTER IS NULL )
		BEGIN
			SET	@LOGGING_SERVICE_POOL_FILTER = '{96F40154-69B9-4101-9C9F-B975D8F29EC6}'
			SET @Description = 'Logging service pool filter'
		
			INSERT INTO Active_Filters
			(
				Id,
				RootGroupId,
				Name,
				Description,
				MachineName,
				AppName,
				AppPath,
				AppConfigFilePath,
				AppVersion,
				AppUser
			)
			VALUES
			(
				@LOGGING_SERVICE_POOL_FILTER,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that the ServicePool.Logging filter is linked to ServicePool.Logging group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFilters WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @LOGGING_SERVICE_POOL_GROUP AND FilterId = @LOGGING_SERVICE_POOL_FILTER ) )
		INSERT INTO Active_GroupFilters
		(
			RootGroupId,
			GroupId,
			FilterId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@LOGGING_SERVICE_POOL_GROUP,
			@LOGGING_SERVICE_POOL_FILTER
		)
	
	--
	-- Declare and initialize ServicePool.Name attribute ID
	--
	DECLARE @SERVICE_POOL_NAME_ATTRIBUTE uniqueidentifier
	SET		@SERVICE_POOL_NAME_ATTRIBUTE = '{D300464A-F94B-44EE-AE84-5B5774EE47B8}'

	--
	-- Ensure that ServicePool.Name attribute has value of Logging for ServicePool.Logging filter
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_FilterAttributeValues WHERE RootGroupId = @ROOT_GROUP_ID AND FilterId = @LOGGING_SERVICE_POOL_FILTER AND AttributeId = @SERVICE_POOL_NAME_ATTRIBUTE ) )
		INSERT INTO Active_FilterAttributeValues
		(
			RootGroupId,
			FilterId,
			AttributeId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@LOGGING_SERVICE_POOL_FILTER,
			@SERVICE_POOL_NAME_ATTRIBUTE,
			'Logging'
		)
	ELSE
		UPDATE	Active_FilterAttributeValues
		SET		Value = 'Logging'
		WHERE	RootGroupId = @ROOT_GROUP_ID
				AND
				FilterId = @LOGGING_SERVICE_POOL_FILTER
				AND
				AttributeId = @SERVICE_POOL_NAME_ATTRIBUTE

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Minimized number of log entries created by Logging system'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{B74FA525-6CE2-44EB-B0C0-9FE0360504C1}'
SET @ReferenceID = '37538'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE	@LOGING_SECTION_ID uniqueidentifier
SET		@LOGING_SECTION_ID = '{398F8990-F814-4E83-9EBC-B6AD9E1E8BB4}'

DECLARE	@PICK_UP_LOG_ENTRIES_SERVICE uniqueidentifier
SET		@PICK_UP_LOG_ENTRIES_SERVICE = '{7A031131-7959-4515-B750-153330E43278}'

DECLARE	@LOGGING_QUEUE uniqueidentifier
SET		@LOGGING_QUEUE = '{BB1137A9-AE9E-450A-9A17-35E7C9E1130E}'

DECLARE @LOGGING_MSMQ_PATH varchar(1024)
SET		@LOGGING_MSMQ_PATH = '.\Private$\ServiceBus.logging'

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	-- Get logging path
	SELECT	@LOGGING_MSMQ_PATH =
			Contents.value('( /Service[@name="ServiceBus.ServiceHost.BseModule.PickupLogEntries"]/ServiceFactoryData[@name="BSE"]/StartConfig/QueuePath/text() )[ 1 ]', 'varchar( 1024 )')
	FROM	Active_Fragments 
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Id = @PICK_UP_LOG_ENTRIES_SERVICE
			
	-- Insert macro instead of logging path in PickupLogEntries BSE module
	UPDATE	Active_Fragments
	SET		Contents.modify
			('
				replace value of
					( /Service[@name="ServiceBus.ServiceHost.BseModule.PickupLogEntries"]/ServiceFactoryData[@name="BSE"]/StartConfig/QueuePath/text() )[ 1 ]
				with
					"[DSCS:MACRO:LOGGING.MSMQTARGET.PATH]"
			')
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Id = @PICK_UP_LOG_ENTRIES_SERVICE

	-- Insert macro instead of logging path in MSMQ Target configuration
	UPDATE	Active_Fragments
	SET		Contents.modify
			('
				replace value of
					( //Target/Properties/Property[@name="QueuePath"]/text() )[ 1 ]
				with
					"[DSCS:MACRO:LOGGING.MSMQTARGET.PATH]"
			')
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @LOGING_SECTION_ID
			
	--
	-- Ensure that LOGGING.MSMQTARGET.PATH macro is created for the root group
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @LOGGING_QUEUE AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@LOGGING_QUEUE,
				@ROOT_GROUP_ID,
				'LOGGING.MSMQTARGET.PATH',
				'Logging MSMQ Target queue path',
				'System.String'
			)
		END
		
	--
	-- Ensure that value is assigned to macro LOGGING.MSMQTARGET.PATH for environment
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @LOGGING_QUEUE ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ROOT_GROUP_ID,
			@LOGGING_QUEUE,
			@LOGGING_MSMQ_PATH
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Extracted Logging MSMQ target queue path to macro'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{A8FE2E92-47C0-406F-9A61-CEF0929314D5}' -- PreviousReferenceID: 27831 - Reorganize fragment schema to support separation of design time and run time artifacts
SET @TrackingID = '{6953453F-6284-46FF-B1A1-E8674F98E7EA}'
SET @ReferenceID = '37670' -- Services in Service Pool - Move to own fragment
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1	-- Moved ServiceHostData and ServicePermissions to their own fragment

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- Declare variables
--
DECLARE @HostDataId int					-- ReplicationId of ServiceHostData fragment
DECLARE @ServiceName varchar(250)		-- Service name
DECLARE @ServicePoolName varchar(250)	-- Service pool name

DECLARE @AssociationId int				-- ReplicationId of service-service pool associations fragment

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)
DECLARE @FragmentId uniqueidentifier

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
		--
		-- Ensure that temporary tables HostData and ServicePoolServices do not exist
		--
		IF OBJECT_ID( 'tempdb..#HostData37670' ) IS NOT NULL
			DROP TABLE #HostData37670

		IF OBJECT_ID( 'tempdb..#ServicePoolServices37670' ) IS NOT NULL
			DROP TABLE #ServicePoolServices37670
		
		IF OBJECT_ID( 'tempdb..#ServicePoolGroups37670' ) IS NOT NULL
			DROP TABLE #ServicePoolGroups37670
		
		--
		-- Create temporary tables HostData and ServicePoolServices
		--
		CREATE TABLE #HostData37670
		(
			ReplicationID int,
			ServiceName varchar(250),
			ServicePoolName varchar(250),
			RowProcessed bit
		)
		
		CREATE TABLE #ServicePoolServices37670
		(
			ServicePoolName varchar(250),
			ReplicationID int
		)
		
		CREATE TABLE #ServicePoolGroups37670
		(
			ServicePoolName varchar(250),
			GroupId uniqueidentifier
		)
		
		--
		-- Fill temporary table HostData
		--
		INSERT INTO #HostData37670
		(
			ReplicationID,
			ServiceName,
			ServicePoolName,
			RowProcessed
		)
		SELECT DISTINCT 
				ReplicationId, 
				-- Extract service name from text like Service.ServiceBus.Demo.DSE.Add.ServiceHostData
				SUBSTRING( Name, 9, LEN( Name ) - 24 ) AS ServiceName,
				ServicePool.value( '@name', 'varchar(250)' ) AS ServicePoolName,
				0 AS RowProcessed
		FROM	Active_Fragments
				CROSS APPLY 
				Contents.nodes( '/ServiceHostData/ServicePools/ServicePool' ) ServicePools( ServicePool )
		WHERE	SectionId = @SERVICEHOST
				AND
				Name LIKE 'Service.%.ServiceHostData'
				AND
				--Services/ServiceGroup name="Requests"/Service name="ServiceBus.System.ServiceRequestExplorer.Abort"
				RootXmlNode LIKE 'Services/Service% name="%"'
				AND
				Contents.exist( 'ServiceHostData/ServicePools' ) = 1
		ORDER BY ServicePoolName ASC, ServiceName ASC

		--
		-- Fill temporary table ServicePoolServices
		--
		INSERT INTO #ServicePoolServices37670
		(
			ReplicationID,
			ServicePoolName
		)
		SELECT DISTINCT
				ReplicationId,
				-- Extract service pool name from text like ServicePool.Demo.Services
				SUBSTRING( Name, 13, LEN( Name ) - 21 ) AS ServicePoolName
		FROM	Active_Fragments
		WHERE	SectionId = @SERVICEHOST
				AND
				Name LIKE 'ServicePool.%.Services'
				AND
				RootXmlNode LIKE 'ServicePoolServices/ServicePool name="%"'
		ORDER BY ServicePoolName ASC
		
		--
		-- Determine which groups contain service pools
		--
		INSERT INTO #ServicePoolGroups37670
		(
			ServicePoolName,
			GroupId
		)
		SELECT DISTINCT
				f.Contents.value( '( ServicePool/@name )[ 1 ]', 'varchar(250)' ) AS ServicePoolName,
				gf.GroupId
		FROM	Active_Fragments f
				JOIN
				Active_GroupFragments gf
					ON f.Id = gf.FragmentId
		WHERE	SectionId = @SERVICEHOST
				AND
				Name LIKE 'ServicePool.%'
				AND
				RootXmlNode = 'ServicePools'
		ORDER BY ServicePoolName
			
		--
		-- Process results
		--
		WHILE EXISTS ( SELECT TOP 1 ReplicationID FROM #HostData37670 WHERE RowProcessed = 0  )
		BEGIN
			--
			-- Get next row
			--
			SELECT TOP 1
					@HostDataId		 = ReplicationID,
					@ServiceName	 = ServiceName,
					@ServicePoolName = ServicePoolName
			FROM	#HostData37670
			WHERE 	RowProcessed = 0
				
			--
			-- Mark row as processed
			--
			UPDATE	#HostData37670 
			SET		RowProcessed = 1 
			WHERE	ReplicationID = @HostDataId

			--
			-- First clear current AssociationId value
			--
			SET @AssociationId = NULL
			
			--
			-- Determine ReplicationId of service-service pool associations fragment for current service pool name
			--
			SELECT	@AssociationId = ReplicationId
			FROM	#ServicePoolServices37670
			WHERE	ServicePoolName = @ServicePoolName
			
			--
			-- Ensure that valid fragment for service - service pool associations exists
			--				
			SET @Name = 'ServicePool.' + @ServicePoolName + '.Services'
			SET @Description = 'Service-service pool associations for ' + @ServicePoolName + ' service pool'
			
			IF ( @AssociationId IS NULL )
				BEGIN
					--
					-- Insert new service - service pool associations fragment
					--
					SET @FragmentId = NEWID()
					INSERT INTO Active_Fragments
					(
						Id,
						RootGroupId,
						Name,
						Description,
						SectionId,
						RootXmlNode,
						Contents
					)
					VALUES
					( 
						@FragmentId,
						@ROOT_GROUP_ID,
						@Name,
						@Description,
						@SERVICEHOST,
						'ServicePoolServices/ServicePool name="' + @ServicePoolName + '"',
						'<Services />'
					)

					--
					-- Set AssociationId to ID of last inserted active fragment (in this scope)
					--
					SET @AssociationId = SCOPE_IDENTITY()

					--
					-- Ensure that service-service pool associations fragment is added into every group
					-- containing the service pool fragment
					--
					INSERT INTO Active_GroupFragments
					(
						RootGroupId,
						GroupId,
						FragmentId
					)
					SELECT	@ROOT_GROUP_ID,
							g.GroupId,
							@FragmentId
					FROM	#ServicePoolGroups37670 g
							LEFT JOIN
							Active_GroupFragments gf
								ON	g.GroupId = gf.GroupId
									AND
									@FragmentId = gf.FragmentId
					WHERE	g.ServicePoolName = @ServicePoolName
							AND
							gf.ReplicationId IS NULL

					--
					-- Insert new info into temporary table ServicePoolServices
					--
					INSERT INTO #ServicePoolServices37670
					(
						ReplicationID,
						ServicePoolName
					)
					VALUES
					(
						@AssociationId,
						@ServicePoolName
					)
				END
			ELSE
				BEGIN
					--
					-- Ensure that found fragment has appropriate name and description
					--
					UPDATE	Active_Fragments
					SET		Name = @Name,
							Description = @Description
					WHERE	ReplicationId = @AssociationId
					
					--
					-- Ensure that found fragment has Services child element
					--
					UPDATE	Active_Fragments
					SET		Contents.modify( 'insert element Services {""} as first into ( / )[ 1 ]' )
					WHERE	ReplicationId = @AssociationId
							AND
							Contents.exist( 'Services' ) = 0
				END

			--
			-- Ensure that current service is associated with current service pool
			--
			UPDATE	Active_Fragments
			SET		Contents.modify( 'insert element Service { attribute name { sql:variable( "@ServiceName" ) } } as last into ( /Services )[ 1 ]' )
			WHERE	ReplicationId = @AssociationId
					AND
					Contents.exist( 'Services/Service[ @name=sql:variable( "@ServiceName" ) ]' ) = 0

			--
			-- Delete ServicePool element for current service pool name from current ServiceHostData fragment
			-- unless that service pool is a default one
			--
			UPDATE	Active_Fragments
			SET		Contents.modify( 'delete ( /ServiceHostData/ServicePools/ServicePool[ @name=sql:variable( "@ServicePoolName" ) ] )' )
			WHERE	ReplicationId = @HostDataId
					AND
					Contents.exist( '/ServiceHostData/ServicePools/ServicePool[ @name=sql:variable( "@ServicePoolName" ) ]/Default[ text()="True" ]' ) = 0
		END

		--
		-- Drop temporary tables
		--	
		DROP TABLE #HostData37670
		DROP TABLE #ServicePoolServices37670
		DROP TABLE #ServicePoolGroups37670

		EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Moved service - service pool associations from ServiceHostData fragment to associations fragment'

	COMMIT
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)


SET @TrackingID = '{8F5B9A0C-AD3A-4E3A-91E3-C6C8FED42A3C}'
SET @ReferenceID = '37553'
SET @Author = 'Enes Pelko'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0


EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- 1. Add macro and macro value
--
SET @Section = 1

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @MacroId uniqueidentifier
	DECLARE @OldMacroId uniqueidentifier
	
	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'	
		
	BEGIN TRANSACTION
	
	SET @MacroId = '{6C11CA6D-3402-4F1A-9754-41F82E227469}'
	SET @Name = 'BUSINESSCONTEXTS.DEFAULTBUSINESSCONTEXT'
	SET @Description = 'Default Business Context.'
	
	SELECT	@OldMacroId = ID
	FROM	Active_Macros
	WHERE	Name = 'DEFAULT.BUSINESS.CONTEXT'
			AND RootGroupId = @ROOT_GROUP_ID
	
	IF @OldMacroId IS NOT NULL
		BEGIN
		
			UPDATE	Active_Macros
			SET		Id = @MacroId, Name = @Name, Description = @Description
			WHERE	Id = @OldMacroId
					AND RootGroupId = @ROOT_GROUP_ID
			
			UPDATE	Active_GroupMacroValues
			SET		MacroId = @MacroId
			WHERE	MacroId = @OldMacroId
					AND RootGroupId = @ROOT_GROUP_ID					
		END
	
	--
	-- Ensure that BUSINESSCONTEXTS.DEFAULTBUSINESSCONTEXT macro is created for the root group
	--	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'BUSINESSCONTEXTS.DEFAULTBUSINESSCONTEXT'
			SET @Description = 'Default Business Context.'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@MacroId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				'System.String'
			)
		END
	--
	-- Ensure that value is assigned to macro BUSINESSCONTEXTS.DEFAULTBUSINESSCONTEXT for all applications
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @MacroId ) )
		BEGIN			
			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@MacroId,
				'ServiceHost'
			)
		END	
	
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Macro and value for default Business Context has been created..'
	COMMIT TRANSACTION
END

--
-- 2. Update existing fragments to use macros
--
SET @Section = 2

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	update	Active_Fragments
	set		Contents.modify( 'replace value of (
				/ContextManager/ContextGroups/BusinessContexts/Context [@name="BusinessContext"]/ContextFactoryData [@name="BusinessContextFactory"]/DefaultBusinessContext/@name
				)[1] 
			with "[DSCS:MACRO:BUSINESSCONTEXTS.DEFAULTBUSINESSCONTEXT]"')
	WHERE	
		ID = 'D7945F95-D22B-40C4-B6A7-13DD5F8DA636' and
		Contents.exist('/ContextManager/ContextGroups/BusinessContexts/Context [@name="BusinessContext"]/ContextFactoryData [@name="BusinessContextFactory"]/DefaultBusinessContext/@name') = 1
				
		
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Fragments updated with new macro'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID1 uniqueidentifier
DECLARE @PreviousTrackingID2 uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{C6C48376-B128-480B-82C5-55B890D0DFF0}'
SET @ReferenceID = '37562'
SET @Author = 'Enes Pelko'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection1 int
DECLARE @PreviousSection2 int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize section ID constants
--
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

SET @Section = 1

--
-- 1. Remove TEMP:ServiceBus.Administration.Configuration.IShellControl contract definition
--

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	update Active_Fragments
	set Contents.modify ('delete /Contracts/Implementation [@name="TEMP:ServiceBus.Administration.Configuration.IShellControl"]')
	where ID = '8DBF8AF6-DEA0-444E-9199-181C9AA9845F'
	
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Remove TEMP:ServiceBus.Administration.Configuration.IShellControl contract definition'
	COMMIT TRANSACTION
END


GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{2ACFE9C8-1F7E-4DB3-8119-F116179954D1}'
SET @ReferenceID = '37986'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'
	
	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	BEGIN TRANSACTION
	
	DECLARE @FragmentId uniqueidentifier	
	
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServiceEndpoints.Wcf.dll fragment is added to Administrative Console application
	--
	SET	@FragmentId = '{2C1CA5E4-1063-45B7-8CDF-62C80FAA0BD6}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	--
	-- Ensure that ServicePool.System.ServiceEndpoints fragment is added to SERVICEHOST_SERVICE application
	--
	SET	@FragmentId = '{F6F97DDD-4E61-4783-8434-0A15ED9ACF3C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted configuration for generic ServiceBus WCF endpoint to Administrative Console application'
	COMMIT TRANSACTION
END



GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{ECCB0586-3AFE-49A9-A386-4EED7EBB213D}'
SET @ReferenceID = '39056'
SET @Author = 'Anel Hidic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)
DECLARE @FragmentId uniqueidentifier
--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

-- Sections
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

-- Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{9F20B227-83AE-4DA0-BF68-85AEDE5D223A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
			SET @Description = 'ServiceBus.ServiceHost.WwfActivity.InvokeService.dll resource'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="WWFActivities"',
				'<Resource name="ServiceBus.ServiceHost.WwfActivity.InvokeService.dll" id="fb7af803-6ab8-49b7-ac18-4ebb51266182">
<FileName>ServiceBus.ServiceHost.WwfActivity.InvokeService.dll</FileName>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Unity.dll" />
		<Resource name="ServiceBus.Logging.Interfaces.dll" />
	</Dependencies>
</Resource>'
			)
		END
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId
		)
	
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.WWFActivityCatalog'
	COMMIT TRANSACTION
END

-- WwfActivityResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{6B406BB0-FF82-46A3-A3CF-7759929153AB}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'WwfActivityResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
			SET @Description = 'WwfActivityResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/WwfActivityResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.WwfActivity.InvokeService.dll">
  <Activity id="ServiceBus.ServiceHost.WwfActivity.InvokeServiceBusService">
	<ResourceId>ServiceBus.ServiceHost.WwfActivity.InvokeService.dll</ResourceId>
	<TypeName>ServiceBus.ServiceHost.WwfActivity.InvokeServiceBusService</TypeName>
	<AssemblyName>ServiceBus.ServiceHost.WwfActivity.InvokeService</AssemblyName>
	<Category>Custom Activities</Category>
	<DisplayName>InvokeServiceBusService</DisplayName>
  </Activity>
</Resource>'
			)
		END
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: WwfActivityResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
	COMMIT TRANSACTION
END

-- ContractResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{5D2D4C08-F18E-4D20-A5F7-43491C51B5CB}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ContractResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
			SET @Description = 'ContractResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ContractResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.WwfActivity.InvokeService.dll">
  <Type id="ServiceBus.ServiceHost.WwfActivity.InvokeServiceBusService">
	<ReferenceCounter>0</ReferenceCounter>
  </Type>
  <Type id="ServiceBus.ServiceHost.WwfActivity.InvokeServiceBusServiceDesigner">
	<ReferenceCounter>0</ReferenceCounter>
  </Type>
</Resource>'
			)
		END
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: ContractResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
	COMMIT TRANSACTION
END

-- StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll
SET @Section = 4
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{1D0AD783-0641-4504-BFBF-37FFD69AABD4}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.WwfActivity.InvokeService.dll" />'
			)
		END
	--
	-- Ensure that StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
	COMMIT TRANSACTION
END

-- WwfActivity.ServiceBus.ServiceHost.WwfActivity.InvokeServiceBusService
SET @Section = 5
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{F8149F3C-23F7-4C1A-9572-83E84C8ED9F8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'WwfActivity.ServiceBus.ServiceHost.WwfActivity.InvokeServiceBusService'
			SET @Description = 'WwfActivity.ServiceBus.ServiceHost.WwfActivity.InvokeServiceBusService'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'WwfActivityCatalog',
				'<Activity id="ServiceBus.ServiceHost.WwfActivity.InvokeServiceBusService">
  <ResourceId>ServiceBus.ServiceHost.WwfActivity.InvokeService.dll</ResourceId>
  <TypeName>ServiceBus.ServiceHost.WwfActivity.InvokeServiceBusService</TypeName>
  <AssemblyName>ServiceBus.ServiceHost.WwfActivity.InvokeService</AssemblyName>
  <Category>Custom Activities</Category>
  <DisplayName>InvokeServiceBusService</DisplayName>
</Activity>'
			)
		END
	--
	-- Ensure that StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634: Reorganize Initial Config
SET @TrackingID = '{FAE17450-CACD-4D4A-A65B-2EFDB844309D}'
SET @ReferenceID = '39333'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7	-- Created fragments and linked them to appropriate section(s)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'
	
DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
--
-- Declare and initialize section ID constants resource fragment of ServiceBus.ServiceHost.Common.dll
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE @Name varchar( 250 )
DECLARE @Description varchar( 1024 )

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Add ServiceBus.Utility.Helpers.dll resource as dependency into resource fragment of:
--  1. ServiceBus.ServiceHost.Common.dll
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @DependencyName varchar(250)
	DECLARE @ResourceFragmentName varchar(250)
	
	SET		@DependencyName = 'ServiceBus.Utility.Helpers.dll'
	
	--
	-- Add ServiceBus.Utility.Helpers.dll resource as dependency into resource fragment of ServiceBus.ServiceHost.Common.dll
	--
	SET		@ResourceFragmentName = 'Resource.ServiceBus.ServiceHost.Common.dll'
	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert element Resource { attribute name { sql:variable( "@DependencyName" ) } } 
							  as last
							  into ( /Resource/Dependencies )[ 1 ]' )
	WHERE	Name = @ResourceFragmentName
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			Contents.exist( '/Resource/Dependencies/Resource[ @name = sql:variable( "@DependencyName" ) ]' ) = 0
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added ServiceBus.Utility.Helpers.dll resource as dependency.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{5B4C2F68-2DBE-4AFC-A3A1-3C5DCD23C5F0}'
SET @ReferenceID = '31773'
SET @Author = 'Enes Pelko'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author


DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)
DECLARE @FragmentId uniqueidentifier
--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'


--Applications
DECLARE	@A_SERVICEHOST_SERVICE uniqueidentifier
SET		@A_SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @A_ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@A_ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @A_COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@A_COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

DECLARE @A_GENERIC_CLIENT uniqueidentifier
SET		@A_GENERIC_CLIENT = '{20019FA6-2FB3-4058-A3CA-8C422C436690}'

-- Sections
DECLARE	@S_SERVICEHOST uniqueidentifier
SET		@S_SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE @S_ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@S_ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE @S_SB_LOGGING uniqueidentifier
SET		@S_SB_LOGGING = '{398F8990-F814-4E83-9EBC-B6AD9E1E8BB4}'

DECLARE @S_SB_METERING uniqueidentifier
SET		@S_SB_METERING = '{DE385948-E7CA-495B-B325-4BACC2C09C2D}'

DECLARE @S_PUBSUB uniqueidentifier
SET		@S_PUBSUB = '{4C93E0C6-A9A6-46EC-81CD-4AAE4F3608BB}'

DECLARE @S_UNITY uniqueidentifier
SET		@S_UNITY = '{29B68C85-422C-4F38-B4ED-5C917010C756}'

-- Filters
DECLARE @F_GENERIC_CLIENT uniqueidentifier
SET		@F_GENERIC_CLIENT = '{C6D8B411-7F66-4F07-9D57-B4F34DBBD0B7}'

-- Macros
DECLARE @M_LOGLEVEL		uniqueidentifier
SET		@M_LOGLEVEL = '{FAEE35A6-5C2A-40CB-A74E-CC6C77F58069}'


-- Create new Application
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	if not exists ( select * from Active_Groups where Id = @A_GENERIC_CLIENT )
		insert into Active_Groups 
				(Id,				RootGroupId,	Name,				[Description], 
				GroupTemplateId,	IsRootGroup,	ChangeSetId,	IsActive,	IsHistorical )
		values	(@A_GENERIC_CLIENT,	@ROOT_GROUP_ID, 'Generic Client',	'Configuration Application for all clients that don''t require invoking services', 	
				null,				0,				0,				1,			0) 
				
	if not exists ( select * from Active_Filters where Id = @F_GENERIC_CLIENT )
		insert into Active_Filters 
				(Id,				RootGroupId,	Name,				[Description],							AppName,			ChangeSetId,	IsActive,	IsHistorical )
		values	(@F_GENERIC_CLIENT,	@ROOT_GROUP_ID,	'Generic Client',	'Filter for generic client application','GENERIC.CLIENT',	0,				1,			0)
		
	if not exists ( select * from Active_GroupFilters where GroupId = @A_GENERIC_CLIENT and FilterId = @F_GENERIC_CLIENT )
		insert into Active_GroupFilters
				(RootGroupId,		GroupId,			FilterId,			ChangeSetId,	IsActive,	IsHistorical)
		values	(@ROOT_GROUP_ID,	@A_GENERIC_CLIENT,	@F_GENERIC_CLIENT,	0,				1,			0)
		
	if not exists ( select * from Active_GroupGroups where RootGroupId = @ROOT_GROUP_ID and GroupId = @ROOT_GROUP_ID and ChildGroupId = @A_GENERIC_CLIENT )
		insert into Active_GroupGroups	( RootGroupId, GroupId, ChildGroupId, ChangeSetId, IsActive, IsHistorical )	
			values	( @ROOT_GROUP_ID, @ROOT_GROUP_ID, @A_GENERIC_CLIENT, 0, 1, 0)
	
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new Generic.Client Applciation'
	COMMIT TRANSACTION
END


-- Assign fragments to new app
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
		
	-- Fragment:Topic.Any
	if not exists ( select * from Active_GroupFragments where RootGroupId = @ROOT_GROUP_ID and GroupId = @A_GENERIC_CLIENT and FragmentId = 'E2896FFA-5ABB-4FBB-99EF-6217A13E9CD5' )
		insert into Active_GroupFragments 
				(RootGroupId,		GroupId,			ChangeSetId,	IsActive,	IsHistorical,	FragmentId )				
		values	(@ROOT_GROUP_ID,	@A_GENERIC_CLIENT,	0,				1,			0,				'E2896FFA-5ABB-4FBB-99EF-6217A13E9CD5')

	-- Fragment:Channel.General
	if not exists ( select * from Active_GroupFragments where RootGroupId = @ROOT_GROUP_ID and GroupId = @A_GENERIC_CLIENT and FragmentId = 'D4F33EB0-F6B1-494F-9F03-8DEEBF061FC8' )
		insert into Active_GroupFragments 
				(RootGroupId,		GroupId,			ChangeSetId,	IsActive,	IsHistorical,	FragmentId )				
		values	(@ROOT_GROUP_ID,	@A_GENERIC_CLIENT,	0,				1,			0,				'D4F33EB0-F6B1-494F-9F03-8DEEBF061FC8')

	-- Fragment:UnityConfiguration.TypeAliases.Singleton
	if not exists ( select * from Active_GroupFragments where RootGroupId = @ROOT_GROUP_ID and GroupId = @A_GENERIC_CLIENT and FragmentId = 'B5473612-5815-486F-B19E-B3DB7F4C8C7C' )
		insert into Active_GroupFragments 
				(RootGroupId,		GroupId,			ChangeSetId,	IsActive,	IsHistorical,	FragmentId )				
		values	(@ROOT_GROUP_ID,	@A_GENERIC_CLIENT,	0,				1,			0,				'B5473612-5815-486F-B19E-B3DB7F4C8C7C')

	-- Fragment:UnityConfiguration.TypeAliases.External
	if not exists ( select * from Active_GroupFragments where RootGroupId = @ROOT_GROUP_ID and GroupId = @A_GENERIC_CLIENT and FragmentId = 'FB9ECE1C-1303-4D86-B784-90D4ABAA9E28' )
		insert into Active_GroupFragments 
				(RootGroupId,		GroupId,			ChangeSetId,	IsActive,	IsHistorical,	FragmentId )				
		values	(@ROOT_GROUP_ID,	@A_GENERIC_CLIENT,	0,				1,			0,				'FB9ECE1C-1303-4D86-B784-90D4ABAA9E28')

	-- Fragment:UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.IPubSub
	if not exists ( select * from Active_GroupFragments where RootGroupId = @ROOT_GROUP_ID and GroupId = @A_GENERIC_CLIENT and FragmentId = '8FEB4E78-4F94-48B6-B197-6D220080B2AC' )
		insert into Active_GroupFragments 
				(RootGroupId,		GroupId,			ChangeSetId,	IsActive,	IsHistorical,	FragmentId )				
		values	(@ROOT_GROUP_ID,	@A_GENERIC_CLIENT,	0,				1,			0,				'8FEB4E78-4F94-48B6-B197-6D220080B2AC')	

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Fragments added to Generic.Client'
	COMMIT TRANSACTION
END

-- Rename Run test case
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	UPDATE Active_Groups
	SET
		[Name] = 'ServiceBus Client',
		[Description] = 'Client application able to invoke ServiceBus services.'
	WHERE
		[Id] = @A_COMMANDLINE_RUNTESTCASES
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Renamed Run Test Case tool'
	COMMIT TRANSACTION
END

-- Create new Application
SET @Section = 4
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	if not exists ( select * from Active_GroupMacroValues where RootGroupId = @ROOT_GROUP_ID and GroupId = @A_GENERIC_CLIENT and MacroId = @M_LOGLEVEL )
		insert into Active_GroupMacroValues ( RootGroupId, GroupId, MacroId, Value, ChangeSetId, IsActive, IsHistorical )
			values (@ROOT_GROUP_ID, @A_GENERIC_CLIENT, @M_LOGLEVEL, 'Warning', 0, 1, 0 )
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added default log level'
	COMMIT TRANSACTION
END

GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634: Reorganize Initial Config
SET @TrackingID = '{7175ABA6-399E-48F8-B0DD-26C2CB71DAAE}'
SET @ReferenceID = '39446'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 5	-- Created filters for the applications

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'
	
DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
--
-- Declare and initialize section ID constants resource fragment of ServiceBus.ServiceHost.Common.dll
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE @Name varchar( 250 )
DECLARE @Description varchar( 1024 )

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- 1. Try to fix GroupId of each filter
-- 2. Delete contents of Active_GroupFilters table
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Try to fix GroupId of each filter
	--
	UPDATE	Active_Filters
	SET		GroupId = gf.GroupId
	FROM	Active_Filters f
			JOIN
			Active_GroupFilters gf
				ON	f.RootGroupId = gf.RootGroupId
					AND
					f.Id = gf.FilterId

	--
	-- Delete contents of Active_GroupFilters table
	--
	DELETE FROM Active_GroupFilters
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Fixed filter group ID'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4E3B-BD17-02B3C0130B3A}' -- PreviousReferenceID: 15634 - Reorganize Initial Config
SET @TrackingID = '{320DFBA6-50B8-4C7C-9BA5-4162951E32A7}'
SET @ReferenceID = '39868'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7	-- Fragments created and linked to appropriate section(s)

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- 1. Move ServiceFactoryData to its own fragment
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	--
	-- Create table that will temporarily hold new fragments
	--
	CREATE TABLE #NewFragments39868
	(
		ServiceFragmentId uniqueidentifier,
		Id uniqueidentifier,
		RootGroupId uniqueidentifier,
		Name varchar(250),
		Description varchar(1024),
		SectionId uniqueidentifier,
		RootXmlNode varchar(1024),
		Contents xml
	)
	
	DECLARE @ElementName varchar( 20 )
	SET		@ElementName = 'ServiceFactoryData'
	
	--
	-- Populate temporary NewFragments table
	--
	INSERT INTO #NewFragments39868
	SELECT	
			f.Id AS ServiceFragmentId,
			NEWID() AS Id, -- Generate new fragment id
			f.RootGroupId,
			f.Name + '.' + @ElementName AS Name,
			f.[Description] + ' ' + @ElementName AS [Description],
			f.SectionId,
			f.RootXmlNode + '/Service name="' + f.Contents.value( '(Service/@name)[1]', 'varchar( MAX )' ) + '"' AS RootXmlNode,
			Element.query( '.' ) AS Contents
	FROM	dbo.Active_Fragments f
			CROSS APPLY
			f.Contents.nodes( 'Service/*[local-name()=sql:variable( "@ElementName" )]' ) AS [Service]( Element )
	WHERE	f.SectionId = @SERVICEHOST
			AND
			LTRIM( f.RootXmlNode ) LIKE 'Services%'

	--
	-- Remove the element from every Service that has it
	--
	UPDATE	dbo.Active_Fragments
	SET		Contents.modify( 'delete (Service/*[local-name()=sql:variable( "@ElementName" )])' )
	FROM	dbo.Active_Fragments f
			JOIN
			#NewFragments39868 nf
				ON	nf.ServiceFragmentId = f.Id
	
	--
	-- Insert new fragments
	--
	INSERT INTO dbo.Active_Fragments
	(
		Id,
		RootGroupId,
		Name,
		Description,
		SectionId,
		RootXmlNode,
		Contents
	)
	SELECT	nf.Id,
			nf.RootGroupId,
			nf.Name,
			nf.[Description],
			nf.SectionId,
			nf.RootXmlNode,
			nf.Contents
	FROM	#NewFragments39868 nf

	--
	-- Insert associations for new fragments
	--
	INSERT INTO dbo.Active_GroupFragments
	(
		RootGroupId,
		GroupId,
		FragmentId
	)
	SELECT	agf.RootGroupId,
			agf.GroupId,
			nf.Id AS FragmentId
	FROM	#NewFragments39868 nf
			JOIN
			Active_GroupFragments agf
				ON	agf.FragmentId = nf.ServiceFragmentId
	
	--
	-- Drop temporary table
	--
	DROP TABLE #NewFragments39868
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Moved ServiceFactoryData to its own fragment'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4E3B-BD17-02B3C0130B3A}' -- PreviousReferenceID: 15634 - Reorganize Initial Config
SET @TrackingID = '{B540B71C-9E20-4A33-9A05-BE0620B159E1}'
SET @ReferenceID = '39871'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7	-- Fragments created and linked to appropriate section(s)

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--
-- 1. Move ServicePool implementation to its own fragment
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	--
	-- Create table that will temporarily hold ServicePool.{Name}.Implementation fragments
	--
	CREATE TABLE #NewFragments39871
	(
		ServicePoolFragmentId uniqueidentifier,
		Id uniqueidentifier,
		RootGroupId uniqueidentifier,
		Name varchar(250),
		Description varchar(1024),
		SectionId uniqueidentifier,
		RootXmlNode varchar(1024),
		Contents xml
	)
		
	--
	-- Populate temporary NewFragments table with ServicePool.{Name}.Implementation fragments
	--
	INSERT INTO #NewFragments39871
	SELECT	
			f.Id AS ServicePoolFragmentId,
			NEWID() AS Id, -- Generate new fragment id
			f.RootGroupId,
			f.Name + '.Implementation' AS Name,
			f.[Description] + ' implementation' AS [Description],
			f.SectionId,
			f.RootXmlNode + '/ServicePool name="' + f.Contents.value( '( ServicePool/@name )[ 1 ]', 'varchar( MAX )' ) + '"' AS RootXmlNode,
			f.Contents.query( 'ServicePool/*
			[
				local-name() != "Local" and 
				local-name() != "ProcessLoader" and 
				local-name() != "Credentials" and 
				local-name() != "RequestChannels"
			]' ) AS Contents
	FROM	dbo.Active_Fragments f
	WHERE	f.SectionId = @SERVICEHOST
			AND
			Name LIKE 'ServicePool.%'
			AND
			Contents.exist( 'ServicePool' ) = 1

	--
	-- Remove the server-side elements from every ServicePool.{Name} fragment
	--
	UPDATE	dbo.Active_Fragments
	SET		Contents.modify( 'delete ServicePool/*
			[
				local-name() != "Local" and 
				local-name() != "ProcessLoader" and 
				local-name() != "Credentials" and 
				local-name() != "RequestChannels"
			]' )
	FROM	dbo.Active_Fragments f
			JOIN
			#NewFragments39871 nf
				ON	nf.ServicePoolFragmentId = f.Id
	
	--
	-- Insert ServicePool.{Name}.Implementation fragments
	--
	INSERT INTO dbo.Active_Fragments
	(
		Id,
		RootGroupId,
		Name,
		Description,
		SectionId,
		RootXmlNode,
		Contents
	)
	SELECT	nf.Id,
			nf.RootGroupId,
			nf.Name,
			nf.[Description],
			nf.SectionId,
			nf.RootXmlNode,
			nf.Contents
	FROM	#NewFragments39871 nf

	--
	-- Insert associations for ServicePool.{Name}.Implementation fragments to 
	-- ServiceBus ServiceHost Service and SerServiceBus Administrative Console applications,
	-- but only if the ServicePool.{Name} fragment is associated with the applications
	--
	INSERT INTO dbo.Active_GroupFragments
	(
		RootGroupId,
		GroupId,
		FragmentId
	)
	SELECT	agf.RootGroupId,
			agf.GroupId,
			nf.Id AS FragmentId
	FROM	#NewFragments39871 nf
			JOIN
			Active_GroupFragments agf
				ON	agf.FragmentId = nf.ServicePoolFragmentId
	WHERE	agf.GroupId = @SERVICEHOST_SERVICE
			OR
			agf.GroupId = @ADMINISTRATIVE_CONSOLE
	
	--
	-- Drop temporary table
	--
	DROP TABLE #NewFragments39871
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Moved ServicePool implementation to its own fragment'
	COMMIT TRANSACTION
END

--
-- 2. Create service pool groups, filters and filter values if missing
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
		DECLARE	@ROOT_GROUP_ID UNIQUEIDENTIFIER
		SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}';			-- ServiceBus
		DECLARE @SERVICE_HOST UNIQUEIDENTIFIER
		SET		@SERVICE_HOST = '{4FF5DBB5-A888-4C76-B222-8EE53950E511}';			-- ServiceBus ServiceHost Service
		DECLARE @ATTRIBUTE_ID UNIQUEIDENTIFIER;
		SET		@ATTRIBUTE_ID = '{D300464A-F94B-44EE-AE84-5B5774EE47B8}';			-- ServicePool.Name attribute
		DECLARE @SERVICE_HOST_SECTION UNIQUEIDENTIFIER;
		SET		@SERVICE_HOST_SECTION = '{12BB99C3-3045-498D-BD54-D2690935D845}';	-- Service Host Section

		DECLARE @CURRENT_NAME	VARCHAR(250);										-- Name of the service pool
		DECLARE @CURENT_ID		VARCHAR(250);										-- Id of the service pool

		DECLARE @GROUP_ID			UNIQUEIDENTIFIER;								-- Id of the ServicePool.[Name] group
		DECLARE @FILTER_ID			UNIQUEIDENTIFIER;								-- Id of the ServicePool.[Name] filter
			
		IF OBJECT_ID('tempdb..#ServicePools39871') IS NOT NULL
		BEGIN
			DROP TABLE #ServicePools39871;
		END

		CREATE TABLE #ServicePools39871
		(
			PoolId uniqueidentifier,
			PoolName varchar(250),
			PoolProcessed bit
		)

		-- Load service pools
		INSERT INTO #ServicePools39871
		SELECT 
			Id, 
			SUBSTRING( Name, 0, ( LEN( Name )- 14) ),
			0
		FROM 
			[Active_Fragments]
		WHERE 
			( Name  LIKE 'ServicePool.%.Implementation' ) AND ( SectionId = @SERVICE_HOST_SECTION )

		-- Process service pools
		WHILE ( EXISTS ( SELECT PoolId FROM #ServicePools39871 WHERE PoolProcessed = 0 ))
		BEGIN
			SELECT TOP(1) @CURENT_ID = PoolId, @CURRENT_NAME = PoolName FROM #ServicePools39871	WHERE PoolProcessed = 0;	
			
			SET @GROUP_ID = NEWID();
			SET @FILTER_ID = NEWID();
			
			-- GROUP > Check by name if group already exists
			IF ( NOT EXISTS ( SELECT ReplicationId FROM dbo.Active_Groups WHERE Name = @CURRENT_NAME ) )
				BEGIN
					-- insert if missing
					INSERT INTO dbo.Active_Groups
					( 
						Id, 
						RootGroupId, 
						Name, 
						Description, 
						GroupTemplateId, 
						IsRootGroup, 
						ChangeSetId, 
						IsActive, 
						IsHistorical
					)
					VALUES 
					( 
						@GROUP_ID, 
						@ROOT_GROUP_ID, 
						@CURRENT_NAME, 
						SUBSTRING( @CURRENT_NAME, 13, LEN(@CURRENT_NAME) ) + ' service pool group', 
						NULL, 
						0, 
						0, 
						1, 
						0 
					);
				END
			ELSE
				BEGIN
					-- use if exists
					SET @GROUP_ID = ( SELECT TOP(1) Id FROM dbo.Active_Groups WHERE Name = @CURRENT_NAME ); 
				END
			
			-- GROUP PARENT > check if group with GROUP_ID is already added as child of service host service
			IF ( NOT EXISTS ( SELECT ReplicationId FROM dbo.Active_GroupGroups WHERE dbo.Active_GroupGroups.GroupId = @SERVICE_HOST AND dbo.Active_GroupGroups.ChildGroupId = @GROUP_ID ) )
			BEGIN
				-- insert if missing
				INSERT INTO dbo.Active_GroupGroups 
				( 
					RootGroupId, 
					GroupId, 
					ChildGroupId, 
					ChangeSetId, 
					IsActive, 
					IsHistorical 
				)
				VALUES 
				( 
					@ROOT_GROUP_ID, 
					@SERVICE_HOST, 
					@GROUP_ID, 
					0, 
					1, 
					0 
				);
			END
			
			-- FILTER > Check by filter name AND parent group id if filter already exists
			IF ( NOT EXISTS( SELECT ReplicationId FROM dbo.Active_Filters WHERE Name = @CURRENT_NAME AND GroupId = @GROUP_ID ) )
				BEGIN
					-- add if missing 
					INSERT INTO dbo.Active_Filters
					( 
						Id, 
						RootGroupId, 
						GroupId, 
						Name, 
						Description, 
						MachineName, 
						AppName, 
						AppPath, 
						AppConfigFilePath,
						AppVersion, 
						AppUser, 
						ChangeSetId, 
						IsActive, 
						IsHistorical  
					)
					VALUES
					( 
						@FILTER_ID, 
						@ROOT_GROUP_ID, 
						@GROUP_ID, 
						@CURRENT_NAME, 
						SUBSTRING( @CURRENT_NAME, 13, LEN(@CURRENT_NAME) ) + ' service pool filter', 
						NULL, 
						NULL, 
						NULL, 
						NULL, 
						NULL, 
						NULL,
						0, 
						1, 
						0 
					);
				END
			ELSE
				BEGIN
					-- use if exists
					SET @FILTER_ID = ( SELECT TOP(1) Id FROM dbo.Active_Filters WHERE Name = @CURRENT_NAME AND GroupId = @GROUP_ID );
				END
			
			-- FILTER ATTRIBUTE > check by filter id AND attribute id if filter value already exists
			IF ( NOT EXISTS ( SELECT ReplicationId FROM dbo.Active_FilterAttributeValues WHERE FilterId = @FILTER_ID AND AttributeId = @ATTRIBUTE_ID ) )
			BEGIN
				-- insert if missing
				INSERT INTO dbo.Active_FilterAttributeValues
				(
					RootGroupId,
					FilterId,
					AttributeId,
					Value,
					ChangeSetId,
					IsActive,
					IsHistorical
				)
				VALUES
				(
					@ROOT_GROUP_ID,
					@FILTER_ID,
					@ATTRIBUTE_ID,
					SUBSTRING( @CURRENT_NAME, 13, LEN(@CURRENT_NAME) ),
					0,
					1,
					0
				)
			END
			
			-- set row processed flag
			UPDATE #ServicePools39871 SET PoolProcessed = 1 WHERE PoolId = @CURENT_ID;
		END
			
		EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Checked service pool groups and filters configuration'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{EF50DED4-6048-4938-A0F2-CC6FCC02DECA}'
SET @ReferenceID = '38799' -- and 28841 
SET @Author = 'Anel Hidic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4F38-B4ED-5C917010C756}'


DECLARE @FragmentId uniqueidentifier

-- SBACSecurity.FragmentCatalog
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{52BC3992-8FEF-47D0-89F4-F81CCE70F386}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.FragmentCatalog'
			SET @Description = 'Security preferences for Fragment Catalog module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Fragment Catalog">
				  <Full>
					<Identity name="Everyone"/>
				  </Full>
				  <ReadOnly/>
				  <Deny/>
				</Module>'
			)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.FragmentCatalog'
	COMMIT TRANSACTION
END


-- SBACSecurity.ApplicationCatalog
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{F22A0E75-A65F-4387-A0C9-DDA731231A6E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ApplicationCatalog'
			SET @Description = 'Security preferences for Application Catalog module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Application Catalog">
				  <Full>
					<Identity name="Everyone"/>
				  </Full>
				  <ReadOnly/>
				  <Deny/>
				</Module>'
			)
		END

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
			
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ApplicationCatalog'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{434BA613-3EF6-4E3B-BD17-02B3C0130B3A}' -- PreviousReferenceID: 15634 - Reorganize Initial Config
SET @TrackingID = '{56454F54-D874-4DAE-9D02-1F02847554E5}'
SET @ReferenceID = '39869'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 7	-- Fragments created and linked to appropriate section(s)

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- Declare and initialize application ID constants
--
DECLARE @SERVICEBUS_CLIENT uniqueidentifier
SET		@SERVICEBUS_CLIENT = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

--
-- 1. Remove associations between SERVICEBUS_CLIENT application and following fragments:
--    - Service.{Name}.ServiceFactoryData
--    - Service.{Name}.ServicePermissions
--    - ResultsRetentionTime
--    - ServiceHostPublishState
--    - Resource.{Name} (except context and channel related fragments)
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	DELETE FROM Active_GroupFragments
	FROM	Active_GroupFragments gf
			JOIN
			Active_Fragments f
				ON	gf.RootGroupId = f.RootGroupId
					AND
					gf.FragmentId = f.Id
					AND
					gf.GroupId = @SERVICEBUS_CLIENT
	WHERE	f.SectionId = @SERVICEHOST
			AND
			(
				f.Name LIKE 'Service.%.ServiceFactoryData'
				OR
				f.Name LIKE 'Service.%.ServicePermissions'
				OR
				f.Name = 'ResultsRetentionTime'
				OR
				f.Name = 'ServiceHostPublishState'
				OR
				(
					f.Name LIKE 'Resource.%'
					AND
					f.Name NOT LIKE 'Resource.ServiceBus.ServiceHost.Contexts.%Context.dll'
					AND
					f.Name NOT LIKE 'Resource.ServiceBus.ServiceHost.RequestChannels.%.dll'
					AND
					f.Name <> 'Resource.ServiceBus.ServiceHost.ResourceManagement.dll'
				)
			)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Removed unnecessary fragments from Service Bus Client'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{1445FEB0-CD67-43BD-8075-22EEFEE7267C}'
SET @ReferenceID = '40051'
SET @Author = 'Anel Hidic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4F38-B4ED-5C917010C756}'


DECLARE @FragmentId uniqueidentifier

-- SBACSecurity.ConfigurationGroupCatalog
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{31356D0B-AB34-449B-AD68-28C9D373FCCE}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.ConfigurationGroupCatalog'
			SET @Description = 'Security preferences for Configuration Group Catalog module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Configuration Group Catalog">
				  <Full>
					<Identity name="Everyone"/>
				  </Full>
				  <ReadOnly/>
				  <Deny/>
				</Module>'
			)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.ConfigurationGroupCatalog'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author nvarchar( 50 )

SET @TrackingID = '{7F3F21BD-598F-4B56-AE04-9A0EB82A8177}'
SET @ReferenceID = '41084'
SET @Author = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize macro ID constants
--
DECLARE @CONFIGURATION_POOL_ADDRESS uniqueidentifier
SET		@CONFIGURATION_POOL_ADDRESS = '{BBF951EF-97A9-4485-96C9-AC06EC7B6545}'

DECLARE @PUBSUB_POOL_ADDRESS_MACRO_ID uniqueidentifier
SET		@PUBSUB_POOL_ADDRESS_MACRO_ID = '{94790F1D-A8E9-4AE7-969B-DC6CD698AAEE}'

DECLARE @PUBSUB_POOL_ADDRESS_MACRO_NAME varchar(100)
SET		@PUBSUB_POOL_ADDRESS_MACRO_NAME = 'PUBSUB.POOL.ADDRESS'

--
-- 1. Add PUBSUB.POOL.ADDRESS macro.
-- 2. Copy group-macro values of CONFIGURATION.POOL.ADDRESS macro for PUBSUB.POOL.ADDRESS macro.
-- 3. Replace CONFIGURATION.POOL.ADDRESS with PUBSUB.POOL.ADDRESS macro in Channel.General fragment.
--
SET @Section = 1

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION

	--
	-- 1. Add PUBSUB.POOL.ADDRESS macro.
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @PUBSUB_POOL_ADDRESS_MACRO_ID AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Macros
		(
			Id,
			RootGroupId,
			Name,
			Description,
			ValueType,
			ChangeSetId
		)
		VALUES
		( 
			@PUBSUB_POOL_ADDRESS_MACRO_ID,
			@ROOT_GROUP_ID,
			@PUBSUB_POOL_ADDRESS_MACRO_NAME,
			'PubSub Pool Server Name',
			'System.String',
			0
		)

	--
	-- 2. Copy group-macro values of CONFIGURATION.POOL.ADDRESS macro for PUBSUB.POOL.ADDRESS macro.
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @PUBSUB_POOL_ADDRESS_MACRO_ID ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			GroupId,
			MacroId,
			Value,
			ChangeSetId
		)
		SELECT	RootGroupId,
				GroupId,
				@PUBSUB_POOL_ADDRESS_MACRO_ID,
				Value,
				0
		FROM	Active_GroupMacroValues
		WHERE	RootGroupId = @ROOT_GROUP_ID
				AND
				GroupId = @ROOT_GROUP_ID
				AND
				MacroId = @CONFIGURATION_POOL_ADDRESS

	--
	-- 3. Replace CONFIGURATION.POOL.ADDRESS with PUBSUB.POOL.ADDRESS macro in Channel.General fragment.
	--
	UPDATE	Active_Fragments
	SET		Contents = REPLACE(
				CONVERT( varchar( max ), Contents ),
				'[DSCS:MACRO:CONFIGURATION.POOL.ADDRESS]',
				'[DSCS:MACRO:' + @PUBSUB_POOL_ADDRESS_MACRO_NAME + ']' )
	FROM	Active_Fragments
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Id = '{D4F33EB0-F6B1-494F-9F03-8DEEBF061FC8}' -- Channel.General
			AND
			Contents.exist( 'Channel/ServiceModel/client/endpoint[ contains( @address, "[DSCS:MACRO:CONFIGURATION.POOL.ADDRESS]" ) ]' ) = 1

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Replaced CONFIGURATION.POOL.ADDRESS with PUBSUB.POOL.ADDRESS macro in Channel.General fragment.'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{7C81FD5B-DFC2-45D9-B635-7483B5DE5805}'
SET @ReferenceID = '41545'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Ensure that ServiceBus.Utility.Assembly.dll has dependencies added for following two resources:
--   1. ServiceBus.ServiceHost.ResourceManagement.dll
--   2. ServiceBus.Utility.Sharing.dll
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @ResourceFragmentName varchar( 250 )
	DECLARE @DependencyName       varchar( 250 )
	
	SET		@ResourceFragmentName = 'Resource.ServiceBus.Utility.Assembly.dll'
	
	--
	-- Ensure that ServiceBus.Utility.Assembly.dll has dependencies added for 
	-- ServiceBus.ServiceHost.ResourceManagement.dll resource
	--
	SET		@DependencyName = 'ServiceBus.ServiceHost.ResourceManagement.dll'
	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert element Resource { attribute name { sql:variable( "@DependencyName" ) } } 
							  as last
							  into ( /Resource/Dependencies )[ 1 ]' )
	WHERE	Name = @ResourceFragmentName
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			Contents.exist( '/Resource/Dependencies/Resource[ @name = sql:variable( "@DependencyName" ) ]' ) = 0

	--
	-- Ensure that ServiceBus.Utility.Assembly.dll has dependencies added for 
	-- ServiceBus.Utility.Sharing.dll resource
	--
	SET		@DependencyName = 'ServiceBus.Utility.Sharing.dll'
	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert element Resource { attribute name { sql:variable( "@DependencyName" ) } } 
							  as last
							  into ( /Resource/Dependencies )[ 1 ]' )
	WHERE	Name = @ResourceFragmentName
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			Contents.exist( '/Resource/Dependencies/Resource[ @name = sql:variable( "@DependencyName" ) ]' ) = 0

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Modified ServiceBus.Utility.Assembly.dll dependencies.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{BEF5DBF9-5173-41EE-BAF3-C918A4B4D4D9}'
SET @ReferenceID = '41778'
SET @Author = 'Anel Hidic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
		----------------------------------------------------------------------------------------------------------
		-- PREPARE CONSTANTS
		----------------------------------------------------------------------------------------------------------

		DECLARE	@ROOT_GROUP_ID			UNIQUEIDENTIFIER =	'{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'
		DECLARE	@SERVICE_HOST_SECTION	UNIQUEIDENTIFIER =	'{12BB99C3-3045-498d-BD54-D2690935D845}'
		DECLARE @SERVICE_HOST_SERVICE	UNIQUEIDENTIFIER =	'{4FF5DBB5-A888-4C76-B222-8EE53950E511}'
		DECLARE @SERVICE_BUS_CLIENT		UNIQUEIDENTIFIER =	'{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
		DECLARE @SERVICE_BUS_CONSOLE	UNIQUEIDENTIFIER =	'{B233BE84-30B6-4349-B309-F24942D8DE4B}'

		----------------------------------------------------------------------------------------------------------
		-- PREPARE IDs AND NAMES FOR SYSTEM FACTORIES
		----------------------------------------------------------------------------------------------------------

		IF OBJECT_ID('tempdb..#SystemFactories41778') IS NOT NULL
		DROP TABLE #SystemFactories41778

		CREATE TABLE #SystemFactories41778
		(
			FragmentId		UNIQUEIDENTIFIER,
			FragmentName	VARCHAR( 250 )
		)

		INSERT INTO 
			#SystemFactories41778 ( FragmentId, FragmentName )
		VALUES
			( '{D932FB35-809C-45AE-AE9C-70306FE0478D}', 'Factory.ServiceEndpointFactory.Wcf' ),
			( '{AC9201CE-DA67-4CDD-8613-852276D8B0C8}', 'Factory.ServiceFactory.DSE' ),
			( '{6F31D6A3-B02B-49F3-BCD6-057E9A07F8D0}', 'Factory.ServiceFactory.BSE' ),
			( '{C00F7C57-127C-46F0-BF30-0DF77337FCFD}', 'Factory.ServiceFactory.WWF' ),
			( '{BB7B982F-8E19-4383-B1F3-1076B217C203}', 'Factory.ServiceSynchronizationFactory.SingleThreadedService' ),
			( '{17082DE9-49C3-486D-9D86-0D2451C93567}', 'Factory.RequestChannelFactory.WCF' ),
			( '{F8E44628-3F44-4744-B86B-D45CB2A0B6AC}', 'Factory.RequestChannelFactory.Remoting' ),
			( '{E5A1ED7B-F8E0-4038-BF4F-FD1FA349D612}', 'Factory.RequestQueueFactory.Msmq' ),
			( '{E6EA2B3C-C0CE-49D7-99B9-6D6C8B61744A}', 'Factory.RequestQueueFactory.PassThrough' ),
			( '{FD8DE2D7-9B57-4400-B3F2-9A37188FC837}', 'Factory.RequestClassifierFactory.RandomClassifier' ),
			( '{0F32AD5E-E7A2-4494-A95A-988E570AD591}', 'Factory.RequestClassifierFactory.CSharpClassifier' ),
			( '{42D2F6BD-CB99-49D4-BAC7-7A9912E56705}', 'Factory.RequestClassifierFactory.SingleQueueClassifier' ),
			( '{2A8AAFE4-6787-4E60-A99A-7D24141DB619}', 'Factory.RequestSchedulerFactory.ThreadPool' ),
			( '{D1B00EE9-6D9B-4B71-8BC6-18CE798F2853}', 'Factory.PersistenceProviderFactory.PersistenceProviderFactory' ),
			( '{90EF3ACC-31AF-401F-8A3D-83D1D6344180}', 'Factory.PersistenceProviderFactory.MeteringPointPersistenceProviderFactory' ),
			( '{16128C34-BAFD-4825-9563-8F7E9E6B9B14}', 'Factory.PersistenceProviderFactory.LoggingPersistenceProviderFactory' ),
			( '{42D5CCBF-D350-47BB-AF79-F93D20C5A9C1}', 'Factory.ContextFactory.BusinessContextFactory' ),
			( '{843F3A4E-D2A9-47E0-BCC5-AA33ADC1119F}', 'Factory.ContextFactory.LoggingContextFactory' ),
			( '{D769BCA7-3B56-44D4-B571-BE4E5D34AB67}', 'Factory.ContextFactory.SecurityContextFactory' ),
			( '{85D161BE-03FC-475B-A945-1FE946813940}', 'Factory.ContextFactory.MeteringContextFactory' ),
			( '{7940B1BD-C4B6-4A72-83A2-56F0E99DBD35}', 'Factory.ContextFactory.ServiceCallerContextFactory' ),
			( '{39371D4D-68AD-451E-93CE-0F23E9AF1953}', 'Factory.WatchdogFactory.WDF' )

		----------------------------------------------------------------------------------------------------------
		-- LOAD XML FROM "FACTORIES" FRAGMENT
		----------------------------------------------------------------------------------------------------------

		DECLARE @FACTORIES_FRAGMENT XML = 
		(
			SELECT TOP (1) 
				Contents AS Content 
			FROM 
				Active_Fragments 
			WHERE 
				( 
					Id = '{21344742-5675-4E34-B97A-89F0183A8816}' 
					AND	Name = 'Factories' 
					AND SectionId = '{12BB99C3-3045-498D-BD54-D2690935D845}' 
					AND IsActive = 1 
					AND IsHistorical = 0 
				)
		);

		----------------------------------------------------------------------------------------------------------
		-- PREPARE TEMPORARY FRAGMENTS TABLE
		----------------------------------------------------------------------------------------------------------

		IF OBJECT_ID('tempdb..#FactoryFragments41778') IS NOT NULL
		DROP TABLE #FactoryFragments41778;

		WITH Factories_CTE
		AS
		(
			-- Factory groups with XML content
			SELECT 
				Factories.Col.value('local-name(.)', 'VARCHAR(250)')	AS FactoryName,	
				Factories.Col.query('.')								AS FactoryXml									
			FROM   
				@FACTORIES_FRAGMENT.nodes('/Factories/*') Factories(Col)
			WHERE
				Factories.Col.value('local-name(.)', 'VARCHAR(250)') LIKE '%Factories'	-- Check if XML element node is in fact some factory
		),
		Fragments_CTE
		AS
		(
		SELECT 
			Factories_CTE.FactoryName								AS GroupName,		-- Factory Group Name	( "ServiceFactories" )
			Factories_CTE.FactoryXml								AS GroupXml,		-- Factory Group XML	( <ServiceFactories>...</ServiceFactories> )
			Factories.Col.value('local-name(.)', 'VARCHAR(250)')	AS Name,			-- Factory Name			( "ServiceFactory" )
			Factories.Col.value('./@name','VARCHAR(250)')			AS SpecificName,	-- Specific Name		( "DSE" )
			'Factory.' + 
			Factories.Col.value('local-name(.)', 'VARCHAR(250)') + 
			'.' + 
			Factories.Col.value('./@name','VARCHAR(250)')			AS FragmentName,	-- Fragment Name		( Factory.ServiceFactory.DSE )
			ISNULL
				( 
					(	
						SELECT 
							FragmentId 
						FROM 
							#SystemFactories41778 
						WHERE
							'Factory.' + 
							Factories.Col.value('local-name(.)', 'VARCHAR(250)') + 
							'.' + 
							Factories.Col.value('./@name','VARCHAR(250)') = FragmentName
					)
					, NEWID() 
				)													AS FragmentID,		-- Fragment Id			( try to load it from "#SystemFactories41778" if not generate new guid )
			Factories.Col.query('.')								AS FragmentXml,		-- Factory XML			( <ServiceFactory name="DSE">...</ServiceFactory>  )
			'Factories' + '/' + Factories_CTE.FactoryName			AS FragmentRootXml	-- Fragment Path		( Factories/ServiceFactories )
		FROM 
			Factories_CTE 
		CROSS APPLY 
			-- all items ( Factory node ) from some container ( Factories node )
			Factories_CTE.FactoryXml.nodes('/*/*') AS Factories(Col)
		)

		-- Load fragments into temp table
		SELECT * INTO #FactoryFragments41778 FROM Fragments_CTE

		--SELECT * FROM #FactoryFragments41778 ORDER BY FragmentID ASC

		----------------------------------------------------------------------------------------------------------
		-- CREATE FRAGMENTS
		----------------------------------------------------------------------------------------------------------

		INSERT INTO 
			Active_Fragments ( Id, RootGroupId, Name, Description, SectionId, RootXmlNode, Contents )
		SELECT 
			FragmentID, @ROOT_GROUP_ID, FragmentName, 'Description for factory ' + FragmentName, @SERVICE_HOST_SECTION, FragmentRootXml, FragmentXml 
		FROM 
			#FactoryFragments41778
		WHERE
			( 
				NOT EXISTS 
				( 
					SELECT 
						ReplicationId 
					FROM 
						Active_Fragments 
					WHERE 
						Id = FragmentID 
				) 
			)
			
		----------------------------------------------------------------------------------------------------------
		-- ADD FRAGMENTS TO GROUPS
		----------------------------------------------------------------------------------------------------------

		-- Add association to ServiceHost Service group
		INSERT INTO 
			dbo.Active_GroupFragments ( RootGroupId, GroupId, FragmentId )
		SELECT 
			@ROOT_GROUP_ID, @SERVICE_HOST_SERVICE, FragmentID
		FROM 
			#FactoryFragments41778
		WHERE
			( 
				NOT EXISTS 
				(  
					SELECT 
						ReplicationId 
					FROM 
						dbo.Active_GroupFragments 
					WHERE 
						( dbo.Active_GroupFragments.FragmentId = #FactoryFragments41778.FragmentID AND GroupId = @SERVICE_HOST_SERVICE ) 
				)
			) 
			
		-- Add association to ServiceBus Administrative Console group
		INSERT INTO 
			dbo.Active_GroupFragments ( RootGroupId, GroupId, FragmentId )
		SELECT 
			@ROOT_GROUP_ID, @SERVICE_BUS_CONSOLE, FragmentID
		FROM 
			#FactoryFragments41778
		WHERE
			( 
				NOT EXISTS 
				(  
					SELECT 
						ReplicationId 
					FROM 
						dbo.Active_GroupFragments 
					WHERE 
						( dbo.Active_GroupFragments.FragmentId = #FactoryFragments41778.FragmentID AND GroupId = @SERVICE_BUS_CONSOLE ) 
				)
			) 

		-- Add association to ServiceBus Client group
		INSERT INTO 
			dbo.Active_GroupFragments ( RootGroupId, GroupId, FragmentId )
		SELECT 
			@ROOT_GROUP_ID, @SERVICE_BUS_CLIENT, FragmentID
		FROM 
			#FactoryFragments41778
		WHERE
			( 
				NOT EXISTS 
				(  
					SELECT 
						ReplicationId 
					FROM 
						dbo.Active_GroupFragments 
					WHERE 
						( dbo.Active_GroupFragments.FragmentId = #FactoryFragments41778.FragmentID AND GroupId = @SERVICE_BUS_CLIENT ) 
				)
			)
			
		----------------------------------------------------------------------------------------------------------
		-- DELETE "FACTORIES" FRAGMENT AND GROUP ASSOCIATIONS
		----------------------------------------------------------------------------------------------------------
		
		DELETE FROM Active_GroupFragments WHERE ( FragmentId = '{21344742-5675-4E34-B97A-89F0183A8816}');
		DELETE FROM Active_Fragments WHERE ( Id = '{21344742-5675-4E34-B97A-89F0183A8816}');
			
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Splitted Factories fragment'
	COMMIT TRANSACTION
END 
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{679636C4-BE37-4005-9F5E-5610B13AC368}'
SET @ReferenceID = '40660'
SET @Author = 'Anel Hidic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4F38-B4ED-5C917010C756}'


DECLARE @FragmentId uniqueidentifier

-- SBACSecurity.MacroCatalog
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{FBFA8EE0-A1C0-4A29-AA81-7E2C37DFF73A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.MacroCatalog'
			SET @Description = 'Security preferences for Macro Catalog module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="Macro Catalog">
				  <Full>
					<Identity name="Everyone"/>
				  </Full>
				  <ReadOnly/>
				  <Deny/>
				</Module>'
			)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.MacroCatalog'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{452821CB-1014-41A0-8BDE-7C2CDB0D8681}'
SET @ReferenceID = '17439'
SET @Author = 'Anel Hidic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--Sections
DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4F38-B4ED-5C917010C756}'


DECLARE @FragmentId uniqueidentifier

-- SBACSecurity.BseModuleCatalog
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
	SET	@FragmentId = '{E1E75954-E4FF-4F2E-897F-9147C4E32067}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SBACSecurity.BseModuleCatalog'
			SET @Description = 'Security preferences for BSE Module Catalog module'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'SBACSecurity/Modules',
				'<Module name="BSE Module Catalog">
				  <Full>
					<Identity name="Everyone"/>
				  </Full>
				  <ReadOnly/>
				  <Deny/>
				</Module>'
			)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)

	--
	-- Add BSE resource observer to the fragment
	--
	UPDATE Active_Fragments 
	SET
	Contents.modify
	(
		'insert
		<Observer name="BseModuleCatalog">
			<Implementation>
				<FileName>.\Modules\ServiceBus.Administration.Modules.BseModuleCatalog.dll</FileName>
				<Type>ServiceBus.Administration.Modules.BseModuleResourceObserver</Type>
			</Implementation>
		</Observer>
		into (Controls/Control[@name="ResourceCatalog"]/ControlData)[1]'
	)
	WHERE
		Id = '{98EB1790-63FF-4121-A290-5286F5A722BD}'
	AND
		Name = 'Controls'
	AND
		Contents.exist( 'Controls/Control[@name="ResourceCatalog"]/ControlData/Observer[@name="BseModuleCatalog"]' ) = 0

	--
	-- Add BSE module observer to the fragment
	--
	UPDATE Active_Fragments 
	SET
	Contents.modify
	(
		'insert
		<Control name="BseModuleCatalog">
			<ControlData>
				<Observer name="ServiceCatalog">
					<Implementation>
						<FileName>.\Modules\ServiceBus.Administration.Modules.ServiceCatalog.dll</FileName>
						<Type>ServiceBus.Administration.Modules.ServiceBseModuleObserver</Type>
					</Implementation>
				</Observer>
			</ControlData>
		</Control>
		into (Controls)[1]'
	)
	WHERE
		Id = '{98EB1790-63FF-4121-A290-5286F5A722BD}'
	AND
		Name = 'Controls'
	AND
		Contents.exist( 'Controls/Control[@name="BseModuleCatalog"]' ) = 0

		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: SBACSecurity.BseModuleCatalog and configured observers for BSE Module Catalog'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{800CD720-5B68-4EB9-A4DF-B2AE24992224}'
SET @ReferenceID = '42509'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)
DECLARE @FragmentId uniqueidentifier
--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

-- Sections

DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- ContractResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll
	SET	@FragmentId = '{E0A41A37-C652-4721-9BE8-5FCF94C7E3B7}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ContractResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll'
			SET @Description = 'ContractResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ContractResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll">
  <Type id="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure">
    <ReferenceCounter>0</ReferenceCounter>
  </Type>
</Resource>'
			)
		END
	--
	-- Ensure that fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	-- BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll
	SET	@FragmentId = '{13313F9E-3C4C-48AD-BDDB-6384C4A3ED72}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll'
			SET @Description = 'BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/BseModuleResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll">
  <BseModule id="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure">
    <ResourceId>ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll</ResourceId>
    <TypeName>ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure</TypeName>
    <DisplayName>ExecuteStoredProcedure</DisplayName>
    <Imported>True</Imported>
  </BseModule>
</Resource>'
			)
		END
	--
	-- Ensure that fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	-- ServiceBseModuleObserver.BseModule.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure
	SET	@FragmentId = '{2167FDEC-1AA2-4969-AA2C-BFDFF84ED64D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBseModuleObserver.BseModule.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure'
			SET @Description = 'ServiceBseModuleObserver.BseModule.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceBseModuleObserver',
				'<BseModule id="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure">
  <Services>
    <Service name="ServiceBus.ServiceHost.BseModule.ClearExpiredResults"/>
    <Service name="ServiceBus.ServiceHost.BseModule.CreateLoggingContextSummary"/>
  </Services>
</BseModule>'
			)
		END
	--
	-- Ensure that fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	SET	@FragmentId = '{67F90970-65A8-4327-8F11-B89A8446EE37}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'BseModule.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure'
			SET @Description = 'BseModule.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'BseModuleCatalog',
				'<BseModule id="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure">
  <ResourceId>ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll</ResourceId>
  <TypeName>ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure</TypeName>
  <DisplayName>ExecuteStoredProcedure</DisplayName>
  <Category>BSE Modules</Category>
</BseModule>'
			)
		END
	--
	-- Ensure that fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	SET	@FragmentId = '{B015F01D-3ED6-4A2D-96A6-5FDCE7E688C6}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ContractResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll'
			SET @Description = 'ContractResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ContractResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll">
  <Type id="ServiceBus.ServiceHost.BseModule.PickupLogEntries">
    <ReferenceCounter>0</ReferenceCounter>
  </Type>
</Resource>'
			)
		END
	--
	-- Ensure that fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	SET	@FragmentId = '{4F587356-DD83-463B-A4D7-3EBE262F1F10}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll'
			SET @Description = 'BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/BseModuleResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll">
  <BseModule id="ServiceBus.ServiceHost.BseModule.PickupLogEntries">
    <ResourceId>ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll</ResourceId>
    <TypeName>ServiceBus.ServiceHost.BseModule.PickupLogEntries</TypeName>
    <DisplayName>PickupLogEntries</DisplayName>
    <Imported>True</Imported>
  </BseModule>
</Resource>'
			)
		END
	--
	-- Ensure that fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	SET	@FragmentId = '{8776BEA6-5335-43C5-96BF-10EE179CCB56}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBseModuleObserver.BseModule.ServiceBus.ServiceHost.BseModule.PickupLogEntries'
			SET @Description = 'ServiceBseModuleObserver.BseModule.ServiceBus.ServiceHost.BseModule.PickupLogEntries'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ServiceBseModuleObserver',
				'<BseModule id="ServiceBus.ServiceHost.BseModule.PickupLogEntries">
  <Services>
    <Service name="ServiceBus.ServiceHost.BseModule.PickupLogEntries"/>
  </Services>
</BseModule>'
			)
		END
	--
	-- Ensure that fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	SET	@FragmentId = '{628BF3C5-E956-4DDE-A6D0-EA56E2A67FAB}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'BseModule.ServiceBus.ServiceHost.BseModule.PickupLogEntries'
			SET @Description = 'BseModule.ServiceBus.ServiceHost.BseModule.PickupLogEntries'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'BseModuleCatalog',
				'<BseModule id="ServiceBus.ServiceHost.BseModule.PickupLogEntries">
  <ResourceId>ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll</ResourceId>
  <TypeName>ServiceBus.ServiceHost.BseModule.PickupLogEntries</TypeName>
  <DisplayName>PickupLogEntries</DisplayName>
  <Category>BSE Modules</Category>
</BseModule>'
			)
		END
	--
	-- Ensure that fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added system bse modules and their observer data'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{C4CC6566-0E18-406A-A928-19F2B769DCF6}'
SET @ReferenceID = '40064'
SET @Author = 'Enes Pelko'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE	@DEFAULT_MACRO_ID uniqueidentifier
SET		@DEFAULT_MACRO_ID = '6C11CA6D-3402-4F1A-9754-41F82E227469'

DECLARE	@CONTEXT_MANAGER_FRAG_ID uniqueidentifier
SET		@CONTEXT_MANAGER_FRAG_ID = 'D7945F95-D22B-40C4-B6A7-13DD5F8DA636'


DECLARE @FragmentId uniqueidentifier

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
update 	Active_Fragments
set		Contents.modify('delete ContextManager/ContextGroups/BusinessContexts/Context [@name="BusinessContext"]/ContextFactoryData [@name="BusinessContextFactory"]/DefaultBusinessContext [@name="[DSCS:MACRO:BUSINESSCONTEXTS.DEFAULTBUSINESSCONTEXT]"]')	
where	ID = @CONTEXT_MANAGER_FRAG_ID


update	Active_Fragments
set		Contents.modify(	'insert text {"[DSCS:MACRO:BUSINESSCONTEXTS.DEFAULTBUSINESSCONTEXT]" }
							as first into (/ContextManager/ContextGroups/BusinessContexts/Context [@name="BusinessContext"]/ContextFactoryData [@name="BusinessContextFactory"])[1]
						')
		
EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Update Context Manager Fragment'
	COMMIT TRANSACTION
END

SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

update Active_GroupMacroValues 
set Value = '<BusinessContext name="DefaultBusinessContext">' + value + '</BusinessContext>'
where MacroId = @DEFAULT_MACRO_ID and RootGroupId = @ROOT_GROUP_ID

EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Update Macro value for Default business context'
	COMMIT TRANSACTION
END


SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
-- Create temporary table to hold service pool-business context pairs
CREATE TABLE #ServicePoolBusinessContexts40064
(
	ServicePool     varchar( max ),
	BusinessContext varchar( max ),
	IsRowProcessed  bit,
	FragmentId		uniqueidentifier
)

-- Create temporary table to hold service pool fragment identification info and contents
CREATE TABLE #ServicePools40064
(
	FragmentReplicationId int,
	FragmentName          varchar( 250 ),
	FragmentContents      xml
);

-- Prepare service pool-business context pairs
WITH BusinessContexts_CTE
AS
(
	SELECT	CAST( ServicePool.query( 'ServicePool' ) AS varchar( max ) ) AS ServicePool,
			RootXmlNode,
			Id as FragmentId
	FROM	Active_Fragments f
			CROSS APPLY
			f.Contents.nodes( '.' ) AS ServicePools( ServicePool )
	WHERE	f.RootGroupId = @ROOT_GROUP_ID
			AND
			f.RootXmlNode LIKE 'BusinessContexts/BusinessContext name="%"/ServicePools'
	UNION
	SELECT	CAST( ServicePool.query( '.' ) AS varchar( max ) ) AS ServicePool,
			RootXmlNode,
			Id as FragmentId
	FROM	Active_Fragments f
			CROSS APPLY
			f.Contents.nodes( 'ServicePools/ServicePool' ) AS ServicePools( ServicePool )
	WHERE	f.RootGroupId = @ROOT_GROUP_ID
			AND
			f.RootXmlNode LIKE 'BusinessContexts/BusinessContext name="%"'
)
INSERT INTO #ServicePoolBusinessContexts40064
(
	ServicePool,
	BusinessContext,
	IsRowProcessed,
	FragmentId
)
SELECT	CAST( ServicePool AS xml ).value( '(*/@name )[ 1 ]', 'varchar( max )' ) AS ServicePool,
		SUBSTRING
		(
			RootXmlNode,
			CHARINDEX( '"', RootXmlNode, 0 ) + 1,
			CHARINDEX( '"', RootXmlNode, CHARINDEX( '"', RootXmlNode, 0 ) + 1 ) - ( CHARINDEX( '"', RootXmlNode, 0 ) + 1 )
		) AS BusinessContext,
		0 AS IsRowProcessed,
		FragmentId
FROM	BusinessContexts_CTE
ORDER BY ServicePool, BusinessContext

--
-- Prepare service pool fragment identification info and contents
--
INSERT INTO #ServicePools40064
(
	FragmentReplicationId,
	FragmentName,
	FragmentContents
)
SELECT	ReplicationId,
		Name,
		Contents
FROM	Active_Fragments
WHERE	RootGroupId = @ROOT_GROUP_ID
		AND
		Name LIKE 'ServicePool.%'
		AND
		Name NOT LIKE 'ServicePool.%.Implementation'
		AND
		Name NOT LIKE 'ServicePool.%.Services'
		AND
		Name NOT LIKE 'ServicePool.%.ServiceEndpoints'

DECLARE @ServicePool            varchar( max )
DECLARE @BusinessContext        varchar( max )
DECLARE @BusinessContextElement xml

--
-- Process service pool-business context pairs
--
WHILE EXISTS( SELECT 1 FROM #ServicePoolBusinessContexts40064 WHERE IsRowProcessed = 0 )
BEGIN
	--
	-- Get next row
	--
	SELECT TOP 1
			@ServicePool     = ServicePool,
			@BusinessContext = BusinessContext
	FROM	#ServicePoolBusinessContexts40064
	WHERE	IsRowProcessed = 0
	ORDER BY ServicePool, BusinessContext
	
	--
	-- Mark row as processed
	--
	UPDATE	#ServicePoolBusinessContexts40064
	SET		IsRowProcessed = 1
	WHERE	ServicePool = @ServicePool
			AND
			BusinessContext = @BusinessContext
	
	--
	-- Ensure that ServicePool element has BusinessContexts element
	--
	UPDATE	#ServicePools40064
	SET		FragmentContents.modify
			(
				'insert element BusinessContexts { "" }
				 as last
				 into ( ServicePool )[ 1 ]'
			)
	WHERE	FragmentName = 'ServicePool.' + @ServicePool
			AND
			FragmentContents.exist( 'ServicePool' ) = 1
			AND
			FragmentContents.exist( 'ServicePool/BusinessContexts' ) = 0
	
	--
	-- Prepare BusinessContext element
	--
	SET		@BusinessContextElement = '<BusinessContext name="DefaultBusinessContext">' + @BusinessContext + '</BusinessContext>'

	--
	-- Ensure that ServicePool/BusinessContexts has BusinessContext element 
	-- having name attribute with value of @BusinessContext variable
	--
	UPDATE	#ServicePools40064
	SET		FragmentContents.modify
			(
				'insert sql:variable( "@BusinessContextElement" )
				 as last
				 into ( ServicePool/BusinessContexts )[ 1 ]'
			)
	WHERE	FragmentName = 'ServicePool.' + @ServicePool
			AND
			FragmentContents.exist( 'ServicePool/BusinessContexts' ) = 1
			AND
			FragmentContents.exist( 'ServicePool/BusinessContexts/BusinessContext[ text() = sql:variable( "@BusinessContext" ) ]' ) = 0
END

--
-- Use prepared updates to ServicePool fragments to update rows in fragments table
--
UPDATE	Active_Fragments
SET		Contents = sp.FragmentContents
FROM	#ServicePools40064 sp
WHERE	ReplicationId = sp.FragmentReplicationId

-- Delete Business context fragment group association
DELETE	Active_GroupFragments
WHERE	FragmentId in ( SELECT FragmentId from #ServicePoolBusinessContexts40064 )

-- Delete Business context fragments
DELETE	Active_Fragments
WHERE	Id in ( SELECT FragmentId from #ServicePoolBusinessContexts40064 )


--
-- Drop temporary tables
--
DROP TABLE #ServicePoolBusinessContexts40064
DROP TABLE #ServicePools40064

EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Update Service pool fragments'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @PreviousTrackingID = '{FAE17450-CACD-4D4A-A65B-2EFDB844309D}' -- 44080
SET @TrackingID = '{DD96EDFC-1EF3-4FA0-A47C-E91B6E6F5CC0}'
SET @ReferenceID = '44080'
SET @Author = 'Enes Pelko'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'
	
DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
--
-- Declare and initialize section ID constants resource fragment of ServiceBus.ServiceHost.Common.dll
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE @Name varchar( 250 )
DECLARE @Description varchar( 1024 )

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Add ServiceBus.Utility.Helpers.dll resource as dependency into resource fragment of:
--  1. ServiceBus.ServiceHost.Common.dll
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @DependencyName varchar(250)
	DECLARE @ResourceFragmentName varchar(250)
	
	SET		@DependencyName = 'ServiceBus.Utility.Helpers.dll'
	
	--
	-- Add ServiceBus.Utility.Helpers.dll resource as dependency into resource fragment of ServiceBus.ServiceHost.Common.dll
	--
	SET		@ResourceFragmentName = 'Resource.ServiceBus.ServiceHost.DSE.Common.dll'
	UPDATE	Active_Fragments
	SET		Contents.modify( 'insert element Resource { attribute name { sql:variable( "@DependencyName" ) } } 
							  as last
							  into ( /Resource/Dependencies )[ 1 ]' )
	WHERE	Name = @ResourceFragmentName
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			Contents.exist( '/Resource/Dependencies/Resource[ @name = sql:variable( "@DependencyName" ) ]' ) = 0
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added ServiceBus.Utility.Helpers.dll resource as dependency.'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{13372058-D4E3-4BEA-9A2B-1031011AAB31}'
SET @ReferenceID = '40384'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize package ID constants
--
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

DECLARE @SYSTEM_SERVICES_CORE_PACKAGE uniqueidentifier
SET		@SYSTEM_SERVICES_CORE_PACKAGE = '{890B5FCC-E4C5-4AC5-BFE8-D07A26668772}'

DECLARE @SYSTEM_SERVICES_LOGGING_PACKAGE uniqueidentifier
SET		@SYSTEM_SERVICES_LOGGING_PACKAGE = '{224F50F4-3FAA-477D-9363-399CEC83B2C5}'

DECLARE @SYSTEM_SERVICES_METERING_PACKAGE uniqueidentifier
SET		@SYSTEM_SERVICES_METERING_PACKAGE = '{4CE4102E-4243-4D56-9D2B-0EBEF4C3A326}'

DECLARE @SYSTEM_SERVICE_POOLS_PACKAGE uniqueidentifier
SET		@SYSTEM_SERVICE_POOLS_PACKAGE = '{4B83E58C-490F-47A7-9344-5F787903FDCC}'

--
-- Declare and initialize application and group ID constants
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @LOGGING_SERVICE_POOL_GROUP uniqueidentifier
SET		@LOGGING_SERVICE_POOL_GROUP = '{5EEC62C2-AE8F-49B2-8A38-D53ACEF39ED4}'

DECLARE @GENERIC_CLIENT uniqueidentifier
SET		@GENERIC_CLIENT = '{20019FA6-2FB3-4058-A3CA-8C422C436690}'

DECLARE @SERVICE_BUS_CLIENT uniqueidentifier
SET		@SERVICE_BUS_CLIENT = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
--
-- Declare and initialize section ID constants
--
DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4f38-B4ED-5C917010C756}'

DECLARE	@PUBSUB_CONFIGURATION uniqueidentifier
SET		@PUBSUB_CONFIGURATION = '{4C93E0C6-A9A6-46ec-81CD-4AAE4F3608BB}'

DECLARE @CONFIGURATION uniqueidentifier
SET		@CONFIGURATION = '{23D28783-F431-4dc9-83E5-14390D15686B}'

DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

DECLARE @APP_SETTINGS uniqueidentifier
SET		@APP_SETTINGS = '{6B76A284-E8F4-47ab-83FB-4C984BC4EE13}'

DECLARE @ADMINISTRATION_PROPERTIES_SETTINGS uniqueidentifier
SET		@ADMINISTRATION_PROPERTIES_SETTINGS = '{048560B6-CBF2-43ef-B5BB-1348ABDFDE94}'

DECLARE	@LOGGING uniqueidentifier
SET		@LOGGING = '{398F8990-F814-4e83-9EBC-B6AD9E1E8BB4}'

DECLARE @METERING uniqueidentifier
SET		@METERING = '{DE385948-E7CA-495b-B325-4BACC2C09C2D}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE @LOGGING_CONFIGURATION uniqueidentifier
SET		@LOGGING_CONFIGURATION = '{A7A2FFF9-616F-4bee-939B-EE6BE157BE63}'

--
-- Declare and initialize macro ID constants
--
DECLARE @APPPOOL_SERVER_NAME uniqueidentifier
SET		@APPPOOL_SERVER_NAME = '{E955E6D8-13FA-4194-932E-DB30A802E529}'

DECLARE @BSE_CLEAR_EXPIRED_RESULTS_START uniqueidentifier
SET		@BSE_CLEAR_EXPIRED_RESULTS_START = '{F45C4757-3947-4CEC-8E03-798B757CBDD0}'

DECLARE @BSE_LOGGING_CONTEXT_SUMMARY_START uniqueidentifier
SET		@BSE_LOGGING_CONTEXT_SUMMARY_START = '{1C812910-9997-418F-9AE2-5791073D023B}'

DECLARE @BUSINESS_CONTEXTS_DEFAULT_BUSINESS_CONTEXT uniqueidentifier
SET		@BUSINESS_CONTEXTS_DEFAULT_BUSINESS_CONTEXT = '{6C11CA6D-3402-4F1A-9754-41F82E227469}'

DECLARE @CONFIGURATION_POOL_ADDRESS uniqueidentifier
SET		@CONFIGURATION_POOL_ADDRESS = '{BBF951EF-97A9-4485-96C9-AC06EC7B6545}'

DECLARE @LOGGING_FILENAME_LISTENER uniqueidentifier
SET		@LOGGING_FILENAME_LISTENER = '{A9B6C965-F5BB-4132-9B33-D250EF19A702}'

DECLARE @LOGGING_FILETARGET_FOLDER uniqueidentifier
SET		@LOGGING_FILETARGET_FOLDER = '{509BEB93-6302-4a82-9AF4-B0D4449BE616}'

DECLARE	@LOGGING_LOG_LEVEL uniqueidentifier
SET		@LOGGING_LOG_LEVEL = '{FAEE35A6-5C2A-40CB-A74E-CC6C77F58069}'

DECLARE	@LOGGING_QUEUE uniqueidentifier
SET		@LOGGING_QUEUE = '{BB1137A9-AE9E-450A-9A17-35E7C9E1130E}'

DECLARE @PUBSUB_CONFIGURATION_WCF1_PORT uniqueidentifier
SET		@PUBSUB_CONFIGURATION_WCF1_PORT = '{1E64823A-B8AE-4f84-B895-17EF04703206}'

DECLARE @RESOURCECATALOG_SHARE_NAME uniqueidentifier
SET		@RESOURCECATALOG_SHARE_NAME = '{45119A9D-CB7B-4E40-97A3-45383E75D0FF}'

DECLARE @RESOURCECATALOG_SHARE_SERVER uniqueidentifier
SET		@RESOURCECATALOG_SHARE_SERVER = '{679F54C2-BE5A-4B5A-A493-7CCD3A9563AC}'

DECLARE @SERVICEHOST_PUBLISH_STATE uniqueidentifier
SET		@SERVICEHOST_PUBLISH_STATE = '{A11660AE-596E-4AD7-BBF9-CB253C9FF7C4}'

DECLARE @SP_LOGGING_ASYNC1_QUEUE_PATH uniqueidentifier
SET		@SP_LOGGING_ASYNC1_QUEUE_PATH = '{0034E8CB-A4BF-47EE-9E58-6D8151F4EFC1}'

DECLARE	@SP_LOGGING_LOCAL uniqueidentifier
SET		@SP_LOGGING_LOCAL = '{15AC2DFD-1679-432b-9DE7-9A16C9A8BB43}'

DECLARE	@SP_LOGGING_WCF1_PORT uniqueidentifier
SET		@SP_LOGGING_WCF1_PORT = '{057D7307-4A3F-4bdf-B3E9-0217D887ABB3}'

DECLARE	@SP_LOGGING_WCF2_PORT uniqueidentifier
SET		@SP_LOGGING_WCF2_PORT = '{BF88AF52-DF50-409b-9003-36BDBD6AE501}'

DECLARE @SP_SYSTEM_ASYNC1_QUEUE_PATH uniqueidentifier
SET		@SP_SYSTEM_ASYNC1_QUEUE_PATH = '{F11C6725-E22B-4CCE-9D11-C0A2F42E4744}'

DECLARE	@SP_SYSTEM_LOCAL uniqueidentifier
SET		@SP_SYSTEM_LOCAL = '{F1CB781D-6056-4599-9C6C-D802A84D96BA}'

DECLARE @SP_SYSTEM_WCF1_PORT uniqueidentifier
SET		@SP_SYSTEM_WCF1_PORT = '{94D5EEDE-EDB7-4995-AE17-BB93524AECD3}'

DECLARE @SP_SYSTEM_WCF2_PORT uniqueidentifier
SET		@SP_SYSTEM_WCF2_PORT = '{9C11E260-7989-41A1-B303-DCBAD3C22566}'

DECLARE @SP_SYSTEM_WCFSERVICEENDPOINT_PORT uniqueidentifier
SET		@SP_SYSTEM_WCFSERVICEENDPOINT_PORT = '{C3A721CC-BD1B-491D-9F2D-F60C92F99919}'

DECLARE @SQL_CONFIGURATION_STORE_CONNECTION_STRING uniqueidentifier
SET		@SQL_CONFIGURATION_STORE_CONNECTION_STRING = '{DD9B37CF-BF81-4059-ABEF-B2A58CD00E2B}'

DECLARE @SQL_LOGGING_STORE_CONNECTION_STRING uniqueidentifier
SET		@SQL_LOGGING_STORE_CONNECTION_STRING = '{3EFC03DA-A0EF-4A20-82EC-FFF55B49E248}'

DECLARE @SQL_METERING_STORE_CONNECTION_STRING uniqueidentifier
SET		@SQL_METERING_STORE_CONNECTION_STRING = '{85A9E8B5-F08B-482F-A918-F250D9CF7ADF}'

DECLARE @SQL_REQUEST_STORE_CONNECTION_STRING uniqueidentifier
SET		@SQL_REQUEST_STORE_CONNECTION_STRING = '{4A554902-F212-4E4A-9434-559FD556298D}'

DECLARE @PUBSUB_POOL_ADDRESS_MACRO uniqueidentifier
SET		@PUBSUB_POOL_ADDRESS_MACRO = '{94790F1D-A8E9-4AE7-969B-DC6CD698AAEE}'

DECLARE @Name varchar( 250 )
DECLARE @Description varchar( 1024 )

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- 1. Create System, System.Service.Core, System.Service.Logging, System.Service.Metering and System.ServicePools packages
-- 2. Create dependencies between created packages
-- 3. Assign configuration objects to created packages
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Create System package
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Packages WHERE Id = @SYSTEM_PACKAGE AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Packages
		(
			Id,
			RootGroupId,
			Name,
			[Description],
			[Version],
			[Type],
			ChangeSetId
		)
		VALUES
		(
			@SYSTEM_PACKAGE,
			@ROOT_GROUP_ID,
			'System',
			'Contains configuration objects necessary for successful Service Bus system start-up.',
			'3.3.0.5',
			0, -- Configuration Package
			0  -- Created during setup
		)
	
	--
	-- Create System.Services.Core package
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Packages WHERE Id = @SYSTEM_SERVICES_CORE_PACKAGE AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Packages
		(
			Id,
			RootGroupId,
			Name,
			[Description],
			[Version],
			[Type],
			ChangeSetId
		)
		VALUES
		(
			@SYSTEM_SERVICES_CORE_PACKAGE,
			@ROOT_GROUP_ID,
			'System.Services.Core',
			'Contains core System services.',
			'3.3.0.5',
			2, -- Services Package
			0  -- Created during setup
		)

	--
	-- Create System.Services.Logging package
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Packages WHERE Id = @SYSTEM_SERVICES_LOGGING_PACKAGE AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Packages
		(
			Id,
			RootGroupId,
			Name,
			[Description],
			[Version],
			[Type],
			ChangeSetId
		)
		VALUES
		(
			@SYSTEM_SERVICES_LOGGING_PACKAGE,
			@ROOT_GROUP_ID,
			'System.Services.Logging',
			'Contains Logging services.',
			'3.3.0.5',
			2, -- Services Package
			0  -- Created during setup
		)

	--
	-- Create System.Services.Metering package
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Packages WHERE Id = @SYSTEM_SERVICES_METERING_PACKAGE AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Packages
		(
			Id,
			RootGroupId,
			Name,
			[Description],
			[Version],
			[Type],
			ChangeSetId
		)
		VALUES
		(
			@SYSTEM_SERVICES_METERING_PACKAGE,
			@ROOT_GROUP_ID,
			'System.Services.Metering',
			'Contains Metering services.',
			'3.3.0.5',
			2, -- Services Package
			0  -- Created during setup
		)

	--
	-- Create System.ServicePools package
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Packages WHERE Id = @SYSTEM_SERVICE_POOLS_PACKAGE AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Packages
		(
			Id,
			RootGroupId,
			Name,
			[Description],
			[Version],
			[Type],
			ChangeSetId
		)
		VALUES
		(
			@SYSTEM_SERVICE_POOLS_PACKAGE,
			@ROOT_GROUP_ID,
			'System.ServicePools',
			'Contains System and Logging service pools.',
			'3.3.0.5',
			4, -- ServicePools Package
			0  -- Created during setup
		)

	--
	-- Create System.Services.Core -> System dependency
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @SYSTEM_SERVICES_CORE_PACKAGE AND DependencyId = @SYSTEM_PACKAGE ) )
		INSERT INTO Active_PackageDependencies
		(
			RootGroupId,
			PackageId,
			DependencyId,
			ChangeSetId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_SERVICES_CORE_PACKAGE,
			@SYSTEM_PACKAGE,
			0
		)

	--
	-- Create System.Services.Logging -> System dependency
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @SYSTEM_SERVICES_LOGGING_PACKAGE AND DependencyId = @SYSTEM_PACKAGE ) )
		INSERT INTO Active_PackageDependencies
		(
			RootGroupId,
			PackageId,
			DependencyId,
			ChangeSetId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_SERVICES_LOGGING_PACKAGE,
			@SYSTEM_PACKAGE,
			0
		)

	--
	-- Create System.Services.Metering -> System dependency
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @SYSTEM_SERVICES_METERING_PACKAGE AND DependencyId = @SYSTEM_PACKAGE ) )
		INSERT INTO Active_PackageDependencies
		(
			RootGroupId,
			PackageId,
			DependencyId,
			ChangeSetId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_SERVICES_METERING_PACKAGE,
			@SYSTEM_PACKAGE,
			0
		)

	--
	-- Create System.ServicePools -> System.Services.Core dependency
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @SYSTEM_SERVICE_POOLS_PACKAGE AND DependencyId = @SYSTEM_SERVICES_CORE_PACKAGE ) )
		INSERT INTO Active_PackageDependencies
		(
			RootGroupId,
			PackageId,
			DependencyId,
			ChangeSetId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_SERVICE_POOLS_PACKAGE,
			@SYSTEM_SERVICES_CORE_PACKAGE,
			0
		)

	--
	-- Create System.ServicePools -> System.Services.Metering dependency
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @SYSTEM_SERVICE_POOLS_PACKAGE AND DependencyId = @SYSTEM_SERVICES_LOGGING_PACKAGE ) )
		INSERT INTO Active_PackageDependencies
		(
			RootGroupId,
			PackageId,
			DependencyId,
			ChangeSetId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_SERVICE_POOLS_PACKAGE,
			@SYSTEM_SERVICES_LOGGING_PACKAGE,
			0
		)

	--
	-- Create System.ServicePools -> System.Services.Logging dependency
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @SYSTEM_SERVICE_POOLS_PACKAGE AND DependencyId = @SYSTEM_SERVICES_METERING_PACKAGE ) )
		INSERT INTO Active_PackageDependencies
		(
			RootGroupId,
			PackageId,
			DependencyId,
			ChangeSetId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_SERVICE_POOLS_PACKAGE,
			@SYSTEM_SERVICES_METERING_PACKAGE,
			0
		)

	--
	-- Ensure that ServicePool.Name attribute is part of System package.
	--
	UPDATE	Active_Attributes
	SET		PackageId = @SYSTEM_PACKAGE
	WHERE	Id = '{D300464A-F94B-44EE-AE84-5B5774EE47B8}' -- ServicePool.Name attribute
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @SYSTEM_PACKAGE

	--
	-- Ensure that following filters are part of System package:
	--   1. ServiceBus ServiceHost Service,
	--   2. ServiceBus Administrative Console,
	--   3. ServiceBus Configuration Service,
	--   4. ServiceBus RunTestCase,
	--   5. ServiceBus ServiceHost ServicePoolLoader,
	--   6. ServicePool.Logging and
	--   7. Generic Client.
	--
	UPDATE	Active_Filters
	SET		PackageId = @SYSTEM_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @SYSTEM_PACKAGE
			AND
			Id IN
			(
				'{B17064D7-CF47-49B7-B423-0DEC58987EED}', -- ServiceBus ServiceHost Service
				'{A674FA35-5CDC-48E3-939E-7B3C6BB11876}', -- ServiceBus Administrative Console
				'{6F7ECC31-E86F-42E8-B835-DC9D9C5A0A27}', -- ServiceBus Configuration Service
				'{27A1CF0E-D875-4B96-93A0-6F5A711CDA26}', -- ServiceBus RunTestCase
				'{1002C7EF-7E7E-4DF3-BC88-9D675DC0A518}', -- ServiceBus ServiceHost ServicePoolLoader
				'{96F40154-69B9-4101-9C9F-B975D8F29EC6}', -- ServicePool.Logging
				'{C6D8B411-7F66-4F07-9D57-B4F34DBBD0B7}'  -- Generic Client
			)

	--
	-- Ensure that following filter is part of System.ServicePools package:
	--   1. ServicePool.System
	--
	UPDATE	Active_Filters
	SET		PackageId = @SYSTEM_SERVICE_POOLS_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @SYSTEM_SERVICE_POOLS_PACKAGE
			AND
			Name = 'ServicePool.System'

	--
	-- Ensure that following macros are part of System package:
	--    1. APPPOOL.SERVER.NAME
	--    2. BSE.CLEAR.EXPIRED.RESULTS.START
	--    3. BSE.LOGGING.CONTEXT.SUMMARY.START
	--    4. BUSINESSCONTEXTS.DEFAULTBUSINESSCONTEXT
	--    5. CONFIGURATION.POOL.ADDRESS
	--    6. LOGGING.FILENAME.LISTENER
	--    7. LOGGING.FILETARGET.FOLDER
	--    8. LOGGING.LOGLEVEL
	--    9. LOGGING.MSMQTARGET.PATH
	--   10. PUBSUB.CONFIGURATION.WCF1.PORT
	--   11. RESOURCECATALOG.SHARE.NAME
	--   12. RESOURCECATALOG.SHARE.SERVER
	--   13. SERVICEHOST.PUBLISH.STATE
	--   14. SP.LOGGING.ASYNC1.QUEUE.PATH
	--   15. SP.LOGGING.LOCAL
	--   16. SP.LOGGING.WCF1.PORT
	--   17. SP.LOGGING.WCF2.PORT
	--   18. SP.SYSTEM.ASYNC1.QUEUE.PATH
	--   19. SP.SYSTEM.LOCAL
	--   20. SP.SYSTEM.WCF1.PORT
	--   21. SP.SYSTEM.WCF2.PORT
	--   22. SP.SYSTEM.WCFSERVICEENDPOINT.PORT
	--   23. SQL.CONFIGURATION.STORE.CONNECTION.STRING
	--   24. SQL.LOGGING.STORE.CONNECTION.STRING
	--   25. SQL.METERING.STORE.CONNECTION.STRING
	--   26. SQL.REQUEST.STORE.CONNECTION.STRING
	--   27. PUBSUB.POOL.ADDRESS
	--
	UPDATE	Active_Macros
	SET		PackageId = @SYSTEM_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @SYSTEM_PACKAGE
			AND Id IN
			(
				@APPPOOL_SERVER_NAME,
				@BSE_CLEAR_EXPIRED_RESULTS_START,
				@BSE_LOGGING_CONTEXT_SUMMARY_START,
				@BUSINESS_CONTEXTS_DEFAULT_BUSINESS_CONTEXT,
				@CONFIGURATION_POOL_ADDRESS,
				@LOGGING_FILENAME_LISTENER,
				@LOGGING_FILETARGET_FOLDER,
				@LOGGING_LOG_LEVEL,
				@LOGGING_QUEUE,
				@PUBSUB_CONFIGURATION_WCF1_PORT,
				@RESOURCECATALOG_SHARE_NAME,
				@RESOURCECATALOG_SHARE_SERVER,
				@SERVICEHOST_PUBLISH_STATE,
				@SP_LOGGING_ASYNC1_QUEUE_PATH,
				@SP_LOGGING_LOCAL,
				@SP_LOGGING_WCF1_PORT,
				@SP_LOGGING_WCF2_PORT,
				@SP_SYSTEM_ASYNC1_QUEUE_PATH,
				@SP_SYSTEM_LOCAL,
				@SP_SYSTEM_WCF1_PORT,
				@SP_SYSTEM_WCF2_PORT,
				@SP_SYSTEM_WCFSERVICEENDPOINT_PORT,
				@SQL_CONFIGURATION_STORE_CONNECTION_STRING,
				@SQL_LOGGING_STORE_CONNECTION_STRING,
				@SQL_METERING_STORE_CONNECTION_STRING,
				@SQL_REQUEST_STORE_CONNECTION_STRING,
				@PUBSUB_POOL_ADDRESS_MACRO
			)

	--
	-- Ensure that following groups are part of System package:
	--   1. <Environment Name>,
	--   2. ServiceBus Configuration Service,
	--   3. ServiceBus Administrative Console,
	--   4. ServiceBus ServiceHost Service,
	--   5. ServicePool.Logging,
	--   6. Generic Client and
	--   7. ServiceBus Client.
	--
	UPDATE	Active_Groups
	SET		PackageId = @SYSTEM_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @SYSTEM_PACKAGE
			AND Id IN
			(
				@ROOT_GROUP_ID,
				@CONFIGURATION_SERVICE,
				@ADMINISTRATIVE_CONSOLE,
				@SERVICEHOST_SERVICE,
				@LOGGING_SERVICE_POOL_GROUP,
				@GENERIC_CLIENT,
				@SERVICE_BUS_CLIENT
			)

	--
	-- Ensure that following group is part of System.ServicePools package:
	--   1. ServicePool.System
	--
	UPDATE	Active_Groups
	SET		PackageId = @SYSTEM_SERVICE_POOLS_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @SYSTEM_SERVICE_POOLS_PACKAGE
			AND
			Name = 'ServicePool.System'

	--
	-- Ensure that following sections are part of System package:
	--    1. appSettings,
	--    2. loggingConfiguration,
	--    3. PubSubConfiguration,
	--    4. ServiceBus.Administration.Configuration,
	--    5. ServiceBus.Administration.Properties.Settings,
	--    6. ServiceBus.Configuration,
	--    7. ServiceBus.Logging,
	--    8. ServiceBus.Metering,
	--    9. ServiceBus.ServiceHost and
	--   10. unityConfiguration.
	--
	UPDATE	Active_Sections
	SET		PackageId = @SYSTEM_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @SYSTEM_PACKAGE
			AND Id IN
			(
				@UNITY_CONFIGURATION,				-- unityConfiguration
				@PUBSUB_CONFIGURATION,				-- PubSubConfiguration
				@CONFIGURATION,						-- ServiceBus.Configuration
				@ADMINISTRATION_CONFIGURATION,		-- ServiceBus.Administration.Configuration
				@APP_SETTINGS,						-- appSettings
				@ADMINISTRATION_PROPERTIES_SETTINGS,-- ServiceBus.Administration.Properties.Settings
				@LOGGING,							-- ServiceBus.Logging
				@METERING,							-- ServiceBus.Metering
				@SERVICEHOST,						-- ServiceBus.ServiceHost
				@LOGGING_CONFIGURATION				-- loggingConfiguration
			)

	--
	-- Ensure that appropriate fragments from System sections are part of System package:
	--
	UPDATE	Active_Fragments
	SET		PackageId = @SYSTEM_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @SYSTEM_PACKAGE
			AND
			(
				--
				-- Fragment of ServiceBus.Administration.Properties.Settings section
				--
				(
					SectionId = @ADMINISTRATION_PROPERTIES_SETTINGS
					AND
					Id = '{22E1566A-3661-4644-9BCA-AF948069CBEE}'	-- ServiceBus.Administration.Properties.Settings.ModuleDirectory
				)
				OR
				--
				-- Fragments of ServiceBus.Configuration section
				--
				(
					SectionId = @CONFIGURATION
					AND
					Id IN
					(
						'{9A47540C-6E14-471E-B8C3-BB2F020F59D4}', -- Configuration.Plugins.ConfigurationPlugins
						'{7B979CE6-9E52-44AC-91A8-8376CDAF7322}', -- Configuration.Plugins.Shares
						'{D21BB9B7-5A33-4F6E-B4B3-583257590256}'  -- Configuration.SchemaVersion
					)
				)
				OR
				--
				-- Fragments of PubSubConfiguration section
				--
				(
					SectionId = @PUBSUB_CONFIGURATION
					AND
					Id IN
					(
						'{D4F33EB0-F6B1-494F-9F03-8DEEBF061FC8}',  -- Channel.General
						'{E2896FFA-5ABB-4FBB-99EF-6217A13E9CD5}' -- Topic.Any
					)
				)
				OR
				--
				-- Fragments of ServiceBus.Metering section
				--
				(
					SectionId = @METERING
					AND
					Id IN
					(
						'{5F35D4D2-2644-4900-BCD5-D1DEE87F4009}', -- Enabled
						'{60287C21-71B5-4FE4-9196-7571E71A9A70}', -- Factories
						'{4A53E4F5-FAF5-4DD2-9609-8C861895190D}', -- MeteringPoints
						'{B6F78D94-C8E9-48D7-9B4D-4A1168378C01}'  -- Targets
					)
				)
				OR
				--
				-- Fragments of appSettings section
				--
				(
					SectionId = @APP_SETTINGS
					AND
					Id IN
					(
						'{37E93F13-CCC9-4914-A43C-582446310D7F}', -- AppSettings.ConfigurationExplorer.DisplayContentSize
						'{0FA352E4-C674-404E-8A7B-9F0C6539C29B}', -- AppSettings.InitialModule
						'{2AC74BCB-67C0-4A7A-B220-96206042FCC0}', -- AppSettings.ServiceBus.Administration.ModuleSelector.HiddenModules
						'{F81881B6-CBFF-42BD-AD9B-B7B856ECAC0E}', -- AppSettings.ServiceBus.Administration.ServiceHostAdministration.UserResourceCatalogTemplate
						'{CE99339B-5E62-4300-988F-74F9B9D5D0E4}'  -- AppSettings.UseSplashScreen
					)
				)
				OR
				--
				-- Fragments of ServiceBus.Logging section
				--
				(
					SectionId = @LOGGING
					AND
					Id IN
					(
						'{5465EE3D-E08A-4053-B79B-62BCFDC577D2}', -- AC.Properties
						'{514B163C-D68C-4696-9DDC-59D878742BAE}', -- AC.Targets
						'{413FC7C6-71EE-4C15-BE07-243871D3D45F}', -- CL.Properties
						'{64B783FE-3D0D-486F-A37D-7805BD638502}', -- CL.Targets
						'{CC89E490-3435-4598-8CBE-16E4EA0770B9}', -- CS.Properties
						'{1F9EC59C-306B-4896-A54B-77E4035E4FD0}', -- CS.Targets
						'{AD22143F-914F-489E-9221-8DC14AF62A56}', -- SH.Properties
						'{2101CFAD-A213-47DA-B677-4B1D0DB779A4}'  -- SH.Targets
					)
				)
				OR
				--
				-- Fragments of loggingConfiguration section
				--
				(
					SectionId = @LOGGING_CONFIGURATION
					AND
					Id IN
					(
						'{DB3BA5A6-C993-41EB-A2EF-68423AE5DD42}', -- CategorySources
						'{AD05810A-757A-4E70-A937-3C46E2A79055}', -- Formatters
						'{A34E9763-E209-4468-B4EC-DFE0A9119893}', -- Listeners
						'{576EFDCD-8833-4B6B-ABD1-B80C1EB87227}', -- LogFilters
						'{5F924412-B136-48F5-BA35-87E667907FF7}'  -- SpecialSources
					)
				)
				OR
				--
				-- Fragments of unityConfiguration section
				--
				(
					SectionId = @UNITY_CONFIGURATION
					AND
					Id IN
					(
						'{3993A625-7CE6-4BE5-B7AE-206C3B5BA849}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.Administration.Security.IAuthenticationPlugin
						'{D324DD1F-77A4-422F-BBF4-F110F8AE10BA}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeCollectionFactory
						'{F2D86F6E-427B-4357-A845-ABCF27BFC0AD}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryAttributeFactory
						'{9C406AAD-FC20-4A17-A44E-AAF76877412F}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogEntryFactory
						'{4FA3B666-1953-429F-A8BC-B74F411FE98E}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILogging
						'{32FF66B2-EC37-40AC-AFAE-9F033AA6B570}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILoggingPersistenceProvider
						'{1D5B0989-C4D3-40D7-AE6E-D012345E46E2}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMetering
						'{D507E52D-C479-429C-B8AD-844206D75D81}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringContext
						'{8CD2573A-E22E-4721-B9EF-E4C4E754F28E}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.Metering.IMeteringStartStop
						'{8FEB4E78-4F94-48B6-B197-6D220080B2AC}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.PubSub.IPubSub
						'{428BA1A7-DF55-4044-A517-C0418500825B}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IArgumentHelpersFactory
						'{57F2D383-EF54-4B2F-A9A8-290FA7722793}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IPersistenceProviderManager
						'{049C4463-0756-44CB-8DE4-440CE1ADF8DE}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IPlatformErrorFactory
						'{4D07BB22-459A-4E39-AB52-AB980342E8C5}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceErrorFactory
						'{68094920-CE0E-4457-B6C9-43485BBBE464}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHost
						'{12489CDC-D82F-44E7-9432-8DB9EE945E7D}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceHostExceptionFactory
						'{C5D31042-58E6-415B-B086-AB01EC9AAC09}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRequestFactory
						'{BFC7ADE6-6BD8-43E7-B935-35828D317D39}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceResponseFactory
						'{D0132955-C23F-4992-9D8D-73F2C3D7B514}', -- UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRouteFactory
						'{FB9ECE1C-1303-4D86-B784-90D4ABAA9E28}', -- UnityConfiguration.TypeAliases.External
						'{B5473612-5815-486F-B19E-B3DB7F4C8C7C}'  -- UnityConfiguration.TypeAliases.Singleton
					)
					OR
					--
					-- Fragments of ServiceBus.Administration.Configuration section
					--
					(
						SectionId = @ADMINISTRATION_CONFIGURATION
						AND
						Id IN
						(
							'{A8F7F5B1-9E5A-4DDF-A41F-F662BC2D1E95}', -- AssembliesDirectory

							'{67F90970-65A8-4327-8F11-B89A8446EE37}', -- BseModule.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure
							'{628BF3C5-E956-4DDE-A6D0-EA56E2A67FAB}', -- BseModule.ServiceBus.ServiceHost.BseModule.PickupLogEntries

							'{13313F9E-3C4C-48AD-BDDB-6384C4A3ED72}', -- BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll
							'{4F587356-DD83-463B-A4D7-3EBE262F1F10}', -- BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll

							'{E0A41A37-C652-4721-9BE8-5FCF94C7E3B7}', -- ContractResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll
							'{B015F01D-3ED6-4A2D-96A6-5FDCE7E688C6}', -- ContractResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll
							'{5D2D4C08-F18E-4D20-A5F7-43491C51B5CB}', -- ContractResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll

							'{98EB1790-63FF-4121-A290-5286F5A722BD}', -- Controls
							'{ADF72DF7-265A-4398-A1BD-C851ED060400}', -- EditableConfigSections
							'{87B47C8D-7172-47C3-9780-E813E05FAEB9}', -- ObserverData
							
							'{F22A0E75-A65F-4387-A0C9-DDA731231A6E}', -- SBACSecurity.ApplicationCatalog
							'{E1E75954-E4FF-4F2E-897F-9147C4E32067}', -- SBACSecurity.BseModuleCatalog
							'{AF04F3C5-EEC0-4E06-96EA-F010B7EA62F9}', -- SBACSecurity.ChangesetAdministration
							'{37B7AAB8-DF45-4220-87CD-34FCE63FFF21}', -- SBACSecurity.ConfigurationExplorer
							'{31356D0B-AB34-449B-AD68-28C9D373FCCE}', -- SBACSecurity.ConfigurationGroupCatalog
							'{26733D97-0002-4351-91A8-69225BEC0079}', -- SBACSecurity.ContractResolver
							'{90C307D0-7EA3-43B3-87E0-CA567847B878}', -- SBACSecurity.DSEStepCatalog
							'{6C181822-87D5-42D8-B01D-A72D063F6DF6}', -- SBACSecurity.ExportConfiguration
							'{52BC3992-8FEF-47D0-89F4-F81CCE70F386}', -- SBACSecurity.FragmentCatalog
							'{D6BA0EE4-B23B-43E2-8295-E21090804ADD}', -- SBACSecurity.LogViewer
							'{FBFA8EE0-A1C0-4A29-AA81-7E2C37DFF73A}', -- SBACSecurity.MacroCatalog
							'{1F1B5583-571E-4192-A553-22DCC1E6054F}', -- SBACSecurity.MeteringViewer
							'{5252F7A7-F0C6-43EF-8DDF-FD66257FAEA3}', -- SBACSecurity.ModulesSecurity
							'{E8D48171-B5FA-4F1F-B12D-86554A12303E}', -- SBACSecurity.ResourceCatalog
							'{97DA2DDC-7411-4565-A3C1-62C4E4884945}', -- SBACSecurity.ServiceCatalog
							'{295DF852-C2E7-4A6A-936B-43D5AD618C84}', -- SBACSecurity.ServiceHostAdministration
							'{69FE4339-EAA4-4829-9192-A25DD14CCC45}', -- SBACSecurity.ServiceInvoke
							'{2D5D5DC7-A84E-4F82-949A-EF413C530320}', -- SBACSecurity.ServiceRequestExplorer
							'{911C55C9-8836-4C8A-938A-1EEFD4343745}', -- SBACSecurity.WWFActivityCatalog
							
							'{2167FDEC-1AA2-4969-AA2C-BFDFF84ED64D}', -- ServiceBseModuleObserver.BseModule.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure
							'{8776BEA6-5335-43C5-96BF-10EE179CCB56}', -- ServiceBseModuleObserver.BseModule.ServiceBus.ServiceHost.BseModule.PickupLogEntries

							'{32E92D4B-30F5-4FC6-93D1-8E2D6BD03C62}', -- ServiceBus.System.Fragments
							
							'{2C2D1EB0-F47E-47F9-93C3-07F89BB4D8D2}', -- ServiceStepObserver.Step.ServiceBus.Logging.GetPageStep
							'{A87DA9D7-A582-426B-A5DD-CB9B679641EA}', -- ServiceStepObserver.Step.ServiceBus.Logging.LogStep
							'{D200805E-BB9C-48AE-9750-43E6588908CA}', -- ServiceStepObserver.Step.ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep
							'{CA0EB906-9279-4E65-8633-5CA80EE7E813}', -- ServiceStepObserver.Step.ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep
							'{E9502E22-B813-4463-AB18-F20B03916C8A}', -- ServiceStepObserver.Step.ServiceBus.Metering.MeteringPointManagement.SaveStep
							'{6ADFD06A-BE6A-4127-9D12-DCA2EA5538C9}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DSE.InvokeServiceStep
							'{A26C2892-D71A-498F-BF16-E055AC870F6F}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DSE.ServiceInvokeStep
							'{8F25CF5F-0778-414E-BE2A-97DB58F8BDF5}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.BooleanExpression
							'{270C9FCD-E078-4640-A227-BD79D9EE4896}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.BytesToString
							'{A47DD34A-1D30-42F8-A8BB-1A084BDEA268}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation
							'{94E05292-E32F-495E-8994-18991624DF4B}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.LoadFileFromUri
							'{7116E072-3160-4AA8-9AB0-A28A1B743F1D}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.RegexMatch
							'{A7055FC1-93D7-4A0C-A530-226E767D233C}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.StringToBinary
							'{EEC95C06-B19D-445E-991F-D540A0AEC1D7}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.StringToXmlDoc
							'{02D0641C-74C2-423F-ACB6-37FF215AD481}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.StringToXmlSchema
							'{1EABDB1D-7D9E-4C39-A334-F8751259E6A4}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema
							'{0157E273-67B6-4228-8C5E-D4940D0492DB}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.WriteBytesToFile
							'{E3DBD4DE-E47C-4A1A-94EA-8F4921746445}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile
							'{D21861F1-44E7-40C2-AE52-1EAB9057E70C}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlAttributeValue
							'{67039810-CD66-4A8B-9A14-FD2DF23AA877}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlDocToString
							'{A7297BFC-9C17-4A8D-BBEF-66388C831BB9}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode
							'{84483FF1-32C7-4315-9934-B5125EE7A197}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlNodeName
							'{E5F21FFB-85AD-4F4A-968D-D74B5CCE38F4}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XmlNodeToString
							'{A6A38787-6FF3-4A31-9C9A-DBD3172744D0}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple
							'{DB456943-1E7C-49CD-BB6D-2D65495838B7}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.DseStep.XpathQuerySingle
							'{2422FD8B-610F-4A22-AB48-B5EAAB4CBE07}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep
							'{AC4B51AD-3CBA-48BC-A60F-6BE5CC5316AC}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep
							'{89DE6519-C8F3-4ABE-BD04-2BBC1FA702F8}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep
							'{91D79A2C-B6B7-412D-8439-C6868D3160F4}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep
							'{D4BBBB60-9BDD-4B6F-A4EA-85C4FD097CA1}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep
							'{931FC246-7D48-4FB3-BBA8-2BD7CBCA5D1E}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep
							'{1709E3FA-F0D3-45A7-A51C-348F0D0EA319}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep
							'{F8165980-1587-484B-942A-ED22350AD969}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep
							'{CDDCCC69-382B-427B-8BA0-9BFB2B4FB33A}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep
							'{4BF33037-BEE5-42D1-B67B-CBCB061918FF}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep
							'{2A11BF8F-58A5-421B-899C-B70D3360AC04}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.RouteByActionStep
							'{0B5FCE7B-7654-47A3-8AE0-374700775594}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.RequestManagement.SaveRequestStep
							'{84CD83BF-544F-4116-814B-92C4E08001F1}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep
							'{53B505F6-3098-46E3-AE8B-000341A3826E}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep
							'{57012014-E2C5-41AF-AFAB-7C161A0BC568}', -- ServiceStepObserver.Step.ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep
							
							'{CAD1B2D7-46F7-49BD-9DFD-06AA0045C1DB}', -- Step.ServiceBus.Logging.GetPageStep
							'{99092772-D0D9-47CB-BA98-A60B79BB2FFF}', -- Step.ServiceBus.Logging.LogStep
							'{CC02ED29-D330-4086-A715-3EFE7C62B79F}', -- Step.ServiceBus.Metering.MeteringPointManagement.GetFilteredMeteringPointListStep
							'{7E7544D0-754C-4784-9BD9-3A8FB0537BBF}', -- Step.ServiceBus.Metering.MeteringPointManagement.GetMeteringPointPublishedNameListStep
							'{D8C7AC39-F3DF-4B1D-9D04-B08081A40ECD}', -- Step.ServiceBus.Metering.MeteringPointManagement.SaveStep
							'{BFDC880F-F7FB-41D1-ABDA-D722C8B3D369}', -- Step.ServiceBus.ServiceHost.DSE.InvokeServiceStep
							'{006D6FED-3C2A-4064-9E0C-F758D35B19D7}', -- Step.ServiceBus.ServiceHost.DSE.ServiceInvokeStep
							'{2077BA87-D333-4998-AF7A-616A6FC91412}', -- Step.ServiceBus.ServiceHost.DseStep.BooleanExpression
							'{45383E4C-4CA6-4427-82C1-76C40B74AFE1}', -- Step.ServiceBus.ServiceHost.DseStep.BytesToString
							'{6A422823-1A3D-4369-8EAD-5EE5ED7474F1}', -- Step.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation
							'{5C564F94-70C0-4FD2-9CF6-344F20F6D991}', -- Step.ServiceBus.ServiceHost.DseStep.LoadFileFromUri
							'{696FDEA0-DEC2-4193-887A-64D3B08DBA4A}', -- Step.ServiceBus.ServiceHost.DseStep.RegexMatch
							'{837A0C53-6F1E-4685-B977-0F7A98203FA2}', -- Step.ServiceBus.ServiceHost.DseStep.StringToBinary
							'{B89D2C98-D9DD-4922-8246-F6ACB625B7CB}', -- Step.ServiceBus.ServiceHost.DseStep.StringToXmlDoc
							'{19B3AB47-5EF5-406F-8229-0F2BA32999AC}', -- Step.ServiceBus.ServiceHost.DseStep.StringToXmlSchema
							'{09AED055-05DB-4682-BC69-83986E5FD1F3}', -- Step.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema
							'{A90FC6AF-C1DD-42DB-ABB8-90B161FB7AF3}', -- Step.ServiceBus.ServiceHost.DseStep.WriteBytesToFile
							'{482584FE-7D95-4AD0-B812-B82A854187FF}', -- Step.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile
							'{842E3B79-02AD-4C38-B05F-9C9EA012A653}', -- Step.ServiceBus.ServiceHost.DseStep.XmlAttributeValue
							'{BD4472FB-73D9-45F7-90C5-82F8F5B2CF20}', -- Step.ServiceBus.ServiceHost.DseStep.XmlDocToString
							'{25627847-E937-4D70-9E42-A67242C67D49}', -- Step.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode
							'{D5D5D14E-DCC7-4642-9B3A-6BCB36371245}', -- Step.ServiceBus.ServiceHost.DseStep.XmlNodeName
							'{A4B577A6-5358-4F7C-B60C-2075A1D03138}', -- Step.ServiceBus.ServiceHost.DseStep.XmlNodeToString
							'{209C8444-0DCE-4163-A30F-47EDC470DAD1}', -- Step.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple
							'{E732AEA8-CEF9-431A-B191-DF1B96712237}', -- Step.ServiceBus.ServiceHost.DseStep.XpathQuerySingle
							'{E11EFE08-143E-4C73-BCA8-64B8865EDC14}', -- Step.ServiceBus.ServiceHost.RequestManagement.DeleteFailedRequestsStep
							'{E5B1C7AE-9C80-41D0-9CA4-89A935F2E219}', -- Step.ServiceBus.ServiceHost.RequestManagement.DeleteRequestByIdStep
							'{73EEAB78-78CA-4774-81F4-124492866B5B}', -- Step.ServiceBus.ServiceHost.RequestManagement.GetCheckpointByIdStep
							'{C320B128-BD03-4D25-B709-C147688D79D1}', -- Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationListStep
							'{A8D3702F-E141-4666-816A-CC0B76B65E9D}', -- Step.ServiceBus.ServiceHost.RequestManagement.GetFailedRequestsCategorizationSummaryStep
							'{2AA4E116-6ECF-4190-92B6-E196E6B923B3}', -- Step.ServiceBus.ServiceHost.RequestManagement.GetLastMatchingCheckpointIdStep
							'{1D60F70D-8088-4C62-9C34-064A5AB8E5C7}', -- Step.ServiceBus.ServiceHost.RequestManagement.GetRequestByIdStep
							'{5E915E38-AA89-46D8-935C-02878521F5CF}', -- Step.ServiceBus.ServiceHost.RequestManagement.GetRequestIdStep
							'{49608832-A498-43EE-8C94-295953ABFCB9}', -- Step.ServiceBus.ServiceHost.RequestManagement.InvokeServiceStep
							'{AB0EDC37-72A6-457C-8582-AF4FB0873E6F}', -- Step.ServiceBus.ServiceHost.RequestManagement.PrepareRequestStep
							'{ACC3D4FF-3B93-4D61-A3D6-FF2FCD70E901}', -- Step.ServiceBus.ServiceHost.RequestManagement.RouteByActionStep
							'{FE40EAEF-B861-4346-96E8-3FF802615399}', -- Step.ServiceBus.ServiceHost.RequestManagement.SaveRequestStep
							'{E049C7E9-7475-462A-881E-2453103C7C2C}', -- Step.ServiceBus.ServiceHost.ResourceManagement.DeleteResourceByIdStep
							'{3DD76BD1-035F-451B-B1F5-095E078C5DDB}', -- Step.ServiceBus.ServiceHost.ResourceManagement.GetResourceByIdStep
							'{B16D8194-C78A-40E8-8CED-FDFC0C7615FA}', -- Step.ServiceBus.ServiceHost.ResourceManagement.SaveResourceStep
							
							'{E5CA5C41-BEBF-42B9-84F8-ADDEE38BCC35}', -- StepCatalog
							
							'{2F4E2FB6-DBCC-4B7C-B04A-87CAEB9083DD}', -- StepResourceObserver.Resource.Interop.MSMQ.dll
							'{B9386ADE-7584-4517-B44C-5A54DBD1F167}', -- StepResourceObserver.Resource.Microsoft.Ccr.Core.dll
							'{9CABCBAA-5A1F-4C21-ACAC-A26CACC1FEC2}', -- StepResourceObserver.Resource.Microsoft.Practices.EnterpriseLibrary.Common.dll
							'{00ACE0CB-1DAB-4C22-ACA7-28935EA7077F}', -- StepResourceObserver.Resource.Microsoft.Practices.EnterpriseLibrary.Logging.dll
							'{9E76352D-912B-4D96-A2DC-13C0B535F78D}', -- StepResourceObserver.Resource.Microsoft.Practices.Unity.Configuration.dll
							'{799102AE-39C9-4963-917F-65583FE7EE4B}', -- StepResourceObserver.Resource.Microsoft.Practices.Unity.dll
							'{0755C458-0053-4D08-9214-4B898E45BD4C}', -- StepResourceObserver.Resource.ServiceBus.Configuration.Client.dll
							'{50619F25-3DCC-4202-9061-8C804AB7D4A1}', -- StepResourceObserver.Resource.ServiceBus.Configuration.Common.dll
							'{0A665C24-D762-4721-8DDA-931AA50D41A3}', -- StepResourceObserver.Resource.ServiceBus.Logging.Common.dll
							'{9601C373-DC22-4745-9B65-D1E16637AD96}', -- StepResourceObserver.Resource.ServiceBus.Logging.Interfaces.dll
							'{4840CEA0-7FDB-4AED-A4FF-9565A89B970E}', -- StepResourceObserver.Resource.ServiceBus.Logging.LoggingManagement.dll
							'{F7893FAB-BCA0-4E56-A82F-A3023D32924C}', -- StepResourceObserver.Resource.ServiceBus.Logging.LogStep.dll
							'{725ADE62-8DFC-4704-80AE-98FFF9773D41}', -- StepResourceObserver.Resource.ServiceBus.Logging.PersistenceProviders.LogEntry.dll
							'{EADD8DBE-C0CB-436C-B6CA-1CF27386E8AF}', -- StepResourceObserver.Resource.ServiceBus.Logging.Targets.BlackHole.dll
							'{6946C03A-A4DD-4326-AD10-C17538745068}', -- StepResourceObserver.Resource.ServiceBus.Logging.Targets.Database.dll
							'{5E7D3B0F-F7C7-428F-BD97-2ABC1A69AFF9}', -- StepResourceObserver.Resource.ServiceBus.Logging.Targets.File.dll
							'{C0FEB050-2FEE-4D77-8AD2-3248E9CDF09A}', -- StepResourceObserver.Resource.ServiceBus.Logging.Targets.MSMQ.dll
							'{F843F415-CF5B-47AF-927A-79265FB97ADF}', -- StepResourceObserver.Resource.ServiceBus.Metering.Common.dll
							'{8C830E50-BEEB-472C-ADEC-3008104FB3AA}', -- StepResourceObserver.Resource.ServiceBus.Metering.Interfaces.dll
							'{BC3BF2B0-F3A4-4071-A864-D65FD3A8ECD2}', -- StepResourceObserver.Resource.ServiceBus.Metering.MeteringPointManagement.dll
							'{B04336AA-D621-4C0A-9303-90EB61659D73}', -- StepResourceObserver.Resource.ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll
							'{01B0970C-6ED3-4AC0-B742-DEA855C3410A}', -- StepResourceObserver.Resource.ServiceBus.Metering.Targets.Logging.dll
							'{F5F35C28-9205-4A87-A7EC-E5E8A77191D2}', -- StepResourceObserver.Resource.ServiceBus.Metering.Targets.ServiceHost.dll
							'{6C0B3E56-D969-41C0-A8D8-3A81B8E96C5F}', -- StepResourceObserver.Resource.ServiceBus.PubSub.Common.dll
							'{CF39576A-92D1-4E11-91A1-A5D685E22A8F}', -- StepResourceObserver.Resource.ServiceBus.PubSub.Interfaces.dll
							'{A0B7CE48-825F-4326-ABF8-C2EC8307212E}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.BSE.Common.dll
							'{951FF38D-A7A1-433B-A0CA-2C537D1834CA}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.BSE.Interfaces.dll
							'{DE7C97EE-E530-4EEA-821A-F4BC526D0A10}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll
							'{19D7297C-D98C-49D6-B33A-6B27262B2210}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.Common.dll
							'{01F1D24E-AC27-4F62-B0E2-F524AFACB2FF}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.BusinessContext.dll
							'{288C59D5-06C5-4FAA-B379-BE61FC1FD205}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll
							'{4FEB7E70-85A7-4184-9416-87FADEBB0AD8}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.LoggingContext.dll
							'{F58CC9E3-437C-4467-B47C-789936C24B54}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.Contexts.MeteringContext.dll
							'{B02A06C0-9A8F-49D7-A5EE-3244E7539E1C}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DSE.Common.dll
							'{BFDF94E9-8B7F-4F19-9553-1532C0FE5369}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DSE.Interfaces.dll
							'{7D5F41D2-4955-4FB9-8D36-3954DD4E2680}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.BooleanExpression.dll
							'{4AADBEE8-2C76-4464-B0D3-FAFDBBF48BAB}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.BytesToString.dll
							'{68A36169-784C-4C34-9156-594F9028E062}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll
							'{900F3CBD-D7D0-44F7-9054-051179F31905}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll
							'{BE056DE9-146C-42E7-B5BB-343FB5310F9C}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.RegexMatch.dll
							'{4EA2222B-1C0D-4F51-939A-CCC7E012F203}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.StringToBinary.dll
							'{DA6AD19B-D0D3-4FEF-BD34-1A92D8C03449}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll
							'{69C82D3F-2170-4D39-B71A-FC2D8139A457}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll
							'{7AD763A2-E793-4E51-861C-083048194C9F}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll
							'{9401BBA1-0DC7-452B-8BC7-868197355460}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll
							'{FA62B826-C40C-4D96-A210-89EA87811D5B}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll
							'{F00A2F84-5B30-41C1-B157-64F25D227789}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll
							'{5617E8A8-AA6B-4A92-8131-B3E21AC2C579}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlDocToString.dll
							'{9B505F6E-D5A9-4DBC-8DF6-AA4458580C3B}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll
							'{3E7D4DC8-239A-4D26-BB69-990626C69447}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlNodeName.dll
							'{810EEB50-198B-43DA-B21A-BFB88848155F}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll
							'{0F566272-DA13-473E-98B1-810E48AB1F42}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll
							'{2427B96D-C7CE-4285-B6A7-F1C89FEFB31F}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll
							'{35FE1CB4-7B38-4F10-ACA6-4086F277AAD5}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.Interfaces.dll
							'{8690438C-397E-4B26-8D03-927C610876D7}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.PersistenceProviders.Request.dll
							'{71CFD4A2-3312-4938-B5EF-7AFC6F7C2FE8}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestChannels.Remoting.dll
							'{983813BC-CA2A-4572-8390-A18A09DD56C7}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestChannels.Wcf.dll
							'{35738368-C1F4-459C-A0DC-1C81C15DDFF9}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll
							'{D09FBE9D-C3DA-4D68-8D05-947A73C8A524}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestClassifiers.Random.dll
							'{D660A5A8-CBA1-4E05-B258-4C4F0BB6C93A}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll
							'{B4302E78-2236-41D6-8F04-34F845FADD9D}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestManagement.dll
							'{A44013E8-E76A-44A1-B352-EB60614F5E7C}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll
							'{9BAA847C-B166-42A7-82A2-BBF31BCBB3BE}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll
							'{FFA1165F-BA17-4015-9C8D-05EA3301BF42}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll
							'{6271D874-851D-49C2-B529-A84F17897ED7}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.ResourceManagement.dll
							'{33625001-8C68-4230-BF6E-5B30FC58319C}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe
							'{6A18017E-A93A-44E9-B07D-A834CC6AD33A}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll
							'{15D608FF-3590-4DB6-AC40-6FFEAA7538E1}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.Watchdogs.Watchdog.dll
							'{1D0AD783-0641-4504-BFBF-37FFD69AABD4}', -- StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll
							'{2EF2992F-4A60-477A-AE0E-66D1B2F5A668}', -- StepResourceObserver.Resource.ServiceBus.Utility.Assembly.dll
							'{96648CED-2762-4D8F-8193-622062E87527}', -- StepResourceObserver.Resource.ServiceBus.Utility.Cache.dll
							'{E1F8EAF4-1E6B-429D-85BE-7DF5A4455F89}', -- StepResourceObserver.Resource.ServiceBus.Utility.Configuration.dll
							'{7D5D0DCE-EFBB-43DA-9C9C-6140BC06B404}', -- StepResourceObserver.Resource.ServiceBus.Utility.Database.dll
							'{3E8014ED-E759-4E44-899E-C96331207021}', -- StepResourceObserver.Resource.ServiceBus.Utility.Logging.dll
							'{AE9DE5B1-B468-4003-BEDC-40865BED8AA8}', -- StepResourceObserver.Resource.ServiceBus.Utility.Sharing.dll
							'{39BE0CB5-17F1-4649-8EC7-53FC8A76441E}', -- StepResourceObserver.Resource.ServiceBus.Utility.Timer.dll
							'{6DAD13E6-98BB-4160-B653-28D329114E8A}', -- StepResourceObserver.Resource.ServiceBus.Utility.Unity.dll
							
							'{F8149F3C-23F7-4C1A-9572-83E84C8ED9F8}', -- WwfActivity.ServiceBus.ServiceHost.WwfActivity.InvokeServiceBusService
							'{6B406BB0-FF82-46A3-A3CF-7759929153AB}'  -- WwfActivityResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll
						)
					)
					OR
					--
					-- Fragments of ServiceBus.ServiceHost section
					--
					(
						SectionId = @SERVICEHOST
						AND
						Id IN
						(
							'{235230CB-5248-4591-82FE-5E2585828F31}', -- AsyncServiceInvocationTimeout
							
							'{ADE0EE22-768F-4B31-9354-D57212D30361}', -- BusinessContext.ServicePool.Logging
							'{C289229A-61F6-4235-BB1E-0DFFF5461325}', -- BusinessContext.ServicePool.System
							
							'{15F84726-8F40-43D9-96A8-CB62A0A74BA4}', -- Caching
							'{D7945F95-D22B-40C4-B6A7-13DD5F8DA636}', -- ContextManager
							'{8DBF8AF6-DEA0-444E-9199-181C9AA9845F}', -- Contracts
							'{33FEC1DD-4119-4C95-A8F1-B684ABE6822B}', -- Databases
							
							'{42D5CCBF-D350-47BB-AF79-F93D20C5A9C1}', -- Factory.ContextFactory.BusinessContextFactory
							'{843F3A4E-D2A9-47E0-BCC5-AA33ADC1119F}', -- Factory.ContextFactory.LoggingContextFactory
							'{85D161BE-03FC-475B-A945-1FE946813940}', -- Factory.ContextFactory.MeteringContextFactory
							'{D769BCA7-3B56-44D4-B571-BE4E5D34AB67}', -- Factory.ContextFactory.SecurityContextFactory
							'{7940B1BD-C4B6-4A72-83A2-56F0E99DBD35}', -- Factory.ContextFactory.ServiceCallerContextFactory
							'{16128C34-BAFD-4825-9563-8F7E9E6B9B14}', -- Factory.PersistenceProviderFactory.LoggingPersistenceProviderFactory
							'{90EF3ACC-31AF-401F-8A3D-83D1D6344180}', -- Factory.PersistenceProviderFactory.MeteringPointPersistenceProviderFactory
							'{D1B00EE9-6D9B-4B71-8BC6-18CE798F2853}', -- Factory.PersistenceProviderFactory.PersistenceProviderFactory
							'{F8E44628-3F44-4744-B86B-D45CB2A0B6AC}', -- Factory.RequestChannelFactory.Remoting
							'{17082DE9-49C3-486D-9D86-0D2451C93567}', -- Factory.RequestChannelFactory.WCF
							'{0F32AD5E-E7A2-4494-A95A-988E570AD591}', -- Factory.RequestClassifierFactory.CSharpClassifier
							'{FD8DE2D7-9B57-4400-B3F2-9A37188FC837}', -- Factory.RequestClassifierFactory.RandomClassifier
							'{42D2F6BD-CB99-49D4-BAC7-7A9912E56705}', -- Factory.RequestClassifierFactory.SingleQueueClassifier
							'{E5A1ED7B-F8E0-4038-BF4F-FD1FA349D612}', -- Factory.RequestQueueFactory.Msmq
							'{E6EA2B3C-C0CE-49D7-99B9-6D6C8B61744A}', -- Factory.RequestQueueFactory.PassThrough
							'{2A8AAFE4-6787-4E60-A99A-7D24141DB619}', -- Factory.RequestSchedulerFactory.ThreadPool
							'{D932FB35-809C-45AE-AE9C-70306FE0478D}', -- Factory.ServiceEndpointFactory.Wcf
							'{6F31D6A3-B02B-49F3-BCD6-057E9A07F8D0}', -- Factory.ServiceFactory.BSE
							'{AC9201CE-DA67-4CDD-8613-852276D8B0C8}', -- Factory.ServiceFactory.DSE
							'{C00F7C57-127C-46F0-BF30-0DF77337FCFD}', -- Factory.ServiceFactory.WWF
							'{BB7B982F-8E19-4383-B1F3-1076B217C203}', -- Factory.ServiceSynchronizationFactory.SingleThreadedService
							'{39371D4D-68AD-451E-93CE-0F23E9AF1953}', -- Factory.WatchdogFactory.WDF

							'{E2D12736-565C-4A3E-8FB6-7ED948D9F9E2}', -- Logging
							'{1F2C6DA7-3669-463E-A76A-2AA804D5847C}', -- PersistenceProviders
							'{778BFB3B-3513-4A44-A906-C479528BEE9E}', -- PubSubSubscriptionInactivityTimeout
							
							'{6B9A1B96-731C-4C0E-8839-8AB9A4833673}', -- Resource.Interop.MSMQ.dll
							'{0FE3ED46-1B9E-4805-856A-E801AEF4F330}', -- Resource.Microsoft.Ccr.Core.dll
							'{E3F1B36C-C74C-4AF0-853D-461D19492C36}', -- Resource.Microsoft.Practices.EnterpriseLibrary.Common.dll
							'{69A16C4F-8C04-4D5F-B8FA-8F9CD5C94020}', -- Resource.Microsoft.Practices.EnterpriseLibrary.Logging.dll
							'{4182C947-E8B2-4208-95E0-0BDD00250DB6}', -- Resource.Microsoft.Practices.ServiceLocation.dll
							'{F9EAF395-52A4-46B2-973F-007C67C66BC6}', -- Resource.Microsoft.Practices.Unity.Configuration.dll
							'{512B71E4-CD36-4A65-B930-44C7C689D35C}', -- Resource.Microsoft.Practices.Unity.dll
							'{3BB71F36-403A-47AB-AA39-94193CA59BAD}', -- Resource.ServiceBus.Configuration.Client.dll
							'{8B1D121F-CA75-4652-9DB2-23542F19D893}', -- Resource.ServiceBus.Configuration.Common.dll
							'{DC9126EA-831D-493A-B5EF-AD13E324EA36}', -- Resource.ServiceBus.Logging.Common.dll
							'{C0491DF2-62AB-464E-AC33-AEA29F6CBAE6}', -- Resource.ServiceBus.Logging.config
							'{2FC9175A-ECD4-4634-A9CE-8935E52156EF}', -- Resource.ServiceBus.Logging.Interfaces.dll
							'{0189C1D7-0EC0-4CEF-B98E-06BB0199C2EC}', -- Resource.ServiceBus.Logging.LoggingManagement.dll
							'{C303C9BC-019D-4416-A06E-7CCEC471E2FC}', -- Resource.ServiceBus.Logging.LogStep.dll
							'{736F4108-955C-46F6-914C-ADC942FB6015}', -- Resource.ServiceBus.Logging.PersistenceProviders.LogEntry.dll
							'{BD153046-670E-4971-89FE-0FE7AC0816BE}', -- Resource.ServiceBus.Logging.Targets.BlackHole.dll
							'{F5043A70-B090-465C-ADEB-B051EA0075CD}', -- Resource.ServiceBus.Logging.Targets.Database.dll
							'{1327D973-F839-4FF3-825A-90D3C429D236}', -- Resource.ServiceBus.Logging.Targets.File.dll
							'{3B6B31C1-165A-4C61-933D-B94188639BCA}', -- Resource.ServiceBus.Logging.Targets.MSMQ.dll
							'{06AA48E9-B4E9-4228-95CE-8D725D1B81E0}', -- Resource.ServiceBus.Metering.Common.dll
							'{4A39F686-592D-4989-9163-06EEBEAF6A3B}', -- Resource.ServiceBus.Metering.config
							'{CECBDF38-3662-41E2-83C7-3DE991D875F4}', -- Resource.ServiceBus.Metering.Interfaces.dll
							'{99DF21CB-7327-4B6E-9347-49F361F58B8F}', -- Resource.ServiceBus.Metering.MeteringPointManagement.dll
							'{64F91A56-84E5-4A04-8276-45E0B343A7DC}', -- Resource.ServiceBus.Metering.PersistenceProviders.MeteringPointValue.dll
							'{646223D8-4AA9-4D8E-8A09-645E07715FD8}', -- Resource.ServiceBus.Metering.Targets.Logging.dll
							'{33F0D1F8-104C-4EB4-966A-C6ED003373CC}', -- Resource.ServiceBus.Metering.Targets.ServiceHost.dll
							'{0C265D21-4CDC-4195-8380-2F749FDBD3C9}', -- Resource.ServiceBus.PubSub.Common.dll
							'{9B962060-0984-462F-AC76-DE055FBBFEFC}', -- Resource.ServiceBus.PubSub.config
							'{20C165E6-4C46-4889-BF31-2C7F05F52A56}', -- Resource.ServiceBus.PubSub.Interfaces.dll
							'{1C6BDB88-CEB6-4E42-9D48-27FC21B15F06}', -- Resource.ServiceBus.ServiceHost.BSE.Common.dll
							'{1CCF74AB-F28B-4758-B221-10AD9D494B41}', -- Resource.ServiceBus.ServiceHost.BSE.Interfaces.dll
							'{17BA1A7B-2413-434B-A690-38216B3E0A39}', -- Resource.ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll
							'{715F9267-D09D-4642-8EE9-E4D9429643E0}', -- Resource.ServiceBus.ServiceHost.BseModule.PickupLogEntries.dll
							'{3C97C2AF-8143-4DB5-833A-4505732D729B}', -- Resource.ServiceBus.ServiceHost.Common.dll
							'{EBEB4CA7-F23F-4AF8-BB2C-2A9357A73CF6}', -- Resource.ServiceBus.ServiceHost.config
							'{F97742D4-1F01-482D-8A2D-A5858DEA479F}', -- Resource.ServiceBus.ServiceHost.Contexts.BusinessContext.dll
							'{FD23D216-21FE-48EA-9365-21000A790FC1}', -- Resource.ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll
							'{C47E8D83-E863-408C-A2D4-0B81DE3F4128}', -- Resource.ServiceBus.ServiceHost.Contexts.LoggingContext.dll
							'{A48DEEE1-AA80-4A6A-AEBF-D8A001AAE3DC}', -- Resource.ServiceBus.ServiceHost.Contexts.MeteringContext.dll
							'{6FECF978-2EBC-4B21-AC3A-6CFEA87C4D9E}', -- Resource.ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll
							'{221A4740-90FF-44A6-BE87-AB4EF08403FC}', -- Resource.ServiceBus.ServiceHost.DSE.Common.dll
							'{4B59943F-DDE1-4567-BBED-5E0780DE862A}', -- Resource.ServiceBus.ServiceHost.DSE.Interfaces.dll
							'{73711DE5-FB38-4FFA-8A3F-EE43FE08828D}', -- Resource.ServiceBus.ServiceHost.DseStep.BooleanExpression.dll
							'{C5445E57-2950-42D5-972D-CA12540EBFD4}', -- Resource.ServiceBus.ServiceHost.DseStep.BytesToString.dll
							'{B8D202EC-F394-4C93-AB40-80C0AD6D1EF3}', -- Resource.ServiceBus.ServiceHost.DseStep.ExpressionEvaluation.dll
							'{1C58E3D6-52D3-49C4-A03F-1D269466B90B}', -- Resource.ServiceBus.ServiceHost.DseStep.LoadFileFromUri.dll
							'{47B5C0FA-B685-4956-9394-F837BCB09A17}', -- Resource.ServiceBus.ServiceHost.DseStep.RegexMatch.dll
							'{A26442C5-FD8A-45B6-AAFE-FF11575383DE}', -- Resource.ServiceBus.ServiceHost.DseStep.StringToBinary.dll
							'{065DF6DD-E9FC-4C58-B73B-F6738ADB3422}', -- Resource.ServiceBus.ServiceHost.DseStep.StringToXmlDoc.dll
							'{E70B9CBD-72D1-4B08-9AEE-A28F1CA4E202}', -- Resource.ServiceBus.ServiceHost.DseStep.StringToXmlSchema.dll
							'{11645079-CB88-4861-A5EF-99AD28CC3FAA}', -- Resource.ServiceBus.ServiceHost.DseStep.ValidateXmlSchema.dll
							'{D8A35B7B-B2A6-414C-B948-E180CA7FDC4D}', -- Resource.ServiceBus.ServiceHost.DseStep.WriteBytesToFile.dll
							'{D2B365C7-5415-4B26-8805-AB3F80E637FE}', -- Resource.ServiceBus.ServiceHost.DseStep.WriteDictionaryToFile.dll
							'{B744FEFE-0A2D-44C5-B7D2-F20E240F1C42}', -- Resource.ServiceBus.ServiceHost.DseStep.XmlAttributeValue.dll
							'{E584B2C0-53AD-4871-AC53-147F291E7DEA}', -- Resource.ServiceBus.ServiceHost.DseStep.XmlDocToString.dll
							'{9752FCAA-B968-42AB-AD22-CFEDFA112105}', -- Resource.ServiceBus.ServiceHost.DseStep.XmlDocToXmlNode.dll
							'{79F647E5-21BB-42BA-A934-EED45A5B29EE}', -- Resource.ServiceBus.ServiceHost.DseStep.XmlNodeName.dll
							'{B2D4C0DE-EDAE-491B-B754-CFCA220F6368}', -- Resource.ServiceBus.ServiceHost.DseStep.XmlNodeToString.dll
							'{F00317FA-6893-4E18-B445-AE5F2E8B356B}', -- Resource.ServiceBus.ServiceHost.DseStep.XpathQueryMultiple.dll
							'{622FA166-A070-4393-8D28-712B81DCD434}', -- Resource.ServiceBus.ServiceHost.DseStep.XpathQuerySingle.dll
							'{BA5A2ED5-5E8F-47B3-9A2C-60CB2D3E67D3}', -- Resource.ServiceBus.ServiceHost.Interfaces.dll
							'{8CC270A0-1256-4880-AE98-59253EB81238}', -- Resource.ServiceBus.ServiceHost.PersistenceProviders.Request.dll
							'{3FD5C274-8F83-4DC7-92DF-3D2EA7073B06}', -- Resource.ServiceBus.ServiceHost.RequestChannels.Remoting.dll
							'{4283AAD5-2E47-4E46-ACB2-25C4C6206CC9}', -- Resource.ServiceBus.ServiceHost.RequestChannels.Wcf.dll
							'{ACC0ECB1-B9B1-4F86-965A-5DEC79A8CB4A}', -- Resource.ServiceBus.ServiceHost.RequestClassifiers.CSharp.dll
							'{151DA6AE-A65E-49F7-8B73-D75939CB7D01}', -- Resource.ServiceBus.ServiceHost.RequestClassifiers.Random.dll
							'{03C5383A-F870-4957-9B91-935C82E2E092}', -- Resource.ServiceBus.ServiceHost.RequestClassifiers.SingleQueue.dll
							'{CC32B0FA-F91E-432C-BF47-9E4E51930104}', -- Resource.ServiceBus.ServiceHost.RequestManagement.dll
							'{63B2057D-F7C6-4E77-8C27-7E5CB3D7F436}', -- Resource.ServiceBus.ServiceHost.RequestQueues.MsmqRequestQueue.dll
							'{AC4426D3-AB0E-4CAB-BB71-6C9E439A4688}', -- Resource.ServiceBus.ServiceHost.RequestQueues.PassThroughRequestQueue.dll
							'{F2B55C04-5D60-4B67-9E9E-529D608EC8FF}', -- Resource.ServiceBus.ServiceHost.RequestSchedulers.ThreadPool.dll
							'{FBD341EE-D841-4A2D-8E35-BD2B34C4B46F}', -- Resource.ServiceBus.ServiceHost.ResourceManagement.dll
							'{2C1CA5E4-1063-45B7-8CDF-62C80FAA0BD6}', -- Resource.ServiceBus.ServiceHost.ServiceEndpoints.Wcf.dll
							'{C3A5D216-5CA8-4200-A6DA-E66DD7A41500}', -- Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe
							'{62E5ABF3-1252-4EC2-8362-1250E2DB68A0}', -- Resource.ServiceBus.ServiceHost.ServicePoolLoader.exe.config
							'{10E0D20B-4D70-447C-B38D-D4581F54DC4D}', -- Resource.ServiceBus.ServiceHost.ServiceSynchronization.SingleThreadedService.dll
							'{200C9030-377D-48D4-9CDF-30B53DED00E5}', -- Resource.ServiceBus.ServiceHost.Watchdogs.Watchdog.dll
							'{9A546F5F-28B0-4C18-961C-372B5599E3B9}', -- Resource.ServiceBus.ServiceHost.WWF.Common.dll
							'{4632A245-09EF-4766-8B7A-BD841B43B271}', -- Resource.ServiceBus.ServiceHost.WWF.Interfaces.dll
							'{9F20B227-83AE-4DA0-BF68-85AEDE5D223A}', -- Resource.ServiceBus.ServiceHost.WwfActivity.InvokeService.dll
							'{CF0BF3A9-681F-45F3-A7A9-784231A162E3}', -- Resource.ServiceBus.Utility.Assembly.dll
							'{B3F1AF33-8EBE-4063-9F9A-F4DFF6C8D598}', -- Resource.ServiceBus.Utility.Cache.dll
							'{E23E6C42-DDA3-449D-BAFF-21AE8CF74EA8}', -- Resource.ServiceBus.Utility.Configuration.dll
							'{90C25534-609F-4EDB-A90A-77136B99B15F}', -- Resource.ServiceBus.Utility.Database.dll
							'{4FBA64A4-4FB1-4FE9-9EC9-E6FA45FF0AC5}', -- Resource.ServiceBus.Utility.Helpers.dll
							'{7FA39457-6372-454C-A8F7-458F918FF488}', -- Resource.ServiceBus.Utility.Logging.dll
							'{5646B113-277A-41E5-9E8B-AA78015AC903}', -- Resource.ServiceBus.Utility.Security.dll
							'{2FB220C2-0D6E-4BD5-912D-742BA96C686A}', -- Resource.ServiceBus.Utility.Sharing.dll
							'{F672853A-7FB9-4328-9E6F-C238C4866A2D}', -- Resource.ServiceBus.Utility.Timer.dll
							'{9F941A37-683C-45AB-9988-8326B3AE3410}', -- Resource.ServiceBus.Utility.Unity.dll
							'{980D4EDC-1CA7-4134-9F23-010D1FA5C06E}', -- Resource.ServiceBus.Utility.Wcf.dll
							'{3234FC2F-ECE5-4558-8E2E-DE465A30C5CA}', -- Resource.unityConfiguration.config
							
							'{39351C6D-3B07-433C-AE36-ADA7E120A421}', -- ResultsRetentionTime
							'{428D1F22-8BC4-42F3-9ED7-8D1AE2C97669}', -- ServiceDefinitionManager
							'{AA8C4D6A-7953-4059-BD87-D49094FCBC81}', -- ServiceHostPublishState
							'{F6F97DDD-4E61-4783-8434-0A15ED9ACF3C}', -- ServicePool.System.ServiceEndpoints
							'{680E642F-5D9C-4039-8F67-E06D3C1BA553}', -- ServiceRequestChannelManager
							'{53B43449-923D-4C5A-AD19-46AFC8DDC7CF}'  -- Shares
						)
					)
				)
			)

	--
	-- Ensure that statically and dynamically created System and Logging service pool fragments 
	-- (Services and Implementation) are part of System.ServicePools package:
	--
	UPDATE	f1
	SET		PackageId = @SYSTEM_SERVICE_POOLS_PACKAGE
	FROM	Active_Fragments f1
			JOIN
			Active_Fragments f2
				ON	f1.RootGroupId = f2.RootGroupId
					AND
					(
						f1.Name = f2.Name
						OR
						f1.Name = f2.Name + '.Services'
						OR
						f1.Name = f2.Name + '.Implementation'
					)
	WHERE	f1.RootGroupId = @ROOT_GROUP_ID
			AND
			f1.PackageId <> @SYSTEM_PACKAGE
			AND
			f1.SectionId = @SERVICEHOST
			AND
			f2.Id IN
			(
				'{16088ACE-C7E5-4354-B4C9-60402492FCC7}', -- ServicePool.Logging
				'{C0A29A9A-54CF-4997-B497-5F229DF8014E}'  -- ServicePool.System
			)

	--
	-- Ensure that ServicePool.System.Services and ServicePool.Logging.Services
	-- contain information on packages associated with System and Logging service pools
	--
	UPDATE	Active_Fragments
	SET		Contents.modify
			(
				'
				insert
					<Packages>
						<Package name="System.Services.Core" />
						<Package name="System.Services.Metering" />
					</Packages>
				as first
				into ( . )[ 1 ]
				'
			)
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Name = 'ServicePool.System.Services'

	UPDATE	Active_Fragments
	SET		Contents.modify
			(
				'
				insert
					<Packages>
						<Package name="System.Services.Logging" />
					</Packages>
				as first
				into ( . )[ 1 ]
				'
			)
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Name = 'ServicePool.Logging.Services'

	--
	-- Ensure that statically and dynamically created System core service fragments 
	-- (ServiceFactoryData, ServiceHostData and ServicePermissions) are part of System.Services.Core package:
	--
	UPDATE	f1
	SET		PackageId = @SYSTEM_SERVICES_CORE_PACKAGE
	FROM	Active_Fragments f1
			JOIN
			Active_Fragments f2
				ON	f1.RootGroupId = f2.RootGroupId
					AND
					(
						f1.Name = f2.Name
						OR
						f1.Name = f2.Name + '.ServiceFactoryData'
						OR
						f1.Name = f2.Name + '.ServiceHostData'
						OR
						(
							f1.Name = f2.Name + '.ServicePermissions'
							AND
							f2.Id = '{9839E30B-E225-46D1-BF3A-D89F3FEA8B33}' -- Service.ServiceBus.System.DSE.ServiceInvokeStep
						)
					)
	WHERE	f1.RootGroupId = @ROOT_GROUP_ID
			AND
			f1.PackageId <> @SYSTEM_SERVICES_CORE_PACKAGE
			AND
			f1.SectionId = @SERVICEHOST
			AND
			f2.Id IN
			(
				'{77A07EB9-8868-4351-BDDD-951A75CB5147}', -- Service.ServiceBus.ServiceHost.BseModule.ClearExpiredResults
				'{04529659-A6B9-4F72-8B96-AB2DD39C5C16}', -- Service.ServiceBus.System.DSE.InvokeService
				'{9839E30B-E225-46D1-BF3A-D89F3FEA8B33}', -- Service.ServiceBus.System.DSE.ServiceInvokeStep
				'{8632800E-DB6C-4827-A3D8-5FDE9BFC8439}', -- Service.ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationList
				'{5AD958FB-78DE-46E7-BAB8-4B2EF9622D45}', -- Service.ServiceBus.System.ExceptionManagement.FailedRequests.GetCategorizationSummary
				'{24169F9D-C6E8-41FC-9D6F-D7972F36CF16}', -- Service.ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Heavy
				'{A55EA547-932A-49E9-B872-910C0A4B41F1}', -- Service.ServiceBus.System.ExceptionManagement.FailedRequests.Invocation.Light
				'{85B1447F-9EA4-428D-8EC0-C4E18524AD5C}', -- Service.ServiceBus.System.ServiceHost.Requests.DeleteById
				'{C24E980E-1A96-42E0-83A4-5143A77AB4AC}', -- Service.ServiceBus.System.ServiceHost.Requests.DeleteFailedRequests
				'{214E816B-796A-4362-8089-DD80221FA177}', -- Service.ServiceBus.System.ServiceHost.Requests.GetById
				'{BDD9235D-33A5-4878-9410-1B42536E0ED6}', -- Service.ServiceBus.System.ServiceHost.Requests.GetServiceResponse
				'{AC869E60-0FD5-4A27-B001-0C9D75DFED26}', -- Service.ServiceBus.System.ServiceHost.Requests.Save
				'{5C79CF8C-71B4-40EA-BD36-35A3E91CB3B2}', -- Service.ServiceBus.System.ServiceHost.Resources.Delete
				'{3F72B691-5E73-45FF-A156-2258326E588A}', -- Service.ServiceBus.System.ServiceHost.Resources.Download
				'{CCFEAA18-E503-48F9-89D5-CEDD2D43515A}', -- Service.ServiceBus.System.ServiceHost.Resources.Upload
				'{1078D593-4E69-43D9-B7BC-2D246105A7EB}', -- Service.ServiceBus.System.ServiceRequestExplorer.Abort
				'{ACA73A53-3D4E-48A6-BBA7-6640BA021D56}', -- Service.ServiceBus.System.ServiceRequestExplorer.AttemptToPublish
				'{E85BD088-E4F3-47E8-8C6D-8D3715E7EF4D}', -- Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithAbort
				'{C356987B-2C31-42C6-8701-DB07F6BA3F0C}', -- Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithFailed
				'{2303B3F8-AE58-4C84-874D-292557E9D5A5}'  -- Service.ServiceBus.System.ServiceRequestExplorer.CompleteWithSucceeded
			)

	--
	-- Ensure that statically and dynamically created Logging service fragments 
	-- (ServiceFactoryData and ServiceHostData) are part of System.Services.Logging package:
	--
	UPDATE	f1
	SET		PackageId = @SYSTEM_SERVICES_LOGGING_PACKAGE
	FROM	Active_Fragments f1
			JOIN
			Active_Fragments f2
				ON	f1.RootGroupId = f2.RootGroupId
					AND
					(
						f1.Name = f2.Name
						OR
						f1.Name = f2.Name + '.ServiceFactoryData'
						OR
						f1.Name = f2.Name + '.ServiceHostData'
					)
	WHERE	f1.RootGroupId = @ROOT_GROUP_ID
			AND
			f1.PackageId <> @SYSTEM_SERVICES_LOGGING_PACKAGE
			AND
			f1.SectionId = @SERVICEHOST
			AND
			f2.Id IN
			(
				'{FF1151FC-BF97-468C-946E-4F35A93F4206}', -- Service.ServiceBus.ServiceHost.BseModule.CreateLoggingContextSummary
				'{7A031131-7959-4515-B750-153330E43278}', -- Service.ServiceBus.ServiceHost.BseModule.PickupLogEntries
				'{659439DB-4074-42A7-BB84-03EFBC0F01A0}', -- Service.ServiceBus.System.Logging.GetContextMachineCounts
				'{C4898072-052C-4EAB-9A95-BC321BB9D968}', -- Service.ServiceBus.System.Logging.GetPage
				'{C1152418-ECF5-44FE-AE0D-AD0E18665906}'  -- Service.ServiceBus.System.Logging.LoggingService
			)

	--
	-- Ensure that statically and dynamically created Metering service fragments 
	-- (ServiceFactoryData and ServiceHostData) are part of System.Services.Metering package:
	--
	UPDATE	f1
	SET		PackageId = @SYSTEM_SERVICES_METERING_PACKAGE
	FROM	Active_Fragments f1
			JOIN
			Active_Fragments f2
				ON	f1.RootGroupId = f2.RootGroupId
					AND
					(
						f1.Name = f2.Name
						OR
						f1.Name = f2.Name + '.ServiceFactoryData'
						OR
						f1.Name = f2.Name + '.ServiceHostData'
					)
	WHERE	f1.RootGroupId = @ROOT_GROUP_ID
			AND
			f1.PackageId <> @SYSTEM_SERVICES_METERING_PACKAGE
			AND
			f1.SectionId = @SERVICEHOST
			AND
			f2.Id IN
			(
				'{97F8E7B5-7C7E-4D0C-B4F7-F6707E996298}', -- Service.ServiceBus.System.Metering.MeteringPoint.GetFilteredList
				'{57FB61F1-1B55-45AF-9E84-0D7E679BADFC}', -- Service.ServiceBus.System.Metering.MeteringPoint.GetPublishedNameList
				'{6C8A1598-C2A8-4BE5-9C0F-0D33D95D8B49}'  -- Service.ServiceBus.System.Metering.MeteringPoint.Save
			)

	--
	-- Ensure that associations between System attributes and filters are part of System package too.
	--
	UPDATE	Active_FilterAttributeValues
	SET		PackageId = @SYSTEM_PACKAGE
	FROM	Active_Attributes a
			JOIN
			Active_FilterAttributeValues v
				ON	a.Id = v.AttributeId
					AND
					a.RootGroupId = v.RootGroupId
			JOIN
			Active_Filters f
				ON	v.FilterId = f.Id
					AND
					v.RootGroupId = f.RootGroupId
	WHERE	v.RootGroupId = @ROOT_GROUP_ID
			AND
			v.PackageId <> @SYSTEM_PACKAGE
			AND
			a.PackageId = @SYSTEM_PACKAGE
			AND
			f.PackageId = @SYSTEM_PACKAGE
	
	--
	-- Ensure that value of ServicePool.Name attribute for ServicePool.System filter is part of System.ServicePools package.
	--
	UPDATE	Active_FilterAttributeValues
	SET		PackageId = @SYSTEM_SERVICE_POOLS_PACKAGE
	FROM	Active_FilterAttributeValues v
			JOIN
			Active_Filters f
				ON	v.FilterId = f.Id
					AND
					v.RootGroupId = f.RootGroupId
	WHERE	v.RootGroupId = @ROOT_GROUP_ID
			AND
			v.PackageId <> @SYSTEM_SERVICE_POOLS_PACKAGE
			AND
			f.Name = 'ServicePool.System'
			AND
			v.AttributeId = 'D300464A-F94B-44EE-AE84-5B5774EE47B8' -- ServicePool.Name

	--
	-- Ensure that associations between System groups are part of System package too.
	--
	UPDATE	Active_GroupGroups
	SET		PackageId = @SYSTEM_PACKAGE
	FROM	Active_Groups pg
			JOIN
			Active_GroupGroups gg
				ON	pg.Id = gg.GroupId
					AND
					pg.RootGroupId = gg.RootGroupId
			JOIN
			Active_Groups cg
				ON	gg.ChildGroupId = cg.Id
					AND
					gg.RootGroupId = cg.RootGroupId
	WHERE	gg.RootGroupId = @ROOT_GROUP_ID
			AND
			gg.PackageId <> @SYSTEM_PACKAGE
			AND
			pg.PackageId = @SYSTEM_PACKAGE
			AND
			cg.PackageId = @SYSTEM_PACKAGE

	--
	-- Ensure that associations between System groups and following System.ServicePools groups are part of System.ServicePools package:
	--  1. ServicePool.System
	--
	UPDATE	Active_GroupGroups
	SET		PackageId = @SYSTEM_SERVICE_POOLS_PACKAGE
	FROM	Active_Groups pg
			JOIN
			Active_GroupGroups gg
				ON	pg.Id = gg.GroupId
					AND
					pg.RootGroupId = gg.RootGroupId
			JOIN
			Active_Groups cg
				ON	gg.ChildGroupId = cg.Id
					AND
					gg.RootGroupId = cg.RootGroupId
	WHERE	gg.RootGroupId = @ROOT_GROUP_ID
			AND
			gg.PackageId <> @SYSTEM_SERVICE_POOLS_PACKAGE
			AND
			pg.PackageId = @SYSTEM_PACKAGE
			AND
			cg.PackageId = @SYSTEM_SERVICE_POOLS_PACKAGE
			AND
			cg.Name = 'ServicePool.System'
			
	--
	-- Ensure that associations between System groups and macros are part of System package too.
	--
	UPDATE	Active_GroupMacroValues
	SET		PackageId = @SYSTEM_PACKAGE
	FROM	Active_Groups g
			JOIN
			Active_GroupMacroValues v
				ON	g.Id = v.GroupId
					AND
					g.RootGroupId = v.RootGroupId
			JOIN
			Active_Macros m
				ON	v.MacroId = m.Id
					AND
					v.RootGroupId = m.RootGroupId
	WHERE	v.RootGroupId = @ROOT_GROUP_ID
			AND
			v.PackageId <> @SYSTEM_PACKAGE
			AND
			g.PackageId = @SYSTEM_PACKAGE
			and
			m.PackageId = @SYSTEM_PACKAGE

	--
	-- Ensure that associations between System groups and fragments are part of the package that contains the fragment.
	--
	UPDATE	Active_GroupFragments
	SET		PackageId = f.PackageId
	FROM	Active_Groups g
			JOIN
			Active_GroupFragments gf
				ON	g.Id = gf.GroupId
					AND
					g.RootGroupId = gf.RootGroupId
			JOIN
			Active_Fragments f
				ON	gf.FragmentId = f.Id
					AND
					gf.RootGroupId = f.RootGroupId
	WHERE	gf.RootGroupId = @ROOT_GROUP_ID
			AND
			gf.PackageId <> f.PackageId
			AND
			g.PackageId = @SYSTEM_PACKAGE
			and
			f.PackageId IN
			(
				@SYSTEM_PACKAGE,
				@SYSTEM_SERVICES_CORE_PACKAGE,
				@SYSTEM_SERVICES_LOGGING_PACKAGE,
				@SYSTEM_SERVICES_METERING_PACKAGE,
				@SYSTEM_SERVICE_POOLS_PACKAGE
			)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created System package'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{0C369ACD-CA94-4065-A434-B3AEA38DB3A6}'
SET @ReferenceID = '40385'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize System package ID constant
--
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

--
-- Declare and initialize section ID constants
--
DECLARE @CONFIGURATION uniqueidentifier
SET		@CONFIGURATION = '{23D28783-F431-4DC9-83E5-14390D15686B}'

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @FragmentId uniqueidentifier
	
	--
	-- Ensure that Configuration.Plugins.SectionBuild.IncludeServiceFactoryData is created for CONFIGURATION section
	--
	SET	@FragmentId = '{D0BE8120-467C-4CB7-93C3-6417531F3C7D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Configuration.Plugins.SectionBuild.IncludeServiceFactoryData'
			SET @Description = 'The configuration that contains information necessary to create IncludeServiceFactoryData section build plug-in.'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents,
				ChangeSetId,
				PackageId
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@Name,
				@Description,
				@CONFIGURATION,
				'SectionBuildPlugins',
				'
				<SectionBuildPlugin name="IncludeServiceFactoryData">
					<Implementation>
						<Assembly>ServiceBus.Configuration.Plugins.SectionBuild.IncludeServiceFactoryData.dll</Assembly>
						<Type>ServiceBus.Configuration.Plugins.SectionBuild.IncludeServiceFactoryDataSectionBuildPlugin</Type>
					</Implementation>
				</SectionBuildPlugin>
				',
				0,
				@SYSTEM_PACKAGE
			)
		END
	
	--
	-- Ensure that Configuration.Plugins.SectionBuild.IncludeServiceFactoryData fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId,
			ChangeSetId,
			PackageId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@CONFIGURATION_SERVICE,
			@FragmentId,
			0,
			@SYSTEM_PACKAGE
		)	
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added IncludeServiceFactoryData section build plug-in configuration to ServiceBus.Configuration section'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{68B3C75E-CDE6-44B7-B3BB-092CE725F255}'
SET @ReferenceID = '41157'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- 1. Ensure that each ServicePool.{Name}.Implementation fragment has ServiceBus.ServiceHost.ResourceManagement.dll
--    as implementation resource
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	UPDATE	Active_Fragments
	SET		Contents.modify
			(
				'insert
					<Resource name="ServiceBus.ServiceHost.ResourceManagement.dll" />
				as last
				into Implementation[ 1 ]'
			)
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			Name LIKE 'ServicePool.%.Implementation'
			AND
			Contents.exist( 'Implementation' ) = 1
			AND
			Contents.exist( 'Implementation/Resource[ @name="ServiceBus.ServiceHost.ResourceManagement.dll" ]' ) = 0
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added resource management to service pool implementation resources'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{B8043975-0FAC-4025-AAFD-190583E9F9DE}'
SET @ReferenceID = '41156'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize package ID constants
--
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

DECLARE @DEMO_SERVICES_PACKAGE uniqueidentifier
SET		@DEMO_SERVICES_PACKAGE = '{C222601F-0A6F-4C4E-9C9C-CB5A6DDC2365}'

DECLARE @DEMO_SERVICE_POOL_PACKAGE uniqueidentifier
SET		@DEMO_SERVICE_POOL_PACKAGE = '{97D345D3-B89C-432D-A87F-43EE7EB6639A}'

DECLARE @DEMO_CONFIGURATION_PACKAGE uniqueidentifier
SET		@DEMO_CONFIGURATION_PACKAGE = '{807F2E77-C6A0-412D-A586-9CBBEF4322E1}'

DECLARE @DEMO_RESOURCES_PACKAGE uniqueidentifier
SET		@DEMO_RESOURCES_PACKAGE = '{67934118-C655-4FB4-99A8-2BF5BA64A15A}'
	
--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- Declare and initialize macro ID constants
--
DECLARE	@SP_DEMO_LOCAL uniqueidentifier
SET		@SP_DEMO_LOCAL = '{1EDE7B0C-04B9-401b-BB5D-D7E746663C77}'

DECLARE @SP_DEMO_WCF1_PORT uniqueidentifier
SET		@SP_DEMO_WCF1_PORT = '{41A0B62E-0F76-4AC3-B203-35C2C536AF21}'

DECLARE @SP_DEMO_WCF2_PORT uniqueidentifier
SET		@SP_DEMO_WCF2_PORT = '{41E0DB51-A687-4C63-9A97-BFA658569CF8}'

DECLARE @SP_DEMO_ASYNC1_QUEUE_PATH uniqueidentifier
SET		@SP_DEMO_ASYNC1_QUEUE_PATH = '{25512546-AFF0-46AF-B3BD-F56616626D7E}'

DECLARE @Name varchar( 250 )
DECLARE @Description varchar( 1024 )

DECLARE @CREATE_DEMO_RESOURCES_PACKAGE		BIT;
DECLARE @CREATE_DEMO_SERVICES_PACKAGE		BIT;
DECLARE @CREATE_DEMO_SERVICEPOOL_PACKAGE	BIT; 

-- ServiceBus.Administration.Configuration
DECLARE @ADMINISTRATION_SECTION	UNIQUEIDENTIFIER	= '{B93A5E48-CD5B-4CB2-B8A2-C6D2FA2C233D}'
DECLARE @SERVICEHOST_SECTION	UNIQUEIDENTIFIER	= '{12BB99C3-3045-498D-BD54-D2690935D845}'
DECLARE @METERING_SECTION		UNIQUEIDENTIFIER	= '{DE385948-E7CA-495B-B325-4BACC2C09C2D}'

DECLARE @SERVICEBUS_CLIENT		UNIQUEIDENTIFIER	= '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
DECLARE @SERVICEBUS_CONSOLE		UNIQUEIDENTIFIER	= '{B233BE84-30B6-4349-B309-F24942D8DE4B}'
DECLARE @SERVICEBUS_SERVICEHOST UNIQUEIDENTIFIER	= '{4FF5DBB5-A888-4C76-B222-8EE53950E511}'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- 1. Create Demo.Services and Demo.ServicePool packages
-- 2. Create dependencies for created packages
-- 3. Assign configuration objects to created packages
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that following filter is part of Demo.ServicePool package:
	--   1. ServicePool.Demo
	--
	UPDATE	Active_Filters
	SET		PackageId = @DEMO_SERVICE_POOL_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @DEMO_SERVICE_POOL_PACKAGE
			AND
			Name = 'ServicePool.Demo'

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICEPOOL_PACKAGE = 1;

	--
	-- Ensure that following macros are part of Demo.ServicePool package:
	--  1. SP.DEMO.LOCAL
	--  2. SP.DEMO.WCF1.PORT
	--  3. SP.DEMO.WCF2.PORT
	--  4. SP.DEMO.ASYNC1.QUEUE.PATH
	--
	UPDATE	Active_Macros
	SET		PackageId = @DEMO_SERVICE_POOL_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @DEMO_SERVICE_POOL_PACKAGE
			AND Id IN
			(
				@SP_DEMO_LOCAL,
				@SP_DEMO_WCF1_PORT,
				@SP_DEMO_WCF2_PORT,
				@SP_DEMO_ASYNC1_QUEUE_PATH
			)

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICEPOOL_PACKAGE = 1;

	--
	-- Ensure that following group is part of Demo.ServicePool package:
	--   1. ServicePool.Demo
	--
	UPDATE	Active_Groups
	SET		PackageId = @DEMO_SERVICE_POOL_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @DEMO_SERVICE_POOL_PACKAGE
			AND
			Name = 'ServicePool.Demo'

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICEPOOL_PACKAGE = 1;

	--
	-- Ensure that resource fragments are part of Demo.Services package:
	--
	UPDATE	Active_Fragments
	SET		PackageId = @DEMO_RESOURCES_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @DEMO_RESOURCES_PACKAGE
			AND
			SectionId = @SERVICEHOST
			AND
			Id IN
			(
				'{D7D40FD2-6974-4061-9424-29CAFFFCA999}', -- Resource.Castle.Core.dll
				'{D140DF05-E0E6-4AFC-B0C3-BE5948BBA857}', -- Resource.Castle.DynamicProxy2.dll
				'{D9F23B53-D469-4BFF-8073-D50B2A6EFB62}', -- Resource.Iesi.Collections.dll
				'{B36D6A69-C5E1-4A38-B890-C443FEB9DD37}', -- Resource.log4net.dll
				'{95287EB2-6B87-4A70-BC1F-AB6CD7D21756}', -- Resource.NHibernate.dll
				'{4F0CD511-93FA-450C-B001-113A3D0C8395}', -- Resource.ServiceBus.ServiceHost.Test.CaDemo.CopyArgument.dll
				'{8CAAE1D4-33E5-4AC3-A49C-C6AC07438387}', -- Resource.ServiceBus.ServiceHost.Test.CaDemo.WriteDictionaryToXml.dll
				'{E5D0E83A-1B26-4F16-B85B-CD9682BE86A0}', -- Resource.ServiceBus.ServiceHost.Test.DseDemo.AddStep.dll
				'{C2B00854-E416-443F-9EEB-E8793DD79781}', -- Resource.ServiceBus.ServiceHost.Test.DseDemo.AppDomainStep.dll
				'{1D1F70F4-03E8-412C-9990-C7F18799CFA9}', -- Resource.ServiceBus.ServiceHost.Test.DseDemo.CmpStep.dll
				'{8C0C7D01-7339-4681-A8A2-737A805041AC}', -- Resource.ServiceBus.ServiceHost.Test.DseDemo.DivStep.dll
				'{E9EBD1FF-56CF-414E-ACD7-65EE710AE0B4}', -- Resource.ServiceBus.ServiceHost.Test.DseDemo.ExpStep.dll
				'{9B5CAC8A-A25C-441E-907E-8E31FE24BA93}', -- Resource.ServiceBus.ServiceHost.Test.DseDemo.MulStep.dll
				'{B68C7460-16CF-4F60-B399-04C261334A28}', -- Resource.ServiceBus.ServiceHost.Test.DseDemo.SubStep.dll
				'{2DE4710F-4E80-4489-9B83-A40B29BC20D2}', -- Resource.ServiceBus.ServiceHost.Test.EfDemo.Common.dll
				'{BF265EFD-FB33-44E5-9CDA-A205FD2206FF}', -- Resource.ServiceBus.ServiceHost.Test.EfDemo.Interfaces.dll
				'{72C3F2B8-AA0F-4496-BE2F-47168A63B349}', -- Resource.ServiceBus.ServiceHost.Test.EmDemo.MiscSteps.dll
				'{E96F3D15-1CF7-41AE-AF46-F7553D9D09A1}', -- Resource.ServiceBus.ServiceHost.Test.NhDemo.Common.dll
				'{C726919A-6670-4366-8BC1-D5988256B21A}', -- Resource.ServiceBus.ServiceHost.Test.NhDemo.GetSalesOrderDetailsStep.dll
				'{2B6F743D-084C-40EC-9316-0B27CE0AC158}', -- Resource.ServiceBus.ServiceHost.Test.NhDemo.GetSalesOrderHeadersStep.dll
				'{3C7EDB88-31C6-425D-88C9-6B8C0297BE2A}', -- Resource.ServiceBus.ServiceHost.Test.NhDemo.Interfaces.dll
				'{92062B97-0675-4F34-A76F-5144D02AB3D8}', -- Resource.ServiceBus.ServiceHost.Test.RecDemo.MiscSteps.dll
				'{85032B06-73C2-4308-A2BD-B9EBE046DB99}', -- Resource.ServiceBus.ServiceHost.Test.SpDemo.ParityCheckStep.dll
				'{30A1F1A3-0E9F-4479-89D5-82895BFFF7E0}', -- Resource.ServiceBus.ServiceHost.Test.WaDemo.Common.dll
				'{479DF755-3B11-4164-82F0-3D6F2F7CA8EB}', -- Resource.ServiceBus.ServiceHost.Test.WaDemo.GetSalesOrderDetailsStep.dll
				'{DF5C2821-19F6-4F14-806F-9251FC7B2A90}', -- Resource.ServiceBus.ServiceHost.Test.WaDemo.GetSalesOrderHeadersStep.dll
				'{B27CDF63-627F-4FD6-B9F7-B7F465D76DFA}'  -- Resource.ServiceBus.ServiceHost.Test.WaDemo.Interfaces.dll
			)

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICES_PACKAGE = 1;

	--
	-- Ensure that statically and dynamically created service fragments 
	-- (ServiceHostData, ServiceFactoryData, TestCase and ServicePermissions) are part of Demo.Services package:
	--
	UPDATE	f1
	SET		PackageId = @DEMO_SERVICES_PACKAGE
	FROM	Active_Fragments f1
			JOIN
			Active_Fragments f2
				ON	f1.RootGroupId = f2.RootGroupId
					AND
					(
						f1.Name = f2.Name
						OR
						f1.Name = f2.Name + '.ServiceHostData'
						OR
						f1.Name = f2.Name + '.ServiceFactoryData'
						OR
						f1.Name LIKE f2.Name + '.TestCase.%'
						OR
						(
							f2.Id = '{E69B02F4-A8EE-42C0-8642-63D121B1D171}'	-- Service.ServiceBus.Demo.ServiceTest.Subtract-Cacheable
							AND
							f1.Name = f2.Name + '.ServicePermissions'
						)
					)
	WHERE	f1.RootGroupId = @ROOT_GROUP_ID
			AND
			f1.PackageId <> @DEMO_SERVICES_PACKAGE
			AND
			f1.SectionId = @SERVICEHOST
			AND
			f2.Id IN
			(
				'{B2577DFD-7E6E-4604-989D-FED44DC9129D}', -- Service.ServiceBus.Demo.CollectionArguments
				'{B3DDD723-5FFD-4668-A2ED-AC20741BD1A3}', -- Service.ServiceBus.Demo.DSE.Add
				'{9235F75B-6EB1-471A-9159-3AF40E7012F2}', -- Service.ServiceBus.Demo.DSE.AppDomain
				'{8B26FBE6-C240-4AED-9C3E-933A64C3CCE3}', -- Service.ServiceBus.Demo.DSE.ArithmeticFunction
				'{3B3AE5B2-8171-4D06-B1C2-4967E102446B}', -- Service.ServiceBus.Demo.DSE.ArithmeticFunction1
				'{9322EFE9-049B-4561-9D7C-9539104C85EE}', -- Service.ServiceBus.Demo.DSE.ArithmeticFunction2
				'{AF6FE4CC-A9BE-439D-8C42-089A1BE0593D}', -- Service.ServiceBus.Demo.DSE.ArithmeticFunction3
				'{28A8A192-73BD-4E38-8C75-20557220B4CA}', -- Service.ServiceBus.Demo.DSE.Compare
				'{8599BDF5-046B-4B62-81DA-4D3DACBEB123}', -- Service.ServiceBus.Demo.DSE.Divide
				'{2B196252-14A5-4093-BA65-35C74F2D011D}', -- Service.ServiceBus.Demo.DSE.Exponent
				'{1F1C0E24-9A39-49F9-9BEC-6DEB6D2736F9}', -- Service.ServiceBus.Demo.DSE.InvokeDivideStep
				'{DD5186C1-39E2-4FF3-865E-8A1A8C9BB665}', -- Service.ServiceBus.Demo.DSE.Multiply
				'{258A10C1-B6B2-4B41-AE9E-E476BA2D9EF5}', -- Service.ServiceBus.Demo.DSE.Subtract
				'{D3567A72-00F8-4CBC-A3E2-CE98584BF4A8}', -- Service.ServiceBus.Demo.Routing.OddEvenDecisioning
				'{19A9C223-4407-49C0-976B-1B6DCF5D5F81}', -- Service.ServiceBus.Demo.ServicePool.CustomRoutes
				'{D3FD9EDD-248C-44B7-8CC5-9CC513A2BCBD}', -- Service.ServiceBus.Demo.ServiceRequestExplorer.NonRestartableServiceAndStep
				'{307494F9-46A4-4257-8F55-ED85A395283F}', -- Service.ServiceBus.Demo.ServiceRequestExplorer.NonRestartableServiceAndStepWithRetention
				'{40C2F164-B504-4556-82BE-6D48835423FA}', -- Service.ServiceBus.Demo.ServiceRequestExplorer.RestartableService
				'{9BA1943C-F7CD-4FDC-892A-24CE917FC25B}', -- Service.ServiceBus.Demo.ServiceRequestExplorer.RestartableServiceAndStep
				'{E57FF55C-51AB-4A14-9555-D94C9713258B}', -- Service.ServiceBus.Demo.ServiceRequestExplorer.RestartableServiceAndStepWithAutoRetry
				'{6D9B82D0-C1FD-4F18-9F7A-C4A7C6256F72}', -- Service.ServiceBus.Demo.ServiceRequestExplorer.RestartableServiceAndStepWithRetention
				'{2E926BF5-250C-4A5A-8C91-7C0451376C4B}', -- Service.ServiceBus.Demo.ServiceRequestExplorer.RestartableServiceAndStepWithRetentionAndAutoRetry
				'{B00B6948-2265-4030-8CCC-A49C5D85D730}', -- Service.ServiceBus.Demo.ServiceTest.Add-Cacheable
				'{C2E84743-8099-49D6-A11A-7720EC9BD11A}', -- Service.ServiceBus.Demo.ServiceTest.Stepless
				'{E69B02F4-A8EE-42C0-8642-63D121B1D171}', -- Service.ServiceBus.Demo.ServiceTest.Subtract-Cacheable
				'{35179338-AC8F-4D9D-8F1B-75552667FEEF}', -- Service.ServiceBus.Demo.Web.EntFramework.GetSalesOrderDetails
				'{C082CC27-B913-4D8B-B777-968A70D3B40F}', -- Service.ServiceBus.Demo.Web.EntFramework.GetSalesOrderHeaders
				'{D3D49147-8B44-461D-B440-4D69B1171CB4}', -- Service.ServiceBus.Demo.Web.Linq.GetSalesOrderDetails
				'{BDFF6F77-8B97-4A05-97A3-223D5C1ED44B}', -- Service.ServiceBus.Demo.Web.Linq.GetSalesOrderHeaders
				'{C017D5F6-0CCB-4D81-8736-BC701107660D}', -- Service.ServiceBus.Demo.Web.Nhibernate.GetSalesOrderDetails
				'{320F94F6-494D-4A93-A2CB-F406A9238C28}', -- Service.ServiceBus.Demo.Web.Nhibernate.GetSalesOrderHeaders
				'{BFDA91D4-9368-404E-AB4F-2548DBC3B58A}'  -- Service.ServiceBus.Demo.WWF.InvokeService
			)

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICES_PACKAGE = 1;

	--
	-- Ensure that  BusinessContext.ServicePool.Demo fragment is part of Demo.ServicePool package:
	--
	UPDATE	Active_Fragments
	SET		PackageId = @DEMO_SERVICE_POOL_PACKAGE
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			PackageId <> @DEMO_SERVICE_POOL_PACKAGE
			AND
			SectionId = @SERVICEHOST
			AND
			Id = '{E53644AB-90A4-464D-BCE7-9E0FBD027036}' -- BusinessContext.ServicePool.Demo

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICEPOOL_PACKAGE = 1;

	--
	-- Ensure that statically and dynamically created Demo service pool fragments 
	-- (Services and Implementation) are part of Demo.ServicePool package:
	--
	UPDATE	f1
	SET		PackageId = @DEMO_SERVICE_POOL_PACKAGE
	FROM	Active_Fragments f1
			JOIN
			Active_Fragments f2
				ON	f1.RootGroupId = f2.RootGroupId
					AND
					(
						f1.Name = f2.Name
						OR
						f1.Name = f2.Name + '.Services'
						OR
						f1.Name = f2.Name + '.Implementation'
					)
	WHERE	f1.RootGroupId = @ROOT_GROUP_ID
			AND
			f1.PackageId <> @DEMO_SERVICE_POOL_PACKAGE
			AND
			f1.SectionId = @SERVICEHOST
			AND
			f2.Id = '{73B36C67-20B3-4920-9296-0C9E1FE251FD}' -- ServicePool.Demo

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICEPOOL_PACKAGE = 1;

	--
	-- Ensure that ServicePool.Demo.Services contains information on packages associated with Demo service pool
	--
	UPDATE	Active_Fragments
	SET		Contents.modify
			(
				'
				insert
					<Packages>
						<Package name="Demo.Services" />
					</Packages>
				as first
				into ( . )[ 1 ]
				'
			)
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Name = 'ServicePool.Demo.Services'

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICES_PACKAGE = 1;

	--
	-- Ensure that value of ServicePool.Name attribute for ServicePool.Demo filter is part of Demo.ServicePool package.
	--
	UPDATE	Active_FilterAttributeValues
	SET		PackageId = @DEMO_SERVICE_POOL_PACKAGE
	FROM	Active_FilterAttributeValues v
			JOIN
			Active_Filters f
				ON	v.FilterId = f.Id
					AND
					v.RootGroupId = f.RootGroupId
	WHERE	v.RootGroupId = @ROOT_GROUP_ID
			AND
			v.PackageId <> @DEMO_SERVICE_POOL_PACKAGE
			AND
			f.Name = 'ServicePool.Demo'
			AND
			v.AttributeId = 'D300464A-F94B-44EE-AE84-5B5774EE47B8' -- ServicePool.Name

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICEPOOL_PACKAGE = 1;

	--
	-- Ensure that associations between System groups and following Demo.ServicePool groups are part of Demo.ServicePool package:
	--  1. ServicePool.Demo
	--
	UPDATE	Active_GroupGroups
	SET		PackageId = @DEMO_SERVICE_POOL_PACKAGE
	FROM	Active_Groups pg
			JOIN
			Active_GroupGroups gg
				ON	pg.Id = gg.GroupId
					AND
					pg.RootGroupId = gg.RootGroupId
			JOIN
			Active_Groups cg
				ON	gg.ChildGroupId = cg.Id
					AND
					gg.RootGroupId = cg.RootGroupId
	WHERE	gg.RootGroupId = @ROOT_GROUP_ID
			AND
			gg.PackageId <> @DEMO_SERVICE_POOL_PACKAGE
			AND
			pg.PackageId = @SYSTEM_PACKAGE
			AND
			cg.PackageId = @DEMO_SERVICE_POOL_PACKAGE
			AND
			cg.Name = 'ServicePool.Demo'

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICEPOOL_PACKAGE = 1;

	--
	-- Ensure that associations between System groups and macros from Demo.ServicePool package 
	-- are part of Demo.ServicePool package too.
	--
	UPDATE	Active_GroupMacroValues
	SET		PackageId = @DEMO_SERVICE_POOL_PACKAGE
	FROM	Active_Groups g
			JOIN
			Active_GroupMacroValues v
				ON	g.Id = v.GroupId
					AND
					g.RootGroupId = v.RootGroupId
			JOIN
			Active_Macros m
				ON	v.MacroId = m.Id
					AND
					v.RootGroupId = m.RootGroupId
	WHERE	v.RootGroupId = @ROOT_GROUP_ID
			AND
			v.PackageId <> @DEMO_SERVICE_POOL_PACKAGE
			AND
			g.PackageId = @SYSTEM_PACKAGE
			and
			m.PackageId = @DEMO_SERVICE_POOL_PACKAGE

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICEPOOL_PACKAGE = 1;

	--
	-- Ensure that associations between System groups and fragments are part of the package that contains the fragment.
	--
	UPDATE	Active_GroupFragments
	SET		PackageId = f.PackageId
	FROM	Active_Groups g
			JOIN
			Active_GroupFragments gf
				ON	g.Id = gf.GroupId
					AND
					g.RootGroupId = gf.RootGroupId
			JOIN
			Active_Fragments f
				ON	gf.FragmentId = f.Id
					AND
					gf.RootGroupId = f.RootGroupId
	WHERE	gf.RootGroupId = @ROOT_GROUP_ID
			AND
			gf.PackageId <> f.PackageId
			AND
			g.PackageId = @SYSTEM_PACKAGE
			and
			f.PackageId = @DEMO_RESOURCES_PACKAGE
	
	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_RESOURCES_PACKAGE = 1;
	
	UPDATE	Active_GroupFragments
	SET		PackageId = f.PackageId
	FROM	Active_Groups g
			JOIN
			Active_GroupFragments gf
				ON	g.Id = gf.GroupId
					AND
					g.RootGroupId = gf.RootGroupId
			JOIN
			Active_Fragments f
				ON	gf.FragmentId = f.Id
					AND
					gf.RootGroupId = f.RootGroupId
	WHERE	gf.RootGroupId = @ROOT_GROUP_ID
			AND
			gf.PackageId <> f.PackageId
			AND
			g.PackageId = @SYSTEM_PACKAGE
			and
			f.PackageId = @DEMO_SERVICES_PACKAGE

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICES_PACKAGE = 1;

	UPDATE	Active_GroupFragments
	SET		PackageId = f.PackageId
	FROM	Active_Groups g
			JOIN
			Active_GroupFragments gf
				ON	g.Id = gf.GroupId
					AND
					g.RootGroupId = gf.RootGroupId
			JOIN
			Active_Fragments f
				ON	gf.FragmentId = f.Id
					AND
					gf.RootGroupId = f.RootGroupId
	WHERE	gf.RootGroupId = @ROOT_GROUP_ID
			AND
			gf.PackageId <> f.PackageId
			AND
			g.PackageId = @SYSTEM_PACKAGE
			and
			f.PackageId = @DEMO_SERVICE_POOL_PACKAGE

	IF ( @@ROWCOUNT > 0 )
		SET @CREATE_DEMO_SERVICEPOOL_PACKAGE = 1;

	IF ( @CREATE_DEMO_RESOURCES_PACKAGE = 1 )
	BEGIN
		--
		-- Create Demo.Resources package
		--
		IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Packages WHERE Id = @DEMO_RESOURCES_PACKAGE AND RootGroupId = @ROOT_GROUP_ID ) )
			INSERT INTO Active_Packages
			(
				Id,
				RootGroupId,
				Name,
				[Description],
				[Version],
				[Type],
				ChangeSetId
			)
			VALUES
			(
				@DEMO_RESOURCES_PACKAGE,
				@ROOT_GROUP_ID,
				'Demo.Resources',
				'Contains Demo resources.',
				'3.3.0.5',
				1, -- Resources Package
				0  -- Created during setup
			)
			
		--
		-- Create Demo.Resources -> System dependency
		--
		IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @DEMO_RESOURCES_PACKAGE AND DependencyId = @SYSTEM_PACKAGE ) )
			INSERT INTO Active_PackageDependencies
			(
				RootGroupId,
				PackageId,
				DependencyId,
				ChangeSetId
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@DEMO_RESOURCES_PACKAGE,
				@SYSTEM_PACKAGE,
				0
			)
			
		--
		-- Create Demo.Configuration package
		--
		IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Packages WHERE Id = @DEMO_CONFIGURATION_PACKAGE AND RootGroupId = @ROOT_GROUP_ID ) )
			INSERT INTO Active_Packages
			(
				Id,
				RootGroupId,
				Name,
				[Description],
				[Version],
				[Type],
				ChangeSetId
			)
			VALUES
			(
				@DEMO_CONFIGURATION_PACKAGE,
				@ROOT_GROUP_ID,
				'Demo.Configuration',
				'Contains Demo configuration.',
				'3.3.0.5',
				0, -- Configuration Package
				0  -- Created during setup
			)
			
		--
		-- Create Demo.Configuration -> System dependency
		--
		IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @DEMO_CONFIGURATION_PACKAGE AND DependencyId = @SYSTEM_PACKAGE ) )
			INSERT INTO Active_PackageDependencies
			(
				RootGroupId,
				PackageId,
				DependencyId,
				ChangeSetId
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@DEMO_CONFIGURATION_PACKAGE,
				@SYSTEM_PACKAGE,
				0
			)
			
		--
		-- Create Demo.Configuration -> Demo.Resources dependency
		--
		IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @DEMO_CONFIGURATION_PACKAGE AND DependencyId = @DEMO_RESOURCES_PACKAGE ) )
			INSERT INTO Active_PackageDependencies
			(
				RootGroupId,
				PackageId,
				DependencyId,
				ChangeSetId
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@DEMO_CONFIGURATION_PACKAGE,
				@DEMO_RESOURCES_PACKAGE,
				0
			)
	
		----------------------------------------------------------------------------------------------------------------------
		-- Delete Demo related configuration from system fragments
		----------------------------------------------------------------------------------------------------------------------
		
		DECLARE @TMP_FRAGMENT_ID UNIQUEIDENTIFIER;
		
		----------------------------------------------------------------------------------------------------------------------
		-- MeteringPoints
		
		-- MeteringPoints fragment ID
		SET @TMP_FRAGMENT_ID = '{4A53E4F5-FAF5-4DD2-9609-8C861895190D}'
		-- Remove reference(s) to the demo service(s) from MeteringPoints fragment
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('delete /MeteringPoints/MeteringPoint/MeteringPointQueryFilters/CallerTypes/CallerType[@name="ServiceBus.ServiceHost.Test.DseDemo.DivStep"]')
		WHERE 
			Id = @TMP_FRAGMENT_ID;
		
		----------------------------------------------------------------------------------------------------------------------
		-- Contracts
		
		-- Contracts fragment ID
		SET @TMP_FRAGMENT_ID = '{8DBF8AF6-DEA0-444E-9199-181C9AA9845F}'
		-- Remove reference(s) to the demo service(s) from the Contracts fragment
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('delete /Contracts/Implementation[@name="ServiceBus.ServiceHost.Test.WaDemo.IOrderDataFacade" or @name="ServiceBus.ServiceHost.Test.NhDemo.IOrderDataFacade" or @name="ServiceBus.ServiceHost.Test.EfDemo.IOrderDataFacade"]')
		WHERE 
			Id = @TMP_FRAGMENT_ID;
		
		----------------------------------------------------------------------------------------------------------------------
		-- ServiceDefinitionManager

		-- ServiceDefinitionManager fragment ID
		SET @TMP_FRAGMENT_ID = '{428D1F22-8BC4-42F3-9ED7-8D1AE2C97669}'
		-- Remove reference(s) to the demo service(s) from the ServiceDefinitionManager fragment
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('delete /ServiceDefinitionManager/ServicesFilter/Filter[@name="Web"]')
		WHERE 
			Id = @TMP_FRAGMENT_ID;
		
		----------------------------------------------------------------------------------------------------------------------
		-- ServiceBus.System.Fragments
		
		-- ServiceBus.System.Fragments fragment ID
		SET @TMP_FRAGMENT_ID = '{32E92D4B-30F5-4FC6-93D1-8E2D6BD03C62}'
		-- Remove reference(s) to the demo service(s) from the ServiceBus.System.Fragments fragment
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('delete /SystemFragments/Resources/Resource[contains(@name, "ServiceBus.ServiceHost.Test.") and contains(@name, "Demo.")]')
		WHERE 
			Id = @TMP_FRAGMENT_ID;
		
		
		------------------------------------------------------------------------------------------------------------------------
		-- Create fragments and group fragment associations for demo related configuration from system fragments 
		------------------------------------------------------------------------------------------------------------------------
		
		-- MeteringPoints
		------------------------------------------------------------------------------------------------------------------------
		
		-- MeteringPoint.Step.Execution.Duration.MeteringPointQueryFilters.CallerType.ServiceBus.ServiceHost.Test.DseDemo.DivStep
		SET @TMP_FRAGMENT_ID = '{352716CD-0C93-4124-9C8A-F4B7B0E3B335}'
		
		-- Add fragment
		INSERT INTO 
			Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId, 
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents, 
				ChangeSetId, 
				IsActive, 
				IsHistorical, 
				AddMultiple 
			)
		VALUES
			( 
				@TMP_FRAGMENT_ID, 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				'MeteringPoint.Step.Execution.Duration.MeteringPointQueryFilters.CallerType.ServiceBus.ServiceHost.Test.DseDemo.DivStep', 
				'CallerType for Step.Execution.Duration metering point', 
				@METERING_SECTION, 
				'MeteringPoints/MeteringPoint name="Step.Execution.Duration"/MeteringPointQueryFilters/CallerTypes', 
				'<CallerType name="ServiceBus.ServiceHost.Test.DseDemo.DivStep" />', 
				NULL, 
				1, 
				0, 
				0 
			);
		
		-- Add fragment console link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CONSOLE, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		-- Add fragment service bus client link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CLIENT, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
			
		-- Add fragment service bus service host link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_SERVICEHOST, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		
		-- MeteringPoint.Step.Execution.Failed.Count.MeteringPointQueryFilters.CallerType.ServiceBus.ServiceHost.Test.DseDemo.DivStep
		SET @TMP_FRAGMENT_ID = '{695FAC91-4E59-411A-8D72-E8D64B863BEB}'
		
		-- Add fragment
		INSERT INTO 
			Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId, 
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents, 
				ChangeSetId, 
				IsActive, 
				IsHistorical, 
				AddMultiple 
			)
		VALUES
			( 
				@TMP_FRAGMENT_ID, 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				'MeteringPoint.Step.Execution.Failed.Count.MeteringPointQueryFilters.CallerType.ServiceBus.ServiceHost.Test.DseDemo.DivStep', 
				'CallerType for Step.Execution.Failed.Count metering point', 
				@METERING_SECTION, 
				'MeteringPoints/MeteringPoint name="Step.Execution.Failed.Count"/MeteringPointQueryFilters/CallerTypes', 
				'<CallerType name="ServiceBus.ServiceHost.Test.DseDemo.DivStep" />', 
				NULL, 
				1, 
				0, 
				0 
			);
		
		-- Add fragment console link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CONSOLE, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		-- Add fragment service bus client link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CLIENT, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
			
		-- Add fragment service bus service host link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_SERVICEHOST, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		
		-- MeteringPoint.Step.Execution.Succeeded.Count.MeteringPointQueryFilters.CallerType.ServiceBus.ServiceHost.Test.DseDemo.DivStep
		SET @TMP_FRAGMENT_ID = '{EA28917F-3F35-4888-9551-7C7FE9E7FA1B}'
		
		-- Add fragment
		INSERT INTO 
			Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId, 
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents, 
				ChangeSetId, 
				IsActive, 
				IsHistorical, 
				AddMultiple 
			)
		VALUES
			( 
				@TMP_FRAGMENT_ID, 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				'MeteringPoint.Step.Execution.Succeeded.Count.MeteringPointQueryFilters.CallerType.ServiceBus.ServiceHost.Test.DseDemo.DivStep', 
				'CallerType for Step.Execution.Succeeded.Count metering point', 
				@METERING_SECTION, 
				'MeteringPoints/MeteringPoint name="Step.Execution.Succeeded.Count"/MeteringPointQueryFilters/CallerTypes', 
				'<CallerType name="ServiceBus.ServiceHost.Test.DseDemo.DivStep" />', 
				NULL, 
				1, 
				0, 
				0 
			);
		
		-- Add fragment console link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CONSOLE, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		-- Add fragment service bus client link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CLIENT, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
			
		-- Add fragment service bus service host link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_SERVICEHOST, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		-- MeteringPoint.Step.Invocation.Count.MeteringPointQueryFilters.CallerType.ServiceBus.ServiceHost.Test.DseDemo.DivStep
		SET @TMP_FRAGMENT_ID = '{CD29BCE5-6214-4588-BDDA-DCE33726A71E}'
		
		-- Add fragment
		INSERT INTO 
			Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId, 
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents, 
				ChangeSetId, 
				IsActive, 
				IsHistorical, 
				AddMultiple 
			)
		VALUES
			( 
				@TMP_FRAGMENT_ID, 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				'MeteringPoint.Step.Invocation.Count.MeteringPointQueryFilters.CallerType.ServiceBus.ServiceHost.Test.DseDemo.DivStep', 
				'CallerType for Step.Invocation.Count metering point', 
				@METERING_SECTION, 
				'MeteringPoints/MeteringPoint name="Step.Invocation.Count"/MeteringPointQueryFilters/CallerTypes', 
				'<CallerType name="ServiceBus.ServiceHost.Test.DseDemo.DivStep" />', 
				NULL, 
				1, 
				0, 
				0 
			);
		
		-- Add fragment console link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CONSOLE, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		-- Add fragment service bus client link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CLIENT, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
			
		-- Add fragment service bus service host link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_SERVICEHOST, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		------------------------------------------------------------------------------------------------------------------------
		-- Contracts
		------------------------------------------------------------------------------------------------------------------------
		
		-- Contracts.Implementation.ServiceBus.ServiceHost.Test.EfDemo.IOrderDataFacade
		SET @TMP_FRAGMENT_ID = '{B2EB2965-3BE4-4AB1-8C1D-17C14D2889C4}'
		
		-- Add fragment
		INSERT INTO 
			Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId, 
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents, 
				ChangeSetId, 
				IsActive, 
				IsHistorical, 
				AddMultiple 
			)
		VALUES
			( 
				@TMP_FRAGMENT_ID, 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				'Contracts.Implementation.ServiceBus.ServiceHost.Test.EfDemo.IOrderDataFacade', 
				'Contracts configured for ServiceBus.Utility.Assembly.Loader', 
				@SERVICEHOST_SECTION, 
				'Contracts', 
				'<Implementation name="ServiceBus.ServiceHost.Test.EfDemo.IOrderDataFacade">
				<Resource name="ServiceBus.ServiceHost.Test.EfDemo.Common.dll" />
				<Type>ServiceBus.ServiceHost.Test.EfDemo.OrderDataFacade</Type>
				<Lifetime>Singleton</Lifetime>
				</Implementation>', 
				NULL, 
				1, 
				0, 
				0 
			);
		
		-- Add fragment console link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CONSOLE, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		-- Add fragment service bus client link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CLIENT, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
			
		-- Add fragment service bus service host link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_SERVICEHOST, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		------------------------------------------------------------------------------------------------------------------------
		-- Contracts.Implementation.ServiceBus.ServiceHost.Test.NhDemo.IOrderDataFacade
		SET @TMP_FRAGMENT_ID = '{4AA8BC36-08A2-490C-A458-9D3EA5D1DFD1}'
		
		-- Add fragment
		INSERT INTO 
			Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId, 
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents, 
				ChangeSetId, 
				IsActive, 
				IsHistorical, 
				AddMultiple 
			)
		VALUES
			( 
				@TMP_FRAGMENT_ID, 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				'Contracts.Implementation.ServiceBus.ServiceHost.Test.NhDemo.IOrderDataFacade', 
				'Contracts configured for ServiceBus.Utility.Assembly.Loader', 
				@SERVICEHOST_SECTION, 
				'Contracts', 
				'<Implementation name="ServiceBus.ServiceHost.Test.NhDemo.IOrderDataFacade">
				<Resource name="ServiceBus.ServiceHost.Test.NhDemo.Common.dll" />
				<Type>ServiceBus.ServiceHost.Test.NhDemo.OrderDataFacade</Type>
				<Lifetime>Singleton</Lifetime>
				</Implementation>', 
				NULL, 
				1, 
				0, 
				0 
			);
		
		-- Add fragment console link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CONSOLE, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		-- Add fragment service bus client link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CLIENT, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
			
		-- Add fragment service bus service host link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_SERVICEHOST, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		------------------------------------------------------------------------------------------------------------------------
		-- Contracts.Implementation.ServiceBus.ServiceHost.Test.WaDemo.IOrderDataFacade
		SET @TMP_FRAGMENT_ID = '{40E877ED-6858-45BD-9054-A3F592DB678C}'
		
		-- Add fragment
		INSERT INTO 
			Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId, 
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents, 
				ChangeSetId, 
				IsActive, 
				IsHistorical, 
				AddMultiple 
			)
		VALUES
			( 
				@TMP_FRAGMENT_ID, 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				'Contracts.Implementation.ServiceBus.ServiceHost.Test.WaDemo.IOrderDataFacade', 
				'Contracts configured for ServiceBus.Utility.Assembly.Loader', 
				@SERVICEHOST_SECTION, 
				'Contracts', 
				'<Implementation name="ServiceBus.ServiceHost.Test.WaDemo.IOrderDataFacade">
				<Resource name="ServiceBus.ServiceHost.Test.WaDemo.Common.dll" />
				<Type>ServiceBus.ServiceHost.Test.WaDemo.OrderDataFacade</Type>
				<Lifetime>Singleton</Lifetime>
				</Implementation>', 
				NULL, 
				1, 
				0, 
				0 
			);
		
		-- Add fragment console link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CONSOLE, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		-- Add fragment service bus client link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CLIENT, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
			
		-- Add fragment service bus service host link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_SERVICEHOST, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		
		------------------------------------------------------------------------------------------------------------------------
		-- ServiceDefinitionManager 
		------------------------------------------------------------------------------------------------------------------------
		
		-- ServiceDefinitionManager.ServicesFilter.Filter.Web
		SET @TMP_FRAGMENT_ID = '{7934A528-B931-40C0-9D92-C6AC0D68CF54}'
		
		-- Add fragment
		INSERT INTO 
			Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId, 
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents, 
				ChangeSetId, 
				IsActive, 
				IsHistorical, 
				AddMultiple 
			)
		VALUES
			( 
				@TMP_FRAGMENT_ID, 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				'ServiceDefinitionManager.ServicesFilter.Filter.Web', 
				'Includes list of filters that will hide services if all services should not be displayed', 
				@SERVICEHOST_SECTION, 
				'ServiceDefinitionManager/ServicesFilter', 
				'<Filter name="Web">ServiceBus.Demo.Web</Filter>', 
				NULL, 
				1, 
				0, 
				0 
			);
		
		-- Add fragment console link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CONSOLE, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		-- Add fragment service bus client link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CLIENT, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
			
		-- Add fragment service bus service host link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_SERVICEHOST, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
		
		------------------------------------------------------------------------------------------------------------------------
		-- ServiceBus.System.Fragments 
		------------------------------------------------------------------------------------------------------------------------
		
		-- ServiceBus.Demo.Fragments
		SET @TMP_FRAGMENT_ID = '{DBA2A9BA-757F-41D9-893C-8C912B637F6A}'
	
		-- Add fragment
		INSERT INTO 
			Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId, 
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents, 
				ChangeSetId, 
				IsActive, 
				IsHistorical, 
				AddMultiple 
			)
		VALUES
			( 
				@TMP_FRAGMENT_ID, 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				'ServiceBus.Demo.Fragments', 
				'ServiceBus Demo Fragments that should be excluded from export', 
				@ADMINISTRATION_SECTION, 
				'SystemFragments/Resources', 
				'<Resource name="ServiceBus.ServiceHost.Test.CaDemo.CopyArgument.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.CaDemo.WriteDictionaryToXml.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.DseDemo.AddStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.DseDemo.AppDomainStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.DseDemo.CmpStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.DseDemo.DivStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.DseDemo.ExpStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.DseDemo.MulStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.DseDemo.SubStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.EfDemo.Common.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.EfDemo.Interfaces.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.EmDemo.MiscSteps.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.NhDemo.Common.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.NhDemo.GetSalesOrderDetailsStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.NhDemo.GetSalesOrderHeadersStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.NhDemo.Interfaces.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.RecDemo.MiscSteps.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.SpDemo.ParityCheckStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.WaDemo.Common.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.WaDemo.GetSalesOrderDetailsStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.WaDemo.GetSalesOrderHeadersStep.dll" />
				<Resource name="ServiceBus.ServiceHost.Test.WaDemo.Interfaces.dll" />', 
				NULL, 
				1, 
				0, 
				0 
			);
		
		-- Add fragment console link
		INSERT INTO 
			Active_GroupFragments
			( 
				RootGroupId, 
				PackageId, 
				GroupId, 
				FragmentId, 
				ChangeSetId, 
				IsActive, 
				IsHistorical 
			)
		VALUES
			( 
				@ROOT_GROUP_ID, 
				@DEMO_CONFIGURATION_PACKAGE, 
				@SERVICEBUS_CONSOLE, 
				@TMP_FRAGMENT_ID, 
				NULL, 
				1, 
				0 
			);
	
		IF ( @CREATE_DEMO_SERVICES_PACKAGE = 1 )
		BEGIN
			--
			-- Create Demo.Services package
			--
			IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Packages WHERE Id = @DEMO_SERVICES_PACKAGE AND RootGroupId = @ROOT_GROUP_ID ) )
				INSERT INTO Active_Packages
				(
					Id,
					RootGroupId,
					Name,
					[Description],
					[Version],
					[Type],
					ChangeSetId
				)
				VALUES
				(
					@DEMO_SERVICES_PACKAGE,
					@ROOT_GROUP_ID,
					'Demo.Services',
					'Contains Demo services.',
					'3.3.0.5',
					2, -- Services Package
					0  -- Created during setup
				)

			--
			-- Create Demo.Services -> System dependency
			--
			IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @DEMO_SERVICES_PACKAGE AND DependencyId = @SYSTEM_PACKAGE ) )
				INSERT INTO Active_PackageDependencies
				(
					RootGroupId,
					PackageId,
					DependencyId,
					ChangeSetId
				)
				VALUES
				(
					@ROOT_GROUP_ID,
					@DEMO_SERVICES_PACKAGE,
					@SYSTEM_PACKAGE,
					0
				)
				
			--
			-- Create Demo.Services -> Demo.Configuration dependency
			--
			IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @DEMO_SERVICES_PACKAGE AND DependencyId = @DEMO_CONFIGURATION_PACKAGE ) )
				INSERT INTO Active_PackageDependencies
				(
					RootGroupId,
					PackageId,
					DependencyId,
					ChangeSetId
				)
				VALUES
				(
					@ROOT_GROUP_ID,
					@DEMO_SERVICES_PACKAGE,
					@DEMO_CONFIGURATION_PACKAGE,
					0
				)

			IF ( @CREATE_DEMO_SERVICEPOOL_PACKAGE = 1 )
			BEGIN
				--
				-- Create Demo.ServicePool package
				--
				IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Packages WHERE Id = @DEMO_SERVICE_POOL_PACKAGE AND RootGroupId = @ROOT_GROUP_ID ) )
					INSERT INTO Active_Packages
					(
						Id,
						RootGroupId,
						Name,
						[Description],
						[Version],
						[Type],
						ChangeSetId
					)
					VALUES
					(
						@DEMO_SERVICE_POOL_PACKAGE,
						@ROOT_GROUP_ID,
						'Demo.ServicePool',
						'Contains Demo service pool.',
						'3.3.0.5',
						4, -- ServicePools Package
						0  -- Created during setup
					)

				--
				-- Create Demo.ServicePool -> System dependency
				--
				IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @DEMO_SERVICE_POOL_PACKAGE AND DependencyId = @SYSTEM_PACKAGE ) )
					INSERT INTO Active_PackageDependencies
					(
						RootGroupId,
						PackageId,
						DependencyId,
						ChangeSetId
					)
					VALUES
					(
						@ROOT_GROUP_ID,
						@DEMO_SERVICE_POOL_PACKAGE,
						@SYSTEM_PACKAGE,
						0
					)

				--
				-- Create Demo.ServicePool -> Demo.Services dependency
				--
				IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_PackageDependencies WHERE RootGroupId = @ROOT_GROUP_ID AND PackageId = @DEMO_SERVICE_POOL_PACKAGE AND DependencyId = @DEMO_SERVICES_PACKAGE ) )
					INSERT INTO Active_PackageDependencies
					(
						RootGroupId,
						PackageId,
						DependencyId,
						ChangeSetId
					)
					VALUES
					(
						@ROOT_GROUP_ID,
						@DEMO_SERVICE_POOL_PACKAGE,
						@DEMO_SERVICES_PACKAGE,
						0
					)
			END
		END;
	END

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created Demo package.'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID  uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author      nvarchar( 50 )

SET @TrackingID  = '{995B0D93-8764-4B66-8610-D782E4009510}'
SET @ReferenceID = '40398'
SET @Author      = 'Admir Rogovic'

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize package ID constants
--
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--
-- Declare and initialize application and group ID constants
--
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @A_COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@A_COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

--
-- Declare and initialize section ID constants
--
DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4f38-B4ED-5C917010C756}'

DECLARE @PACKAGING uniqueidentifier
SET		@PACKAGING = '{43BB9F3C-E359-471B-9E65-C02CF2E95EB0}'

--
-- Declare and initialize macro ID constants
--
DECLARE	@GLOBAL_PACKAGE_STORE_LOCATION uniqueidentifier
SET		@GLOBAL_PACKAGE_STORE_LOCATION = '{AFB774F5-1B00-4845-AACE-68BA779A937D}'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun    = 0

DECLARE @FragmentId  uniqueidentifier
DECLARE @Name        varchar( 250 )
DECLARE @Description varchar( 1024 )

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION

	--
	-- 1. Ensure that ServiceBus.Packaging section is created
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Sections WHERE Id = @PACKAGING AND @ROOT_GROUP_ID = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus.Packaging'
			SET @Description = 'ServiceBus.Packaging section'
			
			INSERT INTO Active_Sections
			(
				Id,
				RootGroupId,
				PackageId,
				SectionGroupName,
				Name,
				Description,
				HandlerType,
				ConfigFile,
				IsLegacySection,
				IsRemoteOnly,
				ConfigurationHelperType,
				SectionAttributes,
				ChangeSetId,
				IsActive,
				IsHistorical
			)
			VALUES
			(
				@PACKAGING,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				NULL,
				@Name,
				@Description,
				'ServiceBus.Configuration.XmlNodeConfigHandler, ServiceBus.Configuration.Common', -- Handler type
				'App.config',
				1, -- Is legacy configuration?
				0,
				NULL,
				NULL,
				0,
				1,
				0
			)
		END

	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IGlobalPackageStore fragment 
	-- is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '682EF9A4-4C07-4F48-BA59-460574D48B4F'
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			Description,
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@FragmentId,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IGlobalPackageStore',
			'Type mapping used for resolution of ServiceBus.Configuration.Packaging.IGlobalPackageStore instance',
			@UNITY_CONFIGURATION,
			'containers/container/types',
			'
<type type="ServiceBus.Configuration.Packaging.IGlobalPackageStore, ServiceBus.Configuration.Packaging" mapTo="ServiceBus.GlobalPackageStore.FileSystem.FileSystemGlobalPackageStore, ServiceBus.GlobalPackageStore.FileSystem">
	<lifetime type="singleton" />
</type>
			',
			0,
			1,
			0,
			0
		)

	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IGlobalPackageStore fragment 
	-- is added to A_COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @A_COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@A_COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			0,
			1,
			0
		)

	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IGlobalPackageStore fragment 
	-- is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			0,
			1,
			0
		)

	--
	-- Ensure that Packaging.Plugins.Shares.GlobalPackageStore fragment 
	-- is created for PACKAGING section
	--
	SET	@FragmentId = '558B6BFA-17EC-49BC-BEDD-5AE7A66F0066'
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			Description,
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@FragmentId,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'Packaging.Plugins.Shares.GlobalPackageStore',
			'The share used by Global Package Store plug-in',
			@PACKAGING,
			'Shares',
			'
<Share name="GlobalPackageStore">
	<SharePath>[DSCS:MACRO:GLOBAL.PACKAGE.STORE.LOCATION]</SharePath>
</Share>
			',
			0,
			1,
			0,
			0
		)
		
	--
	-- Ensure that Packaging.Plugins.Shares.GlobalPackageStore fragment 
	-- is added to A_COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @A_COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@A_COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			0,
			1,
			0
		)

	--
	-- Ensure that Packaging.Plugins.Shares.GlobalPackageStore fragment 
	-- is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			0,
			1,
			0
		)
		
	--
	-- Ensure that GLOBAL.PACKAGE.STORE.LOCATION macro is created for the root group
	--	
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_Macros WHERE Id = @GLOBAL_PACKAGE_STORE_LOCATION AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Macros
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			Description,
			ValueType,
			ChangeSetId,
			IsActive,
			IsHistorical	
		)
		VALUES
		(
			@GLOBAL_PACKAGE_STORE_LOCATION,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'GLOBAL.PACKAGE.STORE.LOCATION',
			'Global Package Store location',
			'System.String',
			0,
			1,
			0
		)
		
	--
	-- Ensure that value is assigned to macro GLOBAL.PACKAGE.STORE.LOCATION for all applications
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @GLOBAL_PACKAGE_STORE_LOCATION ) )
		INSERT INTO Active_GroupMacroValues
		(
			RootGroupId,
			PackageId,
			GroupId,
			MacroId,
			Value,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ROOT_GROUP_ID,
			@GLOBAL_PACKAGE_STORE_LOCATION,
			'C:\ServiceBus\GlobalPackageStore',
			0,
			1,
			0
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Configured Global Package Store settings'
	COMMIT TRANSACTION
END

GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID  uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author      nvarchar( 50 )

SET @TrackingID  = '{CE064AD9-FD0D-49B5-B54D-2CC2F2C51C93}'
SET @ReferenceID = '40399'
SET @Author      = 'Admir Rogovic'

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize package ID constants
--
DECLARE @SYSTEM_SERVICES_CORE_PACKAGE uniqueidentifier
SET		@SYSTEM_SERVICES_CORE_PACKAGE = '{890B5FCC-E4C5-4AC5-BFE8-D07A26668772}'

DECLARE @SYSTEM_SERVICES_LOGGING_PACKAGE uniqueidentifier
SET		@SYSTEM_SERVICES_LOGGING_PACKAGE = '{224F50F4-3FAA-477D-9363-399CEC83B2C5}'

DECLARE @SYSTEM_SERVICES_METERING_PACKAGE uniqueidentifier
SET		@SYSTEM_SERVICES_METERING_PACKAGE = '{4CE4102E-4243-4D56-9D2B-0EBEF4C3A326}'

DECLARE @DEMO_SERVICES_PACKAGE uniqueidentifier
SET		@DEMO_SERVICES_PACKAGE = '{C222601F-0A6F-4C4E-9C9C-CB5A6DDC2365}'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun    = 0

SET @Section = 1

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION

	--
	-- Create temporary table to hold { ServiceHostData fragment ID, package name } pairs
	--
	CREATE TABLE #ServiceHostDataFragments
	(
		FragmentId uniqueidentifier,
		Package    varchar( 250 )
	)

	--
	-- Insert { ServiceHostData fragment ID, package name } pairs
	-- into temporary table
	--
	INSERT INTO #ServiceHostDataFragments
	(
		FragmentId,
		Package
	)
	SELECT DISTINCT
			f.Id,
			p.Name AS Package
	FROM	Active_Fragments f
			JOIN
			Active_Packages p
				ON	f.RootGroupId = p.RootGroupId
					AND
					f.PackageId = p.Id
	WHERE	f.RootGroupId = @ROOT_GROUP_ID
			AND
			f.PackageId IN
			(
				@SYSTEM_SERVICES_CORE_PACKAGE,
				@SYSTEM_SERVICES_LOGGING_PACKAGE,
				@SYSTEM_SERVICES_METERING_PACKAGE,
				@DEMO_SERVICES_PACKAGE
			)
			AND
			f.Name LIKE '%.ServiceHostData'

	--
	-- Make sure ServiceHostData fragments do not have any Package element
	--
	UPDATE	Active_Fragments
	SET		Contents.modify
			(
				'delete ( /ServiceHostData/Package )'
			)
	FROM	#ServiceHostDataFragments hd
	WHERE	Id = hd.FragmentId

	--
	-- Insert Package element into every ServiceHostData fragment
	--
	UPDATE	Active_Fragments
	SET		Contents.modify
			(
				'insert element Package { attribute name { sql:column( "hd.Package" ) } } as last into ( /ServiceHostData )[ 1 ]'
			)
	FROM	#ServiceHostDataFragments hd
	WHERE	Id = hd.FragmentId

	--
	-- Drop temporary table to hold { ServiceHostData fragment ID, package name } pairs
	--
	DROP TABLE #ServiceHostDataFragments

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Inserted package name into ServiceHostData fragments.'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID  uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author      nvarchar( 50 )

SET @TrackingID  = '{7AC2A505-8C28-4414-A584-76A271676B53}'
SET @ReferenceID = '45348'
SET @Author      = 'Enes Pelko'

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun    = 0

SET @Section = 1

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION

	update 
		Active_Fragments
	set
		Contents.modify('delete ( /Services )')
	where
		Name like 'ServicePool.%' 
		and Name like '%.Services'
		and RootGroupId = @ROOT_GROUP_ID

	update 
		Active_Fragments
	set
		Contents.modify('insert element Packages{""} into (/)[1]')
	where
		Name like 'ServicePool.%' 
		and Name like '%.Services'
		and RootGroupId = @ROOT_GROUP_ID
		AND Contents.exist( 'Packages' ) = 0

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Remove services associations from nodes ServicePool.???.Services'
	COMMIT TRANSACTION
END

SET @Section = 2

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION

	update 
		Active_Fragments
	set
		Contents.modify('delete ( /ServiceHostData/ServicePools )')
	where
		Name like 'Service.%' 
		and Name like '%.ServiceHostData'
		and RootGroupId = @ROOT_GROUP_ID

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Remove Service Pools association from ServiceHostData fragments.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{2A28DC3A-B3FB-40A6-8A8E-CDA26A64B4C6}'
SET @ReferenceID = '46375'
SET @Author = 'Anel Hidic'

--
DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
DECLARE @PreviousSection int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

--
DECLARE @FragmentId UNIQUEIDENTIFIER;
SET @FragmentId = '{6C181822-87D5-42D8-B01D-A72D063F6DF6}'

DECLARE @AttributeValue VARCHAR(64);
SET @AttributeValue = 'Package Manager';

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	UPDATE 
		Active_Fragments
	SET
		Name = 'SBACSecurity.PackageManager',
		Description = 'Security preferences for Package Manager module',
		Contents.modify('replace value of (/Module/@name)[1] with sql:variable("@AttributeValue")')
	WHERE
		Id = @FragmentId;

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Modules security module: Export Configuration module removed and Package Manager module added.'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID         uniqueidentifier
DECLARE @ReferenceID        nchar( 10 )
DECLARE @Author             nvarchar( 50 )

SET @PreviousTrackingID = '{995B0D93-8764-4B66-8610-D782E4009510}' -- 40398 - Packaging - CMD - Publish Package
SET @TrackingID         = '{D2CB0372-4063-42B8-BAFB-DE781F3E5D2E}'
SET @ReferenceID        = '46279' -- Macro Import - Macro Explorer and Resolver
SET @Author             = 'Admir Rogovic'

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize package ID constants
--
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--
-- Declare and initialize application and group ID constants
--
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @A_COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@A_COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

--
-- Declare and initialize section ID constants
--
DECLARE @UNITY_CONFIGURATION uniqueidentifier
SET		@UNITY_CONFIGURATION = '{29B68C85-422C-4f38-B4ED-5C917010C756}'

DECLARE @PACKAGING uniqueidentifier
SET		@PACKAGING = '{43BB9F3C-E359-471B-9E65-C02CF2E95EB0}'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @PreviousSection  int
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun    = 0

SET	@PreviousSection = 1
SET @Section         = 1

DECLARE @FragmentId  uniqueidentifier
DECLARE @Name        varchar( 250 )
DECLARE @Description varchar( 1024 )

--
-- 1. Add Unity type mapping for CSV macro value resolver
-- 2. Add Unity type mapping for XML macro value resolver
-- 3. Add Unity type mapping for external macro value resolver
-- 4. Add fragment for CSV macro value resolver configuration (Packaging.Plugins.MacroValueResolver.Csv)
-- 5. Add fragment for XML macro value resolver configuration (Packaging.Plugins.MacroValueResolver.Xml)
-- 6. Add fragment for external macro value resolver configuration (Packaging.Plugins.MacroValueResolver.External)
--
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION

	-------
	-- 1 --
	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Csv fragment 
	-- is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{D700B48B-113A-4BA3-9F91-BE56787667BF}'
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			Description,
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@FragmentId,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Csv',
			'Type mapping used for resolution of ServiceBus.Configuration.Packaging.CsvMacroValueResolver instance',
			@UNITY_CONFIGURATION,
			'containers/container/types',
			'
<type name="CSV" type="ServiceBus.Configuration.Packaging.IMacroValueResolver, ServiceBus.Configuration.Packaging" mapTo="ServiceBus.Configuration.Packaging.CsvMacroValueResolver, ServiceBus.Configuration.Packaging" />
			',
			0,
			1,
			0,
			0
		)

	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Csv fragment 
	-- is added to A_COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @A_COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@A_COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			0,
			1,
			0
		)

	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Csv fragment 
	-- is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			0,
			1,
			0
		)

	-------
	-- 2 --
	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Xml fragment 
	-- is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{E8F4F4E0-0C4C-4CFE-BCC6-92C87C7B18EC}'
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			Description,
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@FragmentId,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Xml',
			'Type mapping used for resolution of ServiceBus.Configuration.Packaging.XmlMacroValueResolver instance',
			@UNITY_CONFIGURATION,
			'containers/container/types',
			'
<type name="XML" type="ServiceBus.Configuration.Packaging.IMacroValueResolver, ServiceBus.Configuration.Packaging" mapTo="ServiceBus.Configuration.Packaging.XmlMacroValueResolver, ServiceBus.Configuration.Packaging" />
			',
			0,
			1,
			0,
			0
		)

	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Xml fragment 
	-- is added to A_COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @A_COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@A_COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			0,
			1,
			0
		)

	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Xml fragment 
	-- is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			0,
			1,
			0
		)

	-------
	-- 3 --
	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.External fragment 
	-- is created for UNITY_CONFIGURATION section
	--
	SET	@FragmentId = '{14F16B5B-5B0B-4119-9C9D-8D2342008D63}'
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			Description,
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@FragmentId,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.External',
			'Type mapping used for resolution of ServiceBus.Configuration.Packaging.ExternalMacroValueResolver instance',
			@UNITY_CONFIGURATION,
			'containers/container/types',
			'
<type name="External" type="ServiceBus.Configuration.Packaging.IMacroValueResolver, ServiceBus.Configuration.Packaging" mapTo="ServiceBus.Configuration.Packaging.ExternalMacroValueResolver, ServiceBus.Configuration.Packaging" />
			',
			0,
			1,
			0,
			0
		)

	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.External fragment 
	-- is added to A_COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @A_COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@A_COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			0,
			1,
			0
		)

	--
	-- Ensure that UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.External fragment 
	-- is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			0,
			1,
			0
		)

	-------
	-- 4 --
	--
	-- Ensure that Packaging.Plugins.MacroValueResolver.Csv fragment 
	-- is created for PACKAGING section
	--
	SET	@FragmentId = '{7C9EC712-6FA7-4A55-AC48-4273801833F7}'
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			Description,
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@FragmentId,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'Packaging.Plugins.MacroValueResolver.Csv',
			'CSV macro value resolver configuration',
			@PACKAGING,
			'MacroValueResolvers',
			'
<MacroValueResolver name="CSV" />
			',
			0,
			1,
			0,
			0
		)

	--
	-- Ensure that Packaging.Plugins.MacroValueResolver.Csv fragment 
	-- is added to A_COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @A_COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@A_COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			0,
			1,
			0
		)

	--
	-- Ensure that Packaging.Plugins.MacroValueResolver.Csv fragment 
	-- is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			0,
			1,
			0
		)

	-------
	-- 5 --
	--
	-- Ensure that Packaging.Plugins.MacroValueResolver.Xml fragment 
	-- is created for PACKAGING section
	--
	SET	@FragmentId = '{9C3C6FF1-0C39-4C56-B0ED-028069C57C98}'
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			Description,
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@FragmentId,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'Packaging.Plugins.MacroValueResolver.Xml',
			'XML macro value resolver configuration',
			@PACKAGING,
			'MacroValueResolvers',
			'
<MacroValueResolver name="XML" />
			',
			0,
			1,
			0,
			0
		)

	--
	-- Ensure that Packaging.Plugins.MacroValueResolver.Xml fragment 
	-- is added to A_COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @A_COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@A_COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			0,
			1,
			0
		)

	--
	-- Ensure that Packaging.Plugins.MacroValueResolver.Xml fragment 
	-- is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			0,
			1,
			0
		)

	-------
	-- 6 --
	--
	-- Ensure that Packaging.Plugins.MacroValueResolver.External fragment 
	-- is created for PACKAGING section
	--
	SET	@FragmentId = '{68FE58B6-0924-4CFC-B1F6-FB3E79EE4FEF}'
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			Description,
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@FragmentId,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'Packaging.Plugins.MacroValueResolver.External',
			'External macro value resolver configuration',
			@PACKAGING,
			'MacroValueResolvers',
			'
<MacroValueResolver name="External" />
			',
			0,
			1,
			0,
			0
		)

	--
	-- Ensure that Packaging.Plugins.MacroValueResolver.External fragment 
	-- is added to A_COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @A_COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@A_COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			0,
			1,
			0
		)

	--
	-- Ensure that Packaging.Plugins.MacroValueResolver.External fragment 
	-- is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			0,
			1,
			0
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Configured macro value resolvers'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)


SET @TrackingID = '692FB8A7-559B-4BE9-ACB9-91C6C987E57D'
SET @ReferenceID = '47364'
SET @Author = 'Enes Pelko'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'	


DECLARE @MacroId uniqueidentifier


EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- 1. Add value for macro LOGGING.FILENAME.LISTENER
--
SET @Section = 1

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	SET		@MacroId = 'A9B6C965-F5BB-4132-9B33-D250EF19A702' -- LOGGING.FILENAME.LISTENER
	
	BEGIN TRANSACTION
		
	--
	-- Ensure that value is assigned to macro LOGGING.FILENAME.LISTENER for root group 
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @MacroId ) )
		BEGIN			
			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@MacroId,
				'_:\ServiceBus\Logging\ServiceBus_Default.txt'
			)
		END	
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Macro value for macro LOGGING.FILENAME.LISTENER on root group level created'
	COMMIT TRANSACTION
END

--
-- 2. Add value for macro SERVICEHOST.PUBLISH.STATE
--
SET @Section = 2

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	SET		@MacroId = 'A11660AE-596E-4AD7-BBF9-CB253C9FF7C4' -- SERVICEHOST.PUBLISH.STATE
	
	BEGIN TRANSACTION
		
	--
	-- Ensure that value is assigned to macro SERVICEHOST.PUBLISH.STATE for root group 
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID AND MacroId = @MacroId ) )
		BEGIN			
			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@ROOT_GROUP_ID,
				@MacroId,
				'False'
			)
		END	
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Macro value for macro SERVICEHOST.PUBLISH.STATE on root group level created'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{DD3309DA-4FA4-40DE-A859-D72941A19222}'
SET @ReferenceID = '41277' 
SET @Author = 'Anel Hidic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

------------------------------------------------------------------------------------------------------------------
--	ENVIRONMENT IDs

DECLARE @ROOT_GROUP						UNIQUEIDENTIFIER	= '{AE8EF33D-14D5-4FB8-9702-EBA36AE6F0A4}';
DECLARE @SERVICE_POOL_SECTION_ID		UNIQUEIDENTIFIER	= '{12BB99C3-3045-498D-BD54-D2690935D845}';
DECLARE @SERVICE_POOL_PACKAGE_ID		UNIQUEIDENTIFIER	= '{4B83E58C-490F-47A7-9344-5F787903FDCC}';
DECLARE @SERVICE_HOST_GROUP				UNIQUEIDENTIFIER	= '{4FF5DBB5-A888-4C76-B222-8EE53950E511}';
DECLARE @ADMINISTRATIVE_CONSOLE_GROUP	UNIQUEIDENTIFIER	= '{B233BE84-30B6-4349-B309-F24942D8DE4B}';
DECLARE @SERVICE_BUS_CLIENT				UNIQUEIDENTIFIER	= '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}';

------------------------------------------------------------------------------------------------------------------
--	FRAGMENTS

DECLARE @SERVICE_POOL_FRAGMENT_ID					UNIQUEIDENTIFIER	= '{2475CB3E-88B5-4E0B-8DD1-5ACC61C41ADB}';
DECLARE @SERVICE_POOL_IMPLEMENTATION_FRAGMENT_ID	UNIQUEIDENTIFIER	= '{6F6751D1-AF2A-4F27-AAFB-C4CFB6EB844E}';
DECLARE @SERVICE_POOL_SERVICES_FRAGMENT_ID			UNIQUEIDENTIFIER	= '{01558D44-EAD3-4D58-BF97-2B29D0AEA083}';

------------------------------------------------------------------------------------------------------------------
--	MACROS

DECLARE @SERVICE_POOL_LOCAL_MACRO_ID		UNIQUEIDENTIFIER	= '{DF6362E2-8191-4558-AFDB-6A6F51CDE947}';
DECLARE @SERVICE_POOL_CHANNEL1_MACRO_ID		UNIQUEIDENTIFIER	= '{D9320E81-E21E-46C4-A4BD-7768DC6A5286}';
DECLARE @SERVICE_POOL_CHANNEL2_MACRO_ID		UNIQUEIDENTIFIER	= '{B62A95DC-2719-4950-8808-A1E874F55D1C}';
DECLARE @SERVICE_POOL_ASYNC_QUEUE_MACRO_ID	UNIQUEIDENTIFIER	= '{E11B2DFD-694D-4D3B-949D-ECD15306B7CB}';

------------------------------------------------------------------------------------------------------------------
--	GROUPS

DECLARE @SERVICE_POOL_GROUP_ID	UNIQUEIDENTIFIER = '{23340329-478D-401E-A735-9F9D1C0A34B1}'; 

------------------------------------------------------------------------------------------------------------------
--	FILTERS

DECLARE @SERVICE_POOL_FILTER_ID	UNIQUEIDENTIFIER = '{2A3F7EA4-B663-4AFB-9B9F-F5459ACBB040}';
------------------------------------------------------------------------------------------------------------------

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

-- Create Standard Service Pool
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- Create ServicePool fragment
	INSERT INTO Active_Fragments
	(
		Id,
		RootGroupId,
		PackageId,
		Name,
		Description,
		SectionId,
		RootXmlNode,
		Contents,
		ChangeSetId,
		IsActive,
		IsHistorical,
		AddMultiple
	)
	VALUES
	(
		@SERVICE_POOL_FRAGMENT_ID,
		@ROOT_GROUP,
		@SERVICE_POOL_PACKAGE_ID,
		'ServicePool.Standard',
		'Standard service pool',
		@SERVICE_POOL_SECTION_ID,
		'ServicePools',
		'
		<ServicePool name="Standard">
		  <Local>[DSCS:MACRO:SP.STANDARD.LOCAL]</Local>
		  <ProcessLoader>
			<UseProcessLoader>False</UseProcessLoader>
			<DisplayDebugMessages>True</DisplayDebugMessages>
			<Implementation>
			  <Resource name="ServiceBus.ServiceHost.ServicePoolLoader.exe" />
			</Implementation>
		  </ProcessLoader>
		  <RequestChannels>
			<RequestChannel name="WcfServiceRequestChannel1">
			  <RetryPeriod>00:00:10</RetryPeriod>
			  <RequestChannelFactoryData name="WCF">
				<SmartStopTimeout>00:00:30</SmartStopTimeout>
				<ServiceModel>
				  <services>
					<service name="ServiceBus.ServiceHost.RequestChannels.Wcf.Service" behaviorConfiguration="RequestChannelBehavior">
					  <endpoint address="" binding="customBinding" bindingConfiguration="CustomTcpBinding" contract="ServiceBus.ServiceHost.RequestChannels.Wcf.IService" />
					  <host>
						<baseAddresses>
						  <add baseAddress="net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SP.STANDARD.WCF1.PORT]/MyService" />
						</baseAddresses>
					  </host>
					</service>
				  </services>
				  <client>
					<endpoint name="CustomTcpBinding_IService" address="net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SP.STANDARD.WCF1.PORT]/MyService" binding="customBinding" bindingConfiguration="CustomTcpBinding" contract="ServiceBus.ServiceHost.RequestChannels.Wcf.IService" />
				  </client>
				  <behaviors>
					<serviceBehaviors>
					  <behavior name="RequestChannelBehavior">
						<serviceThrottling maxConcurrentCalls="500000" maxConcurrentSessions="500000" maxConcurrentInstances="1" />
					  </behavior>
					</serviceBehaviors>
				  </behaviors>
				  <bindings>
					<customBinding>
					  <binding name="CustomTcpBinding" openTimeout="00:00:01" sendTimeout="00:01:00" receiveTimeout="Infinite">						
						<binaryMessageEncoding maxReadPoolSize="64" maxWritePoolSize="32" maxSessionSize="4096">
						  <readerQuotas maxDepth="64" maxStringContentLength="131072" maxArrayLength="104857600" maxBytesPerRead="16384" maxNameTableCharCount="32768" />
						</binaryMessageEncoding>
						<tcpTransport manualAddressing="false" maxBufferPoolSize="524288" maxReceivedMessageSize="10485760" connectionBufferSize="65536" hostNameComparisonMode="StrongWildcard" channelInitializationTimeout="00:00:05" maxBufferSize="10485760" maxPendingConnections="10" maxOutputDelay="00:00:00.2000000" maxPendingAccepts="10" transferMode="Buffered" listenBacklog="10" portSharingEnabled="false" teredoEnabled="false">
						  <connectionPoolSettings groupName="default" leaseTimeout="00:05:00" idleTimeout="00:02:00" maxOutboundConnectionsPerEndpoint="5000" />
						</tcpTransport>
					  </binding>
					</customBinding>
				  </bindings>
				</ServiceModel>
			  </RequestChannelFactoryData>
			</RequestChannel>
			<RequestChannel name="WcfServiceRequestChannel2">
			  <RetryPeriod>00:00:10</RetryPeriod>
			  <RequestChannelFactoryData name="WCF">
				<SmartStopTimeout>00:00:30</SmartStopTimeout>
				<ServiceModel>
				  <services>
					<service name="ServiceBus.ServiceHost.RequestChannels.Wcf.Service" behaviorConfiguration="RequestChannelBehavior">
					  <endpoint address="" binding="customBinding" bindingConfiguration="CustomTcpBinding" contract="ServiceBus.ServiceHost.RequestChannels.Wcf.IService" />
					  <host>
						<baseAddresses>
						  <add baseAddress="net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SP.STANDARD.WCF2.PORT]/MyService" />
						</baseAddresses>
					  </host>
					</service>
				  </services>
				  <client>
					<endpoint name="CustomTcpBinding_IService" address="net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SP.STANDARD.WCF2.PORT]/MyService" binding="customBinding" bindingConfiguration="CustomTcpBinding" contract="ServiceBus.ServiceHost.RequestChannels.Wcf.IService" />
				  </client>
				  <behaviors>
					<serviceBehaviors>
					  <behavior name="RequestChannelBehavior">
						<serviceThrottling maxConcurrentCalls="500000" maxConcurrentSessions="500000" maxConcurrentInstances="1" />
					  </behavior>
					</serviceBehaviors>
				  </behaviors>
				  <bindings>
					<customBinding>
					  <binding name="CustomTcpBinding" openTimeout="00:00:01" sendTimeout="00:01:00" receiveTimeout="Infinite">						
						<binaryMessageEncoding maxReadPoolSize="64" maxWritePoolSize="32" maxSessionSize="4096">
						  <readerQuotas maxDepth="64" maxStringContentLength="131072" maxArrayLength="104857600" maxBytesPerRead="16384" maxNameTableCharCount="32768" />
						</binaryMessageEncoding>
						<tcpTransport manualAddressing="false" maxBufferPoolSize="524288" maxReceivedMessageSize="10485760" connectionBufferSize="65536" hostNameComparisonMode="StrongWildcard" channelInitializationTimeout="00:00:05" maxBufferSize="10485760" maxPendingConnections="10" maxOutputDelay="00:00:00.2000000" maxPendingAccepts="10" transferMode="Buffered" listenBacklog="10" portSharingEnabled="false" teredoEnabled="false">
						  <connectionPoolSettings groupName="default" leaseTimeout="00:05:00" idleTimeout="00:02:00" maxOutboundConnectionsPerEndpoint="5000" />
						</tcpTransport>
					  </binding>
					</customBinding>
				  </bindings>
				</ServiceModel>
			  </RequestChannelFactoryData>
			</RequestChannel>
		  </RequestChannels>
		  <!-- Temporary node that holds list of service pool base resources - these resources need to be copied to SP folder as well -->
		  <BusinessContexts>
			<BusinessContext name="DefaultBusinessContext">ServiceHost</BusinessContext>
		  </BusinessContexts>
		</ServicePool>
		',
		NULL,
		1, 
		0, 
		0
	)
	
	-- Add fragment to the group SERVICE_HOST_GROUP
	INSERT INTO 
		Active_GroupFragments( RootGroupId, PackageId, GroupId,	FragmentId, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @SERVICE_HOST_GROUP, @SERVICE_POOL_FRAGMENT_ID, NULL, 1, 0 )
	
	-- Add fragment to the group ADMINISTRATIVE_CONSOLE_GROUP
	INSERT INTO 
		Active_GroupFragments( RootGroupId, PackageId, GroupId,	FragmentId, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @ADMINISTRATIVE_CONSOLE_GROUP, @SERVICE_POOL_FRAGMENT_ID, NULL, 1, 0 )
	
	-- Add fragment to the group SERVICE_BUS_CLIENT
	INSERT INTO 
		Active_GroupFragments( RootGroupId, PackageId, GroupId,	FragmentId, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @SERVICE_BUS_CLIENT, @SERVICE_POOL_FRAGMENT_ID, NULL, 1, 0 )
	
	--------------------------------------------------------------------------------------------------------------
	
	-- Create ServicePoolImplementation fragment
	INSERT INTO Active_Fragments
	(
		Id,
		RootGroupId,
		PackageId,
		Name,
		Description,
		SectionId,
		RootXmlNode,
		Contents,
		ChangeSetId,
		IsActive,
		IsHistorical,
		AddMultiple
	)
	VALUES
	(
		@SERVICE_POOL_IMPLEMENTATION_FRAGMENT_ID,
		@ROOT_GROUP,
		@SERVICE_POOL_PACKAGE_ID,
		'ServicePool.Standard.Implementation',
		'Standard service pool implementation',
		@SERVICE_POOL_SECTION_ID,
		'ServicePools/ServicePool name="Standard"',
		'
		<Watchdog>
		  <WatchdogFactoryData name="WDF">
			<IsEnabled>True</IsEnabled>
			<!-- Watchdog scan period -->
			<ScanFrequency>00:00:02</ScanFrequency>
			<!-- Maximum time a thread is allowed to run -->
			<MaximumServiceExecutionTime>00:00:20.0</MaximumServiceExecutionTime>
		  </WatchdogFactoryData>
		</Watchdog>
		<ServiceRequestManager>
		  <RequestQueues>
			<RequestQueue name="Sync">
			  <Supported>
				<Synchronous />
			  </Supported>
			  <RequestQueueFactoryData name="PassThrough" />
			</RequestQueue>
			<RequestQueue name="Async">
			  <Supported>
				<Asynchronous />
			  </Supported>
			  <RequestQueueFactoryData name="Msmq">
				<QueuePath>[DSCS:MACRO:SP.STANDARD.ASYNC1.QUEUE.PATH]</QueuePath>
				<MaximumMessageSize>102400</MaximumMessageSize>
			  </RequestQueueFactoryData>
			</RequestQueue>
		  </RequestQueues>
		  <RequestClassifier>
			<RequestClassifierFactoryData name="SingleQueueClassifier">
			  <RequestQueues />
			</RequestClassifierFactoryData>
		  </RequestClassifier>
		  <RequestScheduler>
			<!-- not implementation specific elements -->
			<RequestSchedulerFactoryData name="ThreadPool">
			  <FloatingThreads>10</FloatingThreads>
			  <RequestQueues>
				<RequestQueue name="Async">
				  <ThreadCleanupMode>AsynchronousNonCached</ThreadCleanupMode>
				  <ReservedThreads>5</ReservedThreads>
				  <MaxThreads>10</MaxThreads>
				</RequestQueue>
				<RequestQueue name="Sync">
				  <ThreadCleanupMode>Synchronous</ThreadCleanupMode>
				  <ReservedThreads>50</ReservedThreads>
				  <MaxThreads>60</MaxThreads>
				</RequestQueue>
			  </RequestQueues>
			</RequestSchedulerFactoryData>
		  </RequestScheduler>
		</ServiceRequestManager>
		<ServiceSynchronizationManager>
		  <ServiceSynchronization name="SingleThreadedService">
			<ServiceSynchronizationFactoryData name="SingleThreadedService" />
		  </ServiceSynchronization>
		</ServiceSynchronizationManager>
		<Implementation>		  
		  <Resource name="ServiceBus.ServiceHost.Common.dll" />
		  <Resource name="ServiceBus.Logging.Common.dll" />
		  <Resource name="ServiceBus.PubSub.Common.dll" />
		  <Resource name="ServiceBus.Metering.Common.dll" />
		  <Resource name="ServiceBus.ServiceHost.PersistenceProviders.Request.dll" />
		  <Resource name="ServiceBus.ServiceHost.Contexts.BusinessContext.dll" />
		  <Resource name="ServiceBus.ServiceHost.Contexts.LoggingContext.dll" />
		  <Resource name="ServiceBus.ServiceHost.Contexts.DomainSecurityContext.dll" />
		  <Resource name="ServiceBus.ServiceHost.Contexts.MeteringContext.dll" />
		  <Resource name="ServiceBus.Metering.Targets.ServiceHost.dll" />
		  <Resource name="ServiceBus.ServiceHost.Contexts.ServiceCallerContext.dll" />
		  <Resource name="ServiceBus.Logging.PersistenceProviders.LogEntry.dll" />
		  <Resource name="ServiceBus.ServiceHost.ResourceManagement.dll" />
		</Implementation>
		',
		NULL,
		1, 
		0, 
		0
	)
	
	-- Add fragment to the group SERVICE_HOST_GROUP
	INSERT INTO 
		Active_GroupFragments( RootGroupId, PackageId, GroupId,	FragmentId, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @SERVICE_HOST_GROUP, @SERVICE_POOL_IMPLEMENTATION_FRAGMENT_ID, NULL, 1, 0 )
	
	-- Add fragment to the group ADMINISTRATIVE_CONSOLE_GROUP
	INSERT INTO 
		Active_GroupFragments( RootGroupId, PackageId, GroupId,	FragmentId, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @ADMINISTRATIVE_CONSOLE_GROUP, @SERVICE_POOL_IMPLEMENTATION_FRAGMENT_ID, NULL, 1, 0 )
	
	--------------------------------------------------------------------------------------------------------------

	-- Create ServicePoolServices fragment
	INSERT INTO Active_Fragments
	(
		Id,
		RootGroupId,
		PackageId,
		Name,
		Description,
		SectionId,
		RootXmlNode,
		Contents,
		ChangeSetId,
		IsActive,
		IsHistorical,
		AddMultiple
	)
	VALUES
	(
		@SERVICE_POOL_SERVICES_FRAGMENT_ID,
		@ROOT_GROUP,
		@SERVICE_POOL_PACKAGE_ID,
		'ServicePool.Standard.Services',
		'Service-service pool associations for Standard service pool',
		@SERVICE_POOL_SECTION_ID,
		'ServicePoolServices/ServicePool name="Standard"',
		'<Packages />',
		NULL,
		1, 
		0, 
		0
	)
	
	-- Add fragment to the group SERVICE_HOST_GROUP
	INSERT INTO 
		Active_GroupFragments( RootGroupId, PackageId, GroupId,	FragmentId, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @SERVICE_HOST_GROUP, @SERVICE_POOL_SERVICES_FRAGMENT_ID, NULL, 1, 0 )
	
	-- Add fragment to the group ADMINISTRATIVE_CONSOLE_GROUP
	INSERT INTO 
		Active_GroupFragments( RootGroupId, PackageId, GroupId,	FragmentId, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @ADMINISTRATIVE_CONSOLE_GROUP, @SERVICE_POOL_SERVICES_FRAGMENT_ID, NULL, 1, 0 )
	
	-- Add fragment to the group SERVICE_BUS_CLIENT
	INSERT INTO 
		Active_GroupFragments( RootGroupId, PackageId, GroupId,	FragmentId, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @SERVICE_BUS_CLIENT, @SERVICE_POOL_SERVICES_FRAGMENT_ID, NULL, 1, 0 )
	
	--------------------------------------------------------------------------------------------------------------
	
	-- Create LOCAL macro
	INSERT INTO Active_Macros
	(
		Id,
		RootGroupId,
		PackageId,
		Name,
		Description,
		ValueType,
		ChangeSetId,
		IsActive,
		IsHistorical
	)
	VALUES
	(
		@SERVICE_POOL_LOCAL_MACRO_ID,
		@ROOT_GROUP,
		@SERVICE_POOL_PACKAGE_ID,
		'SP.STANDARD.LOCAL',
		'Indicates whether ServicePool Standard is local',
		'System.String',
		NULL,
		1,
		0	
	)
	
	-- Add macro value for the group ENVIRONMENT
	INSERT INTO 
		Active_GroupMacroValues( RootGroupId, PackageId, GroupId, MacroId, Value, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @ROOT_GROUP, @SERVICE_POOL_LOCAL_MACRO_ID, 'False', NULL, 1, 0 );
	
	-- Add macro value for the group SERVICE_HOST_GROUP	
	INSERT INTO 
		Active_GroupMacroValues( RootGroupId, PackageId, GroupId, MacroId, Value, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @SERVICE_HOST_GROUP, @SERVICE_POOL_LOCAL_MACRO_ID, 'True', NULL, 1, 0 );
	
	--------------------------------------------------------------------------------------------------------------
	
	-- Create Channel 1 macro
	INSERT INTO Active_Macros
	(
		Id,
		RootGroupId,
		PackageId,
		Name,
		Description,
		ValueType,
		ChangeSetId,
		IsActive,
		IsHistorical
	)
	VALUES
	(
		@SERVICE_POOL_CHANNEL1_MACRO_ID,
		@ROOT_GROUP,
		@SERVICE_POOL_PACKAGE_ID,
		'SP.STANDARD.WCF1.PORT',
		'ServicePool Standard WcfServiceRequestChannel1 port',
		'System.String',
		NULL,
		1,
		0	
	);
	
	-- Add macro value for the group ENVIRONMENT 
	INSERT INTO 
		Active_GroupMacroValues( RootGroupId, PackageId, GroupId, MacroId, Value, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @ROOT_GROUP, @SERVICE_POOL_CHANNEL1_MACRO_ID, '62800', NULL, 1, 0 );
	
	--------------------------------------------------------------------------------------------------------------
	
	-- Create Channel 2 macro
	INSERT INTO Active_Macros
	(
		Id,
		RootGroupId,
		PackageId,
		Name,
		Description,
		ValueType,
		ChangeSetId,
		IsActive,
		IsHistorical
	)
	VALUES
	(
		@SERVICE_POOL_CHANNEL2_MACRO_ID,
		@ROOT_GROUP,
		@SERVICE_POOL_PACKAGE_ID,
		'SP.STANDARD.WCF2.PORT',
		'ServicePool Standard WcfServiceRequestChannel2 port',
		'System.String',
		NULL,
		1,
		0	
	);
	
	-- Add macro value for the group ENVIRONMENT 
	INSERT INTO 
		Active_GroupMacroValues( RootGroupId, PackageId, GroupId, MacroId, Value, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @ROOT_GROUP, @SERVICE_POOL_CHANNEL2_MACRO_ID, '62801', NULL, 1, 0 );
	
	--------------------------------------------------------------------------------------------------------------
	
	-- Create async queue macro
	INSERT INTO Active_Macros
	(
		Id,
		RootGroupId,
		PackageId,
		Name,
		Description,
		ValueType,
		ChangeSetId,
		IsActive,
		IsHistorical
	)
	VALUES
	(
		@SERVICE_POOL_ASYNC_QUEUE_MACRO_ID,
		@ROOT_GROUP,
		@SERVICE_POOL_PACKAGE_ID,
		'SP.STANDARD.ASYNC1.QUEUE.PATH',
		'Msmq path for Async request queue in Standard ServicePool',
		'System.String',
		NULL,
		1,
		0	
	);
	
	-- Add macro value for the group ENVIRONMENT
	INSERT INTO 
		Active_GroupMacroValues( RootGroupId, PackageId, GroupId, MacroId, Value, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @ROOT_GROUP, @SERVICE_POOL_ASYNC_QUEUE_MACRO_ID, '.\Private$\ServiceBus.Standard.AsyncRequestQueue1', NULL, 1, 0 );
	
	--------------------------------------------------------------------------------------------------------------
	
	-- Create service pool group
	INSERT INTO 
		Active_Groups ( Id, RootGroupId, PackageId, Name, Description, GroupTemplateId, IsRootGroup, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @SERVICE_POOL_GROUP_ID, @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, 'ServicePool.Standard', 'Standard service pool group', NULL, 0, 0, 1, 0  );
	
	-- Add group to the group SERVICE_HOST_GROUP
	INSERT INTO
		Active_GroupGroups( RootGroupId, PackageId, GroupId, ChildGroupId, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @SERVICE_HOST_GROUP, @SERVICE_POOL_GROUP_ID, 0, 1, 0 );
	
	--------------------------------------------------------------------------------------------------------------
	
	-- Create service pool filter
	INSERT INTO 
		Active_Filters(	Id, RootGroupId, PackageId, GroupId, Name, Description, MachineName, AppName, AppPath, AppConfigFilePath, AppVersion,
						AppUser, ChangeSetId, IsActive, IsHistorical )
		VALUES
			(	@SERVICE_POOL_FILTER_ID, @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @SERVICE_POOL_GROUP_ID, 'ServicePool.Standard', 
				'Standard service pool filter', NULL, NULL, NULL, NULL, NULL, NULL, 0, 1, 0 );
	
	-- Add attribute value to the filter
	INSERT INTO 
		Active_FilterAttributeValues( RootGroupId, PackageId, FilterId, AttributeId, Value, ChangeSetId, IsActive, IsHistorical )
	VALUES
		( @ROOT_GROUP, @SERVICE_POOL_PACKAGE_ID, @SERVICE_POOL_FILTER_ID, '{D300464A-F94B-44EE-AE84-5B5774EE47B8}', 'Standard', 0, 1, 0 );
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created standard/default service pool'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author nvarchar( 50 )

SET @TrackingID = '5B0DEC52-20F0-4422-A6A2-DECC95C8B3AD'
SET @ReferenceID = '47829'
SET @Author = 'Enes Pelko'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1 -- Created COMMANDLINE_RUNTESTCASES application

--
-- Add service that can invoke any service
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST_SECTIONID uniqueidentifier
	SET		@SERVICEHOST_SECTIONID = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @SERVICEBUS_CLIENT uniqueidentifier
	SET		@SERVICEBUS_CLIENT = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
	
	DECLARE	@SYSTEMSERVICES_PACKAGE uniqueidentifier
	SET		@SYSTEMSERVICES_PACKAGE = '890B5FCC-E4C5-4AC5-BFE8-D07A26668772'

	BEGIN TRANSACTION
	
	DECLARE @Name varchar( 250 )
	DECLARE @Description varchar( 1024 )
	DECLARE @RootXmlNode varchar( 1024 )
	DECLARE @FragmentId uniqueidentifier
	DECLARE @FragmentContent varchar( max )

	--
	-- 1. Ensure that 'Service.ServiceHost.Status.GetBasicSPInfo' fragment is created for SERVICEHOST section and added to all required groups
	--
	SET	@FragmentId = 'A907B645-3EF5-4DA6-8C49-AE401CE4C8DD'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceHost.Status.GetBasicSPInfo'
			SET @Description = 'Service.ServiceHost.Status.GetBasicSPInfo'
			SET @RootXmlNode = 'Services/ServiceGroup name="StatusServices"'
			
			SET @FragmentContent = 
			'<Service name="ServiceHost.Status.GetBasicSPInfo">
  <ServiceContract>
    <Inputs />
    <Results>
      <Result name="AppDomainName">
        <MapTo>AppDomainName</MapTo>
        <Type>
          <Name>System.String</Name>
          <Enforce>False</Enforce>
        </Type>
      </Result>
      <Result name="AppDomainId">
        <MapTo>AppDomainId</MapTo>
        <Type>
          <Name>System.Int32</Name>
          <Enforce>False</Enforce>
        </Type>
      </Result>
      <Result name="ProcessName">
        <MapTo>ProcessName</MapTo>
        <Type>
          <Name>System.String</Name>
          <Enforce>False</Enforce>
        </Type>
      </Result>
      <Result name="ProcessId">
        <MapTo>ProcessId</MapTo>
        <Type>
          <Name>System.Int32</Name>
          <Enforce>False</Enforce>
        </Type>
      </Result>
      <Result name="MachineName">
        <MapTo>MachineName</MapTo>
        <Type>
          <Name>System.String</Name>
          <Enforce>False</Enforce>
        </Type>
      </Result>
      <Result name="CurrentUser">
        <MapTo>CurrentUser</MapTo>
        <Type>
          <Name>System.String</Name>
          <Enforce>False</Enforce>
        </Type>
      </Result>
    </Results>
    <Description>ServiceHost diagnostic service which will return basic info about Service Host and Service Pool.</Description>
  </ServiceContract>
</Service>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEMSERVICES_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEBUS_CLIENT AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEBUS_CLIENT, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
			
	
	--
	-- 2. Ensure that 'Service.ServiceHost.Status.GetBasicSPInfo.ServiceFactoryData' fragment is created for SERVICEHOST section and added to all required groups
	--
	SET	@FragmentId = 'B8F54261-58B7-4A9B-8396-8F34244A11B8'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceHost.Status.GetBasicSPInfo.ServiceFactoryData'
			SET @Description = 'Service.ServiceHost.Status.GetBasicSPInfo.ServiceFactoryData'
			SET @RootXmlNode = 'Services/ServiceGroup name="StatusServices"/Service name="ServiceHost.Status.GetBasicSPInfo"'
			
			SET @FragmentContent = 
			'<ServiceFactoryData name="WWF">
  <Activity xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mv="clr-namespace:Microsoft.VisualBasic;assembly=System" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:s1="clr-namespace:System;assembly=System" xmlns:s2="clr-namespace:System;assembly=System.Xml" xmlns:s3="clr-namespace:System;assembly=System.Core" xmlns:s4="clr-namespace:System;assembly=System.ServiceModel" xmlns:sa="clr-namespace:System.Activities;assembly=System.Activities" xmlns:sad="clr-namespace:System.Activities.Debugger;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System" xmlns:scg1="clr-namespace:System.Collections.Generic;assembly=System.ServiceModel" xmlns:scg2="clr-namespace:System.Collections.Generic;assembly=System.Core" xmlns:scg3="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:sd1="clr-namespace:System.Diagnostics;assembly=System" xmlns:sd2="clr-namespace:System.Diagnostics;assembly=System.Core" xmlns:sd3="clr-namespace:System.Diagnostics;assembly=mscorlib" xmlns:sl="clr-namespace:System.Linq;assembly=System.Core" xmlns:ssp="clr-namespace:System.Security.Principal;assembly=mscorlib" xmlns:st="clr-namespace:System.Text;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" mc:Ignorable="sap" x:Class="WorkflowConsoleApplication1.Workflow1">
    <x:Members>
      <x:Property Name="AppDomainName" Type="OutArgument(x:String)" />
      <x:Property Name="AppDomainId" Type="OutArgument(x:Int32)" />
      <x:Property Name="ProcessName" Type="OutArgument(x:String)" />
      <x:Property Name="ProcessId" Type="OutArgument(x:Int32)" />
      <x:Property Name="MachineName" Type="OutArgument(x:String)" />
      <x:Property Name="CurrentUser" Type="OutArgument(x:String)" />
    </x:Members>
    <sap:VirtualizedContainerService.HintSize>304,706</sap:VirtualizedContainerService.HintSize>
    <mva:VisualBasic.Settings>Assembly references and imported namespaces for internal implementation</mva:VisualBasic.Settings>
    <Sequence sad:XamlDebuggerXmlReader.FileName="e:\local\WorkflowConsoleApplication1\WorkflowConsoleApplication1\Workflow1.xaml" sap:VirtualizedContainerService.HintSize="264,666">
      <sap:WorkflowViewStateService.ViewState>
        <scg3:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg3:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Assign sap:VirtualizedContainerService.HintSize="242,57">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[AppDomainName]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[AppDomain.CurrentDomain.FriendlyName]</InArgument>
        </Assign.Value>
      </Assign>
      <Assign sap:VirtualizedContainerService.HintSize="242,57">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[AppDomainId]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">[AppDomain.CurrentDomain.Id]</InArgument>
        </Assign.Value>
      </Assign>
      <Assign sap:VirtualizedContainerService.HintSize="242,57">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[ProcessName]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[System.Diagnostics.Process.GetCurrentProcess().ProcessName]</InArgument>
        </Assign.Value>
      </Assign>
      <Assign sap:VirtualizedContainerService.HintSize="242,57">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[ProcessId]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">[System.Diagnostics.Process.GetCurrentProcess().Id]</InArgument>
        </Assign.Value>
      </Assign>
      <Assign sap:VirtualizedContainerService.HintSize="242,57">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[MachineName]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[Environment.MachineName]</InArgument>
        </Assign.Value>
      </Assign>
      <Assign sap:VirtualizedContainerService.HintSize="242,57">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[CurrentUser]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[System.Security.Principal.WindowsIdentity.GetCurrent().Name]</InArgument>
        </Assign.Value>
      </Assign>
    </Sequence>
  </Activity>
  <Implementation />
  <Arguments>
    <Argument name="AppDomainName">
      <MapTo>AppDomainName</MapTo>
    </Argument>
    <Argument name="AppDomainId">
      <MapTo>AppDomainId</MapTo>
    </Argument>
    <Argument name="ProcessName">
      <MapTo>ProcessName</MapTo>
    </Argument>
    <Argument name="ProcessId">
      <MapTo>ProcessId</MapTo>
    </Argument>
    <Argument name="MachineName">
      <MapTo>MachineName</MapTo>
    </Argument>
    <Argument name="CurrentUser">
      <MapTo>CurrentUser</MapTo>
    </Argument>
  </Arguments>
</ServiceFactoryData>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEMSERVICES_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )	

	--
	-- 3. Ensure that 'Service.ServiceHost.Status.GetBasicSPInfo.ServiceHostData' fragment is created for SERVICEHOST section and added to all required groups
	--
	SET	@FragmentId = 'A889DE45-BCF3-40F2-ACC4-56ADD9B20DCA'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceHost.Status.GetBasicSPInfo.ServiceHostData'
			SET @Description = 'Service.ServiceHost.Status.GetBasicSPInfo.ServiceHostData'
			SET @RootXmlNode = 'Services/ServiceGroup name="StatusServices"/Service name="ServiceHost.Status.GetBasicSPInfo"'
			
			SET @FragmentContent = 
			'<ServiceHostData>
  <Package name="System.Services.Core" />
  <LoadOnServicePoolStart>False</LoadOnServicePoolStart>
  <ExecutionType>NotSpecified</ExecutionType>
  <PersistPending>False</PersistPending>
  <PersistActive>False</PersistActive>
</ServiceHostData>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEMSERVICES_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEBUS_CLIENT AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEBUS_CLIENT, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
			
	
	--
	-- 4. Ensure that 'Service.ServiceHost.Status.GetBasicSPInfo.ServicePermissions' fragment is created for SERVICEHOST section and added to all required groups
	--
	SET	@FragmentId = '9C8F3625-F785-4EEE-B47E-80FAB3588D9B'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Service.ServiceHost.Status.GetBasicSPInfo.ServicePermissions'
			SET @Description = 'Service.ServiceHost.Status.GetBasicSPInfo.ServicePermissions'
			SET @RootXmlNode = 'Services/ServiceGroup name="StatusServices"/Service name="ServiceHost.Status.GetBasicSPInfo"'
			
			SET @FragmentContent = '<ServicePermissions />'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEMSERVICES_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )	
			

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added service Service.ServiceHost.Status.GetBasicSPInfo'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID         uniqueidentifier
DECLARE @ReferenceID        nchar( 10 )
DECLARE @Author             nvarchar( 50 )

SET @PreviousTrackingID = '{25EC733A-30B5-494D-AE2D-A24B8245CC42}' -- @PreviousReferenceID = 28914 (Added SchemaVersion into ServiceBus.Configuration section)
SET @TrackingID = '{68656C1D-879B-4E5A-9371-5C12BEBA44ED}'
SET @ReferenceID = '45506'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @PreviousSection  int
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name        varchar( 250 )
DECLARE @Description varchar( 1024 )
DECLARE @FragmentId  uniqueidentifier

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize package ID constants
--
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

--
-- Declare and initialize section ID constants
--
DECLARE @CONFIGURATION uniqueidentifier
SET		@CONFIGURATION = '{23D28783-F431-4dc9-83E5-14390D15686B}'

--
-- 1.1. Create Configuration.PlatformVersion fragment for CONFIGURATION section
-- 1.2. Add Configuration.PlatformVersion fragment to CONFIGURATION_SERVICE application
-- 2.1. Create Configuration.MinimumClientVersion.{AppName} fragments for CONFIGURATION section
-- 2.2. Associate Configuration.MinimumClientVersion.{AppName} fragments with "ServiceBus Configuration Service" group
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	---------
	-- 1.1 --
	--
	-- Ensure that Configuration.PlatformVersion fragment is created for CONFIGURATION section
	--
	SET	@FragmentId = '{7BDDD428-2A4F-44B2-824B-B99E695DA2BC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Configuration.PlatformVersion'
			SET @Description = 'The current platform version'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents,
				ChangeSetId,
				IsActive,
				IsHistorical,
				AddMultiple
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@CONFIGURATION,
				NULL,
				'<PlatformVersion>3.3.0.22</PlatformVersion>',
				0,
				1,
				0,
				0
			)
		END
	
	---------
	-- 1.2 --
	--
	-- Ensure that Configuration.PlatformVersion fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@CONFIGURATION_SERVICE,
			@FragmentId,
			0,
			1,
			0
		)

	---------------
	-- 2.1 & 2.2 --
	--
	-- Ensure that Configuration.MinimumClientVersion.SERVICEBUS.ADMINISTRATION.SHELL fragment is created for CONFIGURATION section
	--
	SET	@FragmentId = '{80BA16F7-B9EC-44FF-810D-BB1407CF772A}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Configuration.MinimumClientVersion.SERVICEBUS.ADMINISTRATION.SHELL'
			SET @Description = 'The minimum version of SERVICEBUS.ADMINISTRATION.SHELL application that can connect to Configuration Service'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents,
				ChangeSetId,
				IsActive,
				IsHistorical,
				AddMultiple
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@CONFIGURATION,
				'MinimumClientVersions',
				'<Client name="SERVICEBUS.ADMINISTRATION.SHELL">3.3.0.22</Client>',
				0,
				1,
				0,
				0
			)
		END
 
	--
	-- Ensure that Configuration.MinimumClientVersion.SERVICEBUS.ADMINISTRATION.SHELL fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@CONFIGURATION_SERVICE,
			@FragmentId,
			0,
			1,
			0
		)
 
	--
	-- Ensure that Configuration.MinimumClientVersion.SERVICEBUS.CONFIGURATION.SERVICE fragment is created for CONFIGURATION section
	--
	SET	@FragmentId = '{FD12B33B-0A83-45A1-99AE-FBD7CE51260E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Configuration.MinimumClientVersion.SERVICEBUS.CONFIGURATION.SERVICE'
			SET @Description = 'The minimum version of SERVICEBUS.CONFIGURATION.SERVICE application that can connect to Configuration Service'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents,
				ChangeSetId,
				IsActive,
				IsHistorical,
				AddMultiple
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@CONFIGURATION,
				'MinimumClientVersions',
				'<Client name="SERVICEBUS.CONFIGURATION.SERVICE">3.3.0.22</Client>',
				0,
				1,
				0,
				0
			)
		END
 
	--
	-- Ensure that Configuration.MinimumClientVersion.SERVICEBUS.CONFIGURATION.SERVICE fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@CONFIGURATION_SERVICE,
			@FragmentId,
			0,
			1,
			0
		)
 
	--
	-- Ensure that Configuration.MinimumClientVersion.SERVICEBUS.RUNTESTCASE fragment is created for CONFIGURATION section
	--
	SET	@FragmentId = '{9D15D2E6-1613-47B1-A210-C6323DAB4A9C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Configuration.MinimumClientVersion.SERVICEBUS.RUNTESTCASE'
			SET @Description = 'The minimum version of SERVICEBUS.RUNTESTCASE application that can connect to Configuration Service'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents,
				ChangeSetId,
				IsActive,
				IsHistorical,
				AddMultiple
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@CONFIGURATION,
				'MinimumClientVersions',
				'<Client name="SERVICEBUS.RUNTESTCASE">3.3.0.22</Client>',
				0,
				1,
				0,
				0
			)
		END
 
	--
	-- Ensure that Configuration.MinimumClientVersion.SERVICEBUS.RUNTESTCASE fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@CONFIGURATION_SERVICE,
			@FragmentId,
			0,
			1,
			0
		)
 
	--
	-- Ensure that Configuration.MinimumClientVersion.SERVICEBUS.SERVICEHOST.SERVICE fragment is created for CONFIGURATION section
	--
	SET	@FragmentId = '{20E1CC4A-44AB-4DED-9885-F2F65896A413}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Configuration.MinimumClientVersion.SERVICEBUS.SERVICEHOST.SERVICE'
			SET @Description = 'The minimum version of SERVICEBUS.SERVICEHOST.SERVICE application that can connect to Configuration Service'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents,
				ChangeSetId,
				IsActive,
				IsHistorical,
				AddMultiple
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@CONFIGURATION,
				'MinimumClientVersions',
				'<Client name="SERVICEBUS.SERVICEHOST.SERVICE">3.3.0.22</Client>',
				0,
				1,
				0,
				0
			)
		END
 
	--
	-- Ensure that Configuration.MinimumClientVersion.SERVICEBUS.SERVICEHOST.SERVICE fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@CONFIGURATION_SERVICE,
			@FragmentId,
			0,
			1,
			0
		)
 
	--
	-- Ensure that Configuration.MinimumClientVersion.ServiceBus.ServiceHost.ServicePoolLoader fragment is created for CONFIGURATION section
	--
	SET	@FragmentId = '{6FFAEC3B-E34D-4BB4-8FAA-0158C7232B7E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Configuration.MinimumClientVersion.ServiceBus.ServiceHost.ServicePoolLoader'
			SET @Description = 'The minimum version of ServiceBus.ServiceHost.ServicePoolLoader application that can connect to Configuration Service'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents,
				ChangeSetId,
				IsActive,
				IsHistorical,
				AddMultiple
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@CONFIGURATION,
				'MinimumClientVersions',
				'<Client name="ServiceBus.ServiceHost.ServicePoolLoader">3.3.0.22</Client>',
				0,
				1,
				0,
				0
			)
		END
 
	--
	-- Ensure that Configuration.MinimumClientVersion.ServiceBus.ServiceHost.ServicePoolLoader fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@CONFIGURATION_SERVICE,
			@FragmentId,
			0,
			1,
			0
		)

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added PlatformVersion and MinimumClientVersion into ServiceBus.Configuration section'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID         uniqueidentifier
DECLARE @ReferenceID        nchar( 10 )
DECLARE @Author             nvarchar( 50 )

SET @PreviousTrackingID = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}' -- 15634: Reorganize Initial Config
SET @TrackingID = '{955FF008-BF77-4CD0-BD21-0F2C85B84AA9}'
SET @ReferenceID = '48395'
SET @Author = 'Admir Rogovic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @PreviousSection  int
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 5	-- Created filters for the applications

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize package ID constants
--
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'	

DECLARE @Name        varchar( 250 )
DECLARE @Description varchar( 1024 )

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Add SB filter to ServiceBus Administrative Console application
--
SET @Section = 1
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--
	-- Ensure that ServiceBus Command Prompt filter is created for ServiceBus Administrative Console application
	--	
	DECLARE	@FilterId uniqueidentifier
	SET	@FilterId = '{7F59255F-378B-4B24-9294-5CBBE98DC093}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Filters WHERE Id = @FilterId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus Command Prompt'
			SET @Description = 'This filter is matched by any version of sb application running on any machine under any account regardless of application path and config path.'
			
			INSERT INTO Active_Filters
			(
				Id,
				RootGroupId,
				PackageId,
				GroupId,
				Name,
				Description,
				MachineName,
				AppName,
				AppPath,
				AppConfigFilePath,
				AppVersion,
				AppUser,
				ChangeSetId,
				IsActive,
				IsHistorical
			)
			VALUES
			(
				@FilterId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@ADMINISTRATIVE_CONSOLE,
				@Name,
				@Description,
				NULL,
				'SB',
				NULL,
				NULL,
				NULL,
				NULL,
				0,
				1,
				0
			)
		END

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added SB filter to ServiceBus Administrative Console application'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID         uniqueidentifier
DECLARE @ReferenceID        nchar( 10 )
DECLARE @Author             nvarchar( 50 )

SET @PreviousTrackingID  = '{0C369ACD-CA94-4065-A434-B3AEA38DB3A6}'	-- 40385: Packaging - System - ServiceFactoryData inclusion
SET @TrackingID          = '{C31EB5F0-C470-4512-B45B-6922557F8A84}'
SET @ReferenceID         = '48441'
SET @Author              = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @PreviousSection  int
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun    = 0

SET @PreviousSection = 1	-- Configuration.Plugins.SectionBuild.IncludeServiceFactoryData fragment created
SET @Section         = 1

--
-- Constants used by DataFix script
--

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize System package ID constant
--
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

--
-- Declare and initialize section ID constants
--
DECLARE @CONFIGURATION uniqueidentifier
SET		@CONFIGURATION = '{23D28783-F431-4DC9-83E5-14390D15686B}'

--
-- 1. Ensure that Configuration.Plugins.SectionBuild.IncludeServiceFactoryData fragment has Order element
-- 2. Add Configuration.Plugins.SectionBuild.FixUpMacroInWwfService fragment to ServiceBus.Configuration section
--
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION

	-----
	-- 1. Ensure that Configuration.Plugins.SectionBuild.IncludeServiceFactoryData fragment has Order element
	--
	DECLARE @FragmentId uniqueidentifier	
	SET		@FragmentId = '{D0BE8120-467C-4CB7-93C3-6417531F3C7D}'

	--
	-- Ensure that Order element does not exist
	--
	UPDATE	Active_Fragments
	SET		Contents.modify( 'delete /SectionBuildPlugin[@name="IncludeServiceFactoryData"]/Order' )
	WHERE	Id = @FragmentId

	--
	-- Add correct Order element
	--
	UPDATE	Active_Fragments
	SET		Contents.modify(
				'insert element Order { "1" }
				 as first
				 into ( /SectionBuildPlugin[@name="IncludeServiceFactoryData"] )[ 1 ]' )
	WHERE	Id = @FragmentId
	
	-----
	-- 2. Add Configuration.Plugins.SectionBuild.FixUpMacroInWwfService fragment to ServiceBus.Configuration section
	--
	DECLARE @Name        varchar( 250 )
	DECLARE @Description varchar( 1024 )
	
	--
	-- Ensure that Configuration.Plugins.SectionBuild.FixUpMacroInWwfService is created for CONFIGURATION section
	--
	SET	@FragmentId = '{2D017F27-5645-4B0B-9513-AF96BD3975E8}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name        = 'Configuration.Plugins.SectionBuild.FixUpMacroInWwfService'
			SET @Description = 'The configuration that contains information necessary to create FixUpMacroInWwfService section build plug-in.'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents,
				ChangeSetId,
				IsActive,
				IsHistorical,
				AddMultiple
			)
			VALUES
			( 
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@CONFIGURATION,
				'SectionBuildPlugins',
				'
				<SectionBuildPlugin name="FixUpMacroInWwfService">
					<Order>2</Order>
					<Implementation>
						<Assembly>ServiceBus.Configuration.Plugins.SectionBuild.FixUpMacroInWwfService.dll</Assembly>
						<Type>ServiceBus.Configuration.Plugins.SectionBuild.FixUpMacroInWwfServiceSectionBuildPlugin</Type>
					</Implementation>
				</SectionBuildPlugin>
				',
				0,
				1,
				0,
				0
			)
		END
	
	--
	-- Ensure that Configuration.Plugins.SectionBuild.FixUpMacroInWwfService fragment is added to CONFIGURATION_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical		
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@CONFIGURATION_SERVICE,
			@FragmentId,
			0,
			1,
			0
		)	

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added FixUpMacroInWwfService section build plug-in configuration to ServiceBus.Configuration section'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{525519D9-A98E-4A61-A381-4F9626D63D32}'
SET @ReferenceID = '48811'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)
DECLARE @FragmentId uniqueidentifier
--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

-- Sections
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE @ADMINISTRATION_CONFIGURATION uniqueidentifier
SET		@ADMINISTRATION_CONFIGURATION = '{B93A5E48-CD5B-4cb2-B8A2-C6D2FA2C233D}'

-- Packages
DECLARE	@SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

-- Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{C7A19ADD-A7FE-44AD-9F7A-54B877BCD751}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
			SET @Description = 'ServiceBus.ServiceHost.WwfActivity.CreateLog.dll resource'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="WWFActivities"',
				'<Resource name="ServiceBus.ServiceHost.WwfActivity.CreateLog.dll" id="e944776a-48ef-40c0-bb7b-35bc6d3b92db">
  <FileName>ServiceBus.ServiceHost.WwfActivity.CreateLog.dll</FileName>
  <Dependencies>
    <Resource name="ServiceBus.ServiceHost.WWF.Interfaces.dll" />
  </Dependencies>
</Resource>'
			)
		END
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
	
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@SERVICEHOST_SERVICE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
	COMMIT TRANSACTION
END

-- WwfActivityResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{6C4A79F8-AF12-43FC-8E88-928073870284}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'WwfActivityResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
			SET @Description = 'WwfActivityResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/WwfActivityResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.WwfActivity.CreateLog.dll">
  <Activity id="ServiceBus.ServiceHost.WwfActivity.CreateLog">
    <ResourceId>ServiceBus.ServiceHost.WwfActivity.CreateLog.dll</ResourceId>
    <TypeName>ServiceBus.ServiceHost.WwfActivity.CreateLog</TypeName>
    <AssemblyName>ServiceBus.ServiceHost.WwfActivity.CreateLog</AssemblyName>
    <Category>Custom Activities</Category>
    <DisplayName>CreateLog</DisplayName>
  </Activity>
</Resource>'
			)
		END
	--
	-- Ensure that WwfActivityResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: WwfActivityResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
	COMMIT TRANSACTION
END

-- ContractResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{DA5F81AC-7CF3-4295-8FD7-739270C377D1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ContractResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
			SET @Description = 'ContractResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/ContractResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.WwfActivity.CreateLog.dll">
  <Type id="ServiceBus.ServiceHost.WwfActivity.Properties.Settings">
    <ReferenceCounter>0</ReferenceCounter>
  </Type>
  <Type id="ServiceBus.ServiceHost.WwfActivity.CreateLogDesigner">
    <ReferenceCounter>0</ReferenceCounter>
  </Type>
  <Type id="ServiceBus.ServiceHost.WwfActivity.CreateLog">
    <ReferenceCounter>0</ReferenceCounter>
  </Type>
</Resource>'
			)
		END
	--
	-- Ensure that ContractResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: ContractResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
	COMMIT TRANSACTION
END

-- StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll
SET @Section = 4
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{27B113E2-035F-47A7-BC74-72BF8F925ED1}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
			SET @Description = 'StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/StepResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.WwfActivity.CreateLog.dll" />'
			)
		END
	--
	-- Ensure that StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: StepResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
	COMMIT TRANSACTION
END

-- BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll
SET @Section = 5
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{E7904C5A-8FEE-4695-99E7-ADA6AE2E4983}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
			SET @Description = 'BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'ObserverData/BseModuleResourceObserver',
				'<Resource id="ServiceBus.ServiceHost.WwfActivity.CreateLog.dll" />'
			)
		END
	--
	-- Ensure that BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: BseModuleResourceObserver.Resource.ServiceBus.ServiceHost.WwfActivity.CreateLog.dll'
	COMMIT TRANSACTION
END

-- WwfActivity.ServiceBus.ServiceHost.WwfActivity.CreateLog
SET @Section = 6
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{E6D8162C-1CB2-41BC-90D2-CF38EFD9FB45}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'WwfActivity.ServiceBus.ServiceHost.WwfActivity.CreateLog'
			SET @Description = 'WwfActivity.ServiceBus.ServiceHost.WwfActivity.CreateLog'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@ADMINISTRATION_CONFIGURATION,
				'WwfActivityCatalog',
				'<Activity id="ServiceBus.ServiceHost.WwfActivity.CreateLog">
  <ResourceId>ServiceBus.ServiceHost.WwfActivity.CreateLog.dll</ResourceId>
  <TypeName>ServiceBus.ServiceHost.WwfActivity.CreateLog</TypeName>
  <AssemblyName>ServiceBus.ServiceHost.WwfActivity.CreateLog</AssemblyName>
  <Category>Custom Activities</Category>
  <DisplayName>CreateLog</DisplayName>
</Activity>'
			)
		END
	--
	-- Ensure that WwfActivity.ServiceBus.ServiceHost.WwfActivity.CreateLog fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new fragment: WwfActivity.ServiceBus.ServiceHost.WwfActivity.CreateLog'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID         uniqueidentifier
DECLARE @ReferenceID        nchar( 10 )
DECLARE @Author             nvarchar( 50 )

SET @PreviousTrackingID  = '{995B0D93-8764-4B66-8610-D782E4009510}'	-- 40398: Packaging - CMD - Publish Package
SET @TrackingID          = '{43D0BA38-2291-4B86-A3AD-5898AED339E1}'
SET @ReferenceID         = '48839'
SET @Author              = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @PreviousSection  int
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun    = 0

SET @PreviousSection = 1	-- ServiceBus.Packaging section, GlobalPackageStore share and IGlobalPackageStore type mapping fragments and GLOBAL.PACKAGE.STORE.LOCATION macro created
SET @Section         = 1

--
-- Constants used by DataFix script
--

--
-- 1. Re-purpose Packaging.Plugins.Shares.GlobalPackageStore fragment for new IGlobalPackageStore implementation (Global Package Store client)
-- 2. Modify UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IGlobalPackageStore fragment to point to new IGlobalPackageStore implementation
-- 3. Modify UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.* fragments to point to new assembly of IGlobalPackageStore interface
--
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION

	-----
	-- 1. Re-purpose Packaging.Plugins.Shares.GlobalPackageStore fragment for new IGlobalPackageStore implementation (Global Package Store client)
	--
	UPDATE	Active_Fragments
	SET		Name = 'Packaging.Plugins.GlobalPackageStore.InitializationData',
			Description = 'Initialization data of configured IGlobalPackageStore implementation',
			RootXmlNode = 'InitializationData',
			Contents = 
'
<ServiceModel>
	<client>
		<endpoint name="BasicHttpBinding_IGlobalPackageStoreService"
				  address="http://[DSCS:MACRO:GLOBAL.PACKAGE.STORE.LOCATION]/GlobalPackageStoreService.svc"
				  binding="basicHttpBinding" bindingConfiguration="GlobalPackageStoreBinding"
				  contract="ServiceBus.GlobalPackageStore.Wcf.IGlobalPackageStoreService" />
	</client>

	<bindings>
		<basicHttpBinding>
			<binding name="GlobalPackageStoreBinding" transferMode="Streamed"
					 openTimeout="00:00:10" sendTimeout="00:01:00" receiveTimeout="Infinite"
					 maxBufferPoolSize="52428800" maxBufferSize="104857600" maxReceivedMessageSize="104857600">
				<readerQuotas maxDepth="64" maxStringContentLength="131072" maxArrayLength="104857600" maxBytesPerRead="16384" maxNameTableCharCount="32768" />
			</binding>
		</basicHttpBinding>
	</bindings>
</ServiceModel>
'
	WHERE	Id = '558B6BFA-17EC-49BC-BEDD-5AE7A66F0066'	-- Packaging.Plugins.Shares.GlobalPackageStore

	-----
	-- 2. Modify UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IGlobalPackageStore fragment to point to new IGlobalPackageStore implementation
	--
	UPDATE	Active_Fragments
	SET		Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IGlobalPackageStore',
			Description = 'Type mapping used for resolution of ServiceBus.Configuration.Packaging.IGlobalPackageStore instance',
			Contents =
'
<type type="ServiceBus.Configuration.Packaging.IGlobalPackageStore, ServiceBus.Configuration.Packaging" mapTo="ServiceBus.GlobalPackageStore.Wcf.GlobalPackageStoreClient, ServiceBus.GlobalPackageStore.Wcf.Client">
  <lifetime type="singleton" />
</type>
'
	WHERE	Id = '682EF9A4-4C07-4F48-BA59-460574D48B4F' -- UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IGlobalPackageStore

	-----
	-- 3. Modify UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.* fragments to point to new assembly of IGlobalPackageStore interface
	--
	UPDATE	Active_Fragments
	SET		Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Csv',
			Description = 'Type mapping used for resolution of ServiceBus.Configuration.Packaging.CsvMacroValueResolver instance',
			Contents = '<type name="CSV" type="ServiceBus.Configuration.Packaging.IMacroValueResolver, ServiceBus.Configuration.Packaging" mapTo="ServiceBus.Configuration.Packaging.CsvMacroValueResolver, ServiceBus.Configuration.Packaging" />'
	WHERE	Id = 'D700B48B-113A-4BA3-9F91-BE56787667BF' -- UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Csv

	UPDATE	Active_Fragments
	SET		Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Xml',
			Description = 'Type mapping used for resolution of ServiceBus.Configuration.Packaging.XmlMacroValueResolver instance',
			Contents = '<type name="XML" type="ServiceBus.Configuration.Packaging.IMacroValueResolver, ServiceBus.Configuration.Packaging" mapTo="ServiceBus.Configuration.Packaging.XmlMacroValueResolver, ServiceBus.Configuration.Packaging" />'
	WHERE	Id = 'E8F4F4E0-0C4C-4CFE-BCC6-92C87C7B18EC' -- UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.Xml

	UPDATE	Active_Fragments
	SET		Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.External',
			Description = 'Type mapping used for resolution of ServiceBus.Configuration.Packaging.ExternalMacroValueResolver instance',
			Contents = '<type name="External" type="ServiceBus.Configuration.Packaging.IMacroValueResolver, ServiceBus.Configuration.Packaging" mapTo="ServiceBus.Configuration.Packaging.ExternalMacroValueResolver, ServiceBus.Configuration.Packaging" />'
	WHERE	Id = '14F16B5B-5B0B-4119-9C9D-8D2342008D63' -- UnityConfiguration.Containers.Default.Types.ServiceBus.Configuration.Packaging.IMacroValueResolver.External

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Configured Global Package Store client'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier DECLARE @ReferenceID nchar(10) DECLARE @Author nvarchar(50)
SET @TrackingID = '{F558E082-4021-4957-9E83-244B40749524}'
SET @ReferenceID = '48808'
SET @Author = 'Enes Pelko'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author	

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE @nodeExists int		

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	select 
		@nodeExists = Contents.exist('/ServiceHostData/MaximumProcessingTime')
	from 
		Active_Fragments
	where 
		Name = 'Service.ServiceBus.System.Logging.GetContextMachineCounts.ServiceHostData' and IsHistorical = 0

	if @nodeExists = 0 
		update 
			Active_Fragments
		set
			Contents.modify('insert <MaximumProcessingTime>00:03:00</MaximumProcessingTime> as last into  (/ServiceHostData)[1]')
			where Name = 'Service.ServiceBus.System.Logging.GetContextMachineCounts.ServiceHostData' and IsHistorical = 0
	else
		update 
			Active_Fragments
		set
			Contents.modify('replace value of  (/ServiceHostData/MaximumProcessingTime/text())[1] with "00:03:00"')
			where Name = 'Service.ServiceBus.System.Logging.GetContextMachineCounts.ServiceHostData' and IsHistorical = 0

	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Set MaximumProcessingTime for ServiceBus.System.Logging.GetContextMachineCounts service'
	COMMIT TRANSACTION
END

SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	select 
		@nodeExists = Contents.exist('/ServiceHostData/ExecutionType')
	from 
		Active_Fragments
	where 
		Name = 'Service.ServiceBus.System.Logging.GetContextMachineCounts.ServiceHostData' and IsHistorical = 0

	if @nodeExists = 0 
		update 
			Active_Fragments
		set
			Contents.modify('insert <ExecutionType>Asynchronous</ExecutionType> as last into  (/ServiceHostData)[1]')
			where Name = 'Service.ServiceBus.System.Logging.GetContextMachineCounts.ServiceHostData' and IsHistorical = 0
	else
		update 
			Active_Fragments
		set
			Contents.modify('replace value of  (/ServiceHostData/ExecutionType/text())[1] with "Asynchronous"')
			where Name = 'Service.ServiceBus.System.Logging.GetContextMachineCounts.ServiceHostData' and IsHistorical = 0
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Set ExecutionType for ServiceBus.System.Logging.GetContextMachineCounts service'
	COMMIT TRANSACTION
END

SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	select 
		@nodeExists = Contents.exist('/ServiceHostData/MaximumProcessingTime')
	from 
		Active_Fragments
	where 
		Name = 'Service.ServiceBus.System.Logging.GetPage.ServiceHostData' and IsHistorical = 0

	if @nodeExists = 0 
		update 
			Active_Fragments
		set
			Contents.modify('insert <MaximumProcessingTime>00:03:00</MaximumProcessingTime> as last into (/ServiceHostData)[1]')
			where Name = 'Service.ServiceBus.System.Logging.GetPage.ServiceHostData' and IsHistorical = 0
	else
		update 
			Active_Fragments
		set
			Contents.modify('replace value of  (/ServiceHostData/MaximumProcessingTime/text())[1] with "00:03:00"')
			where Name = 'Service.ServiceBus.System.Logging.GetPage.ServiceHostData' and IsHistorical = 0
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Set MaximumProcessingTime for ServiceBus.System.Logging.GetPage service'
	COMMIT TRANSACTION
END

SET @Section = 4
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	select 
		@nodeExists = Contents.exist('/ServiceHostData/ExecutionType')
	from 
		Active_Fragments
	where 
		Name = 'Service.ServiceBus.System.Logging.GetPage.ServiceHostData' and IsHistorical = 0

	if @nodeExists = 0 
		update 
			Active_Fragments
		set
			Contents.modify('insert <ExecutionType>Asynchronous</ExecutionType> as last into (/ServiceHostData)[1]')
			where Name = 'Service.ServiceBus.System.Logging.GetPage.ServiceHostData' and IsHistorical = 0
	else
		update 
			Active_Fragments
		set
			Contents.modify('replace value of  (/ServiceHostData/ExecutionType/text())[1] with "Asynchronous"')
			where Name = 'Service.ServiceBus.System.Logging.GetPage.ServiceHostData' and IsHistorical = 0	
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Set ExecutionType for ServiceBus.System.Logging.GetPage service'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author nvarchar( 50 )

SET @TrackingID = '0BD5A78F-6518-49B5-8994-B609E5962406'
SET @ReferenceID = '53327'
SET @Author = 'Enes Pelko'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1 

	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST_SECTIONID uniqueidentifier
	SET		@SERVICEHOST_SECTIONID = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @SERVICEBUS_CLIENT uniqueidentifier
	SET		@SERVICEBUS_CLIENT = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
	
	DECLARE	@SYSTEMSERVICES_PACKAGE uniqueidentifier
	SET		@SYSTEMSERVICES_PACKAGE = '890B5FCC-E4C5-4AC5-BFE8-D07A26668772'
	
	DECLARE	@SYSTEM_PACKAGE uniqueidentifier
	SET		@SYSTEM_PACKAGE = 'D44700BC-7937-30B4-BA13-3013104DE140'

	DECLARE @Name varchar( 250 )
	DECLARE @Description varchar( 1024 )
	DECLARE @RootXmlNode varchar( 1024 )
	DECLARE @FragmentId uniqueidentifier
	DECLARE @FragmentContent varchar( max )
--
-- Add DefaultArgumentContainerFactory
--
SET @Section = 1

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	BEGIN TRANSACTION
	
	
	
	SET	@FragmentId = '175849B1-0903-450A-9CD1-05BF17A71ACA'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Factory.ArgumentContainerFactory.DefaultArgumentContainerFactory'
			SET @Description = 'Factory.ArgumentContainerFactory.DefaultArgumentContainerFactory'
			SET @RootXmlNode = 'Factories/ArgumentContainerFactories'
			
			SET @FragmentContent = 
			'<ArgumentContainerFactory name="DefaultArgumentContainerFactory">
	<Implementation>
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Type>ServiceBus.ServiceHost.ArgumentContainerFactory</Type>
	</Implementation>
</ArgumentContainerFactory>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEMSERVICES_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )	
	

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added DefaultArgumentContainerFactory'
	COMMIT TRANSACTION
END

--
-- Add DefaultAExecutionLogEntryFactory
--
SET @Section = 2

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN	
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{2CC2480B-6414-44FD-B0D5-6401FBC849B6}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Factory.ExecutionLogEntryFactory.DefaultExecutionLogEntryFactory'
			SET @Description = 'Factory.ExecutionLogEntryFactory.DefaultExecutionLogEntryFactory'
			SET @RootXmlNode = 'Factories/ExecutionLogEntryFactories'
			
			SET @FragmentContent = 
			'<ExecutionLogEntryFactory name="DefaultExecutionLogEntryFactory">
	<Implementation>
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Type>ServiceBus.ServiceHost.ExecutionLogEntryFactory</Type>
	</Implementation>
</ExecutionLogEntryFactory>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEMSERVICES_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )	
	

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added DefaultExecutionLogEntryFactory'
	COMMIT TRANSACTION
END

--
-- Add DefaultExecutionCheckpointFactory
--
SET @Section = 3

IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN	
	BEGIN TRANSACTION
	
	SET	@FragmentId = '2A4C244A-76CF-4E22-B3A3-13F996C7C942'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Factory.ExecutionCheckpointFactory.DefaultExecutionCheckpointFactory'
			SET @Description = 'Factory.ExecutionCheckpointFactory.DefaultExecutionCheckpointFactory'
			SET @RootXmlNode = 'Factories/ExecutionCheckpointFactories'
			
			SET @FragmentContent = 
			'<ExecutionCheckpointFactory name="DefaultExecutionCheckpointFactory">
	<Implementation>
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Type>ServiceBus.ServiceHost.ExecutionCheckpointFactory</Type>
	</Implementation>
</ExecutionCheckpointFactory>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEMSERVICES_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEMSERVICES_PACKAGE, 1, 0 )	
	

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added DefaultExecutionCheckpointFactory'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID         uniqueidentifier
DECLARE @ReferenceID        nchar( 10 )
DECLARE @Author             nvarchar( 50 )

SET @PreviousTrackingID  = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}'	-- 15634: Reorganize Initial Config
SET @TrackingID          = '{3E8FD853-F3A6-42A3-9165-3985E163853D}'
SET @ReferenceID         = '53479'
SET @Author              = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @PreviousSection  int
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun    = 0

SET @PreviousSection = 7	-- Created fragments and linked them to appropriate sections
SET @Section         = 1

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize System package ID constant
--
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--
-- Declare and initialize section ID constants resource fragment of ServiceBus.ServiceHost.Common.dll
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- Declare and initialize ContextManager ID constant
--
DECLARE	@CONTEXT_MANAGER_ID uniqueidentifier
SET		@CONTEXT_MANAGER_ID = '{D7945F95-D22B-40C4-B6A7-13DD5F8DA636}'

--
-- Declare and initialize IdentityContextFactory ID constant
--
DECLARE	@IDENTITY_CONTEXT_FACTORY_ID uniqueidentifier
SET		@IDENTITY_CONTEXT_FACTORY_ID = '{7021C502-24E2-4368-B2AF-B526745DAAF7}'

--
-- Declare and initialize IdentityContext resource fragment ID constant
--
DECLARE	@IDENTITY_CONTEXT_RESOURCE_ID uniqueidentifier
SET		@IDENTITY_CONTEXT_RESOURCE_ID = '{48EE1F15-9D8B-4A5C-B193-15FD19D200B0}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE @GroupIds TABLE
(
	Id uniqueidentifier
)

INSERT INTO @GroupIds
VALUES
( '{4FF5DBB5-A888-4c76-B222-8EE53950E511}' ),	-- ServiceBus ServiceHost Service
( '{B233BE84-30B6-4349-B309-F24942D8DE4B}' ),	-- ServiceBus Administrative Console
( '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}' )	-- ServiceBus Client

--
-- 1. Extract existing contexts from ContextManager fragment into context fragments
-- 2. Add new security context fragment for IdentityContext
-- 3. Associate new context fragments with ServiceBus ServiceHost Service, ServiceBus Administrative Console and ServiceBus Client applications
-- 4. Delete associations to ContextManager fragment
-- 5. Delete ContextManager fragment
--
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION

	--
	-- Prepare { Name, Id } pairs for expected context fragments
	--
	DECLARE @ContextIds TABLE
	(
		Id   uniqueidentifier,
		Name varchar( 250 )
	)

	INSERT INTO @ContextIds
	VALUES
	(
		'{D7BA8038-1D92-4E12-B6C5-CAFFE28EC9E9}',
		'ContextManager.ContextGroup.BusinessContexts.Context.BusinessContext'
	),
	(
		'{DA13D036-4C50-4B0C-AD7C-C76FD0FD64C3}',
		'ContextManager.ContextGroup.LoggingContexts.Context.LoggingContext'
	),
	(
		'{5780FAEF-2AC1-49D9-83F3-7051D8CE21EE}',
		'ContextManager.ContextGroup.SecurityContexts.Context.SecurityContext'
	),
	(
		'{0ACAA062-DCB7-4014-8AD8-C84205CFC553}',
		'ContextManager.ContextGroup.MeteringContexts.Context.MeteringContext'
	),
	(
		'{CDEDB24E-77C8-43CC-A421-8F36854D0751}',
		'ContextManager.ContextGroup.ServiceCallerContexts.Context.ServiceCallerContext'
	)

	--
	-- Prepare information on currently configured contexts
	--
	DECLARE @Contexts TABLE
	(
		Id            uniqueidentifier,
		Name          varchar( 250 ),
		[Description] varchar( 1024 ),
		RootXmlNode   varchar( 1024 ),
		Contents      xml
	);

	WITH Contexts_CTE
	AS
	(
		SELECT	ContextGroup.value( 'local-name( . )[ 1 ]', 'varchar( 256 )' ) AS ContextGroupName,
				Context.value( '@name', 'varchar( 256 )' ) As ContextName,
				Context.query( '.' ) AS Context
		FROM	Active_Fragments
				CROSS APPLY
				Contents.nodes( 'ContextManager/ContextGroups/*' ) AS ContextGroups( ContextGroup )
				CROSS APPLY
				ContextGroup.nodes( 'Context' ) AS Contexts( Context )
		WHERE	Id = @CONTEXT_MANAGER_ID
	)
	INSERT INTO @Contexts
	SELECT	ISNULL( 
				( SELECT TOP( 1 )
						Id
				  FROM	@ContextIds
				  WHERE	Name = 'ContextManager.ContextGroup.' + ContextGroupName + '.Context.' + ContextName ),
				NEWID() ) AS Id,
			
			'ContextManager.ContextGroup.' + ContextGroupName + '.Context.' + ContextName AS Name,
			
			ContextName + 
				( CASE
					WHEN ContextGroupName = 'BusinessContexts' THEN ' business context'
					WHEN ContextGroupName = 'LoggingContexts' THEN ' logging context'
					WHEN ContextGroupName = 'SecurityContexts' THEN ' security context'
					WHEN ContextGroupName = 'MeteringContexts' THEN ' metering context'
					WHEN ContextGroupName = 'ServiceCallerContexts' THEN ' service caller context'
					ELSE ' context'
				  END ) AS [Description],
			'ContextManager/ContextGroups/ContextGroup name="' + ContextGroupName + '"' AS RootXmlNode,
			
			Context AS Contents
	FROM	Contexts_CTE
	WHERE	ContextGroupName <> 'SecurityContexts'
			OR
			( ContextGroupName = 'SecurityContexts' AND ContextName <> 'SecurityContext2' AND ContextName <> 'IdentityContext' )

	--
	-- Add information on new security context to be configured
	--
	INSERT INTO @Contexts
	VALUES
	(
		'{405BF299-4C21-42BB-BB09-35D11843D0F5}',
		'ContextManager.ContextGroup.SecurityContexts.Context.IdentityContext',
		'IdentityContext security context',
		'ContextManager/ContextGroups/ContextGroup name="SecurityContexts"',
		'<Context name="IdentityContext">
			<ContextFactoryData name="IdentityContextFactory">
				<Disabled>True</Disabled>
			</ContextFactoryData>
		 </Context>'
	)

	--
	-- Insert all context fragments
	--
	INSERT INTO Active_Fragments
	(
		Id,
		RootGroupId,
		PackageId,
		Name,
		[Description],
		SectionId,
		RootXmlNode,
		Contents,
		ChangeSetId,
		IsActive,
		IsHistorical,
		AddMultiple
	)
	SELECT	c.Id,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			c.Name,
			c.[Description],
			@SERVICEHOST,
			c.RootXmlNode,
			c.Contents,
			0,
			1,
			0,
			0
	FROM	@Contexts c
			LEFT JOIN
			Active_Fragments f
				ON	f.RootGroupId = @ROOT_GROUP_ID
					AND
					f.Id = c.Id
	WHERE	f.ReplicationId IS NULL

	--
	-- Insert all group associations with context fragments
	--
	INSERT INTO Active_GroupFragments
	(
		RootGroupId,
		PackageId,
		GroupId,
		FragmentId,
		ChangeSetId,
		IsActive,
		IsHistorical
	)
	SELECT	@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			g.Id,
			c.Id,
			0,
			1,
			0
	FROM	@Contexts c
			CROSS JOIN
			@GroupIds g
			LEFT JOIN
			Active_GroupFragments gf
				ON	gf.RootGroupId = @ROOT_GROUP_ID
					AND
					gf.GroupId = g.Id
					AND
					gf.FragmentId = c.Id
	WHERE	gf.ReplicationId IS NULL

	--
	-- Insert new security context factory fragment
	--
	IF ( NOT EXISTS( SELECT 1 FROM Active_Fragments WHERE Id = @IDENTITY_CONTEXT_FACTORY_ID AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			[Description],
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@IDENTITY_CONTEXT_FACTORY_ID,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'Factory.ContextFactory.IdentityContextFactory',
			'The configuration of security context factory that creates IdentityContext instances',
			@SERVICEHOST,
			'Factories/ContextFactories',
			'<ContextFactory name="IdentityContextFactory">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.Contexts.IdentityContext.dll" />
					<Type>ServiceBus.ServiceHost.Contexts.IdentityContextFactory</Type>
				</Implementation>
			 </ContextFactory>',
			0,
			1,
			0,
			0
		)

	--
	-- Insert group associations with security context factory fragment
	--
	INSERT INTO Active_GroupFragments
	(
		RootGroupId,
		PackageId,
		GroupId,
		FragmentId,
		ChangeSetId,
		IsActive,
		IsHistorical
	)
	SELECT	@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			g.Id,
			@IDENTITY_CONTEXT_FACTORY_ID,
			0,
			1,
			0
	FROM	@GroupIds g
			LEFT JOIN
			Active_GroupFragments gf
				ON	gf.RootGroupId = @ROOT_GROUP_ID
					AND
					gf.GroupId = g.Id
					AND
					gf.FragmentId = @IDENTITY_CONTEXT_FACTORY_ID
	WHERE	gf.ReplicationId IS NULL

	--
	-- Delete all group associations to ContextManager fragment
	-- (regardless of whether they are active or deleted, historical or non-historical).
	--
	DELETE
	FROM	Active_GroupFragments
	WHERE	FragmentId = @CONTEXT_MANAGER_ID

	--
	-- Delete all ContextManager fragment instances.
	--
	DELETE
	FROM	Active_Fragments
	WHERE	Id = @CONTEXT_MANAGER_ID

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added IdentityContext security context and its factory'
	COMMIT TRANSACTION
END

--
-- 1. Add resource fragment for ServiceBus.ServiceHost.Contexts.IdentityContext.dll assembly
-- 2. Associate new resource fragment with ServiceBus ServiceHost Service, ServiceBus Administrative Console and ServiceBus Client applications
--
SET	@Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION
	
	--
	-- Insert IdentityContext resource fragment
	--
	IF ( NOT EXISTS( SELECT 1 FROM Active_Fragments WHERE Id = @IDENTITY_CONTEXT_RESOURCE_ID AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			[Description],
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@IDENTITY_CONTEXT_RESOURCE_ID,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			'Resource.ServiceBus.ServiceHost.Contexts.IdentityContext.dll',
			'ServiceBus.ServiceHost.Contexts.IdentityContext.dll resource',
			@SERVICEHOST,
			'ResourceCatalog/ResourceGroup name="Contexts"',
			'<Resource name="ServiceBus.ServiceHost.Contexts.IdentityContext.dll" id="7c7a65c7-6157-4233-853f-549efe5ddf08">
				<FileName>ServiceBus.ServiceHost.Contexts.IdentityContext.dll</FileName>
				<Bytes />
				<Dependencies>
					<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
				</Dependencies>
			 </Resource>',
			0,
			1,
			0,
			0
		)

	--
	-- Insert group associations with IdentityContext resource fragment
	--
	INSERT INTO Active_GroupFragments
	(
		RootGroupId,
		PackageId,
		GroupId,
		FragmentId,
		ChangeSetId,
		IsActive,
		IsHistorical
	)
	SELECT	@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			g.Id,
			@IDENTITY_CONTEXT_RESOURCE_ID,
			0,
			1,
			0
	FROM	@GroupIds g
			LEFT JOIN
			Active_GroupFragments gf
				ON	gf.RootGroupId = @ROOT_GROUP_ID
					AND
					gf.GroupId = g.Id
					AND
					gf.FragmentId = @IDENTITY_CONTEXT_RESOURCE_ID
	WHERE	gf.ReplicationId IS NULL
					
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added resource fragment for ServiceBus.ServiceHost.Contexts.IdentityContext.dll assembly'
	COMMIT TRANSACTION
END


GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID         uniqueidentifier
DECLARE @ReferenceID        nchar( 10 )
DECLARE @Author             nvarchar( 50 )

SET @PreviousTrackingID  = '{DD3309DA-4FA4-40DE-A859-D72941A19222}'	-- 41277: Create Standard Service Pool
SET @TrackingID          = '{E9AB1E5A-7DFF-44F1-A0E5-44E44FA97AF9}'
SET @ReferenceID         = '59504'
SET @Author              = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @PreviousSection  int
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun    = 0

SET @PreviousSection = 1	-- Create Standard Service Pool
SET @Section         = 1

--
-- Constants used by DataFix script
--
--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- Actions performed by DataFix script
--
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION

	--
	-- Prepare table that will hold updated fragment contents
	--
	CREATE TABLE #FragmentContents
	(
		Id                    int,
		ServicePoolName       varchar( 256 ),
		RequestChannelName    varchar( 256 ),
		MigratedConfiguration xml,
		IsMigrated            bit
	);

	--
	-- Insert current fragment contents and other information 
	-- necessary to perform update in temporary and original table 
	--
	INSERT INTO #FragmentContents
	SELECT	ReplicationId,
			ServicePool.value( './@name', 'varchar( 256 )' ) AS ServicePoolName,
			RequestChannel.value( './@name', 'varchar( 256 )' ) AS RequestChannelName,
			Contents,
			0
	FROM	Active_Fragments
			CROSS APPLY
			Contents.nodes( 'ServicePool' ) AS ServicePools( ServicePool )
			CROSS APPLY
			ServicePool.nodes( './RequestChannels/RequestChannel' ) AS RequestChannels( RequestChannel )
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			SectionId = @SERVICEHOST
			AND
			Name IN ( 'ServicePool.System', 'ServicePool.Logging', 'ServicePool.Standard' )
	ORDER BY ServicePoolName, RequestChannelName
		
	DECLARE @ReplicationId      int
	DECLARE @ServicePoolName    varchar( 256 )
	DECLARE @RequestChannelName varchar( 256 )
	DECLARE @Address            varchar( max )
	DECLARE @Statement          nvarchar( max )
	
	--
	-- Migrate configuration of each WCF service request channel
	--
	WHILE EXISTS( SELECT Id FROM #FragmentContents WHERE IsMigrated = 0 )
	BEGIN
		--
		-- Select information about the channel for configuration migration
		--
		SELECT TOP 1
				@ReplicationId = Id,
				@ServicePoolName = ServicePoolName,
				@RequestChannelName = RequestChannelName
		FROM	#FragmentContents
		WHERE	IsMigrated = 0
		
		--
		-- service element: Replace current endpoint with new endpoints:
		--   1. Delete all endpoints
		--   2. Add three endpoints (one for new client and one for metadata exchange)
		--
		EXEC
		(
			'UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify
					(
						''delete ( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
							 'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
							 'RequestChannelFactoryData[ @name="WCF" ]/' +
							 'ServiceModel/services/service[ @name="ServiceBus.ServiceHost.RequestChannels.Wcf.Service" ]/endpoint )''
					)
			WHERE	Id = ' + @ReplicationId
		)
				
		EXEC
		(
			'UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify
					(
						''insert
							<endpoint address="mex" binding="customBinding" bindingConfiguration="CustomTcpBinding" contract="IMetadataExchange" />
						  as first
						  into
							( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
							 'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
							 'RequestChannelFactoryData[ @name="WCF" ]/' +
							 'ServiceModel/services/service[ @name="ServiceBus.ServiceHost.RequestChannels.Wcf.Service" ] )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)
			
		EXEC
		(
			'UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify
					(
						''insert
							<endpoint address="NetDataContract" binding="customBinding" bindingConfiguration="CustomTcpBinding" contract="ServiceBus.ServiceHost.RequestChannels.Wcf.INetDataContractService" />
						  as first
						  into
							( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
							 'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
							 'RequestChannelFactoryData[ @name="WCF" ]/' +
							 'ServiceModel/services/service[ @name="ServiceBus.ServiceHost.RequestChannels.Wcf.Service" ] )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		EXEC
		(
			'UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify
					(
						''insert
							<endpoint address="RichClient" binding="customBinding" bindingConfiguration="CustomTcpBinding" contract="ServiceBus.ServiceHost.RequestChannels.Wcf.IService" />
						  as first
						  into
							( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
							 'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
							 'RequestChannelFactoryData[ @name="WCF" ]/' +
							 'ServiceModel/services/service[ @name="ServiceBus.ServiceHost.RequestChannels.Wcf.Service" ] )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		--
		-- service element: Update base address so it ends with Channel.svc instead with MyService or ServiceRequestChannel:
		--   1. Prepare new base address using the current base address
		--   2. Update baseAddress attribute in add element
		--	
		SET	@Statement =
			'SELECT	@Address = MigratedConfiguration.value
							   (
									''( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
									   'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
									   'RequestChannelFactoryData[ @name="WCF" ]/' +
									   'ServiceModel/services/service[ @name="ServiceBus.ServiceHost.RequestChannels.Wcf.Service" ]/host/baseAddresses/add/@baseAddress )[ 1 ]'',
									''varchar( max )''
								)
			 FROM	#FragmentContents
			 WHERE	Id = ' + CONVERT( varchar( 11 ), @ReplicationId )
		EXECUTE sp_executesql @Statement, N'@Address varchar( max ) OUTPUT', @Address = @Address OUTPUT
		SET	@Address = REPLACE( @Address, 'MyService', 'Channel.svc' )
		SET	@Address = REPLACE( @Address, 'ServiceRequestChannel', 'Channel.svc' )
		
		EXEC
		(
			'UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify
					(
						''replace value of
							( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
							 'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
							 'RequestChannelFactoryData[ @name="WCF" ]/' +
							 'ServiceModel/services/service[ @name="ServiceBus.ServiceHost.RequestChannels.Wcf.Service" ]/host/baseAddresses/add/@baseAddress )[ 1 ]
						  with
						    "' + @Address + '"''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		--
		-- client element: Update endpoint address so it ends with Channel.svc/RichClient instead with MyService or ServiceRequestChannel
		--   1. Set endpoint name to RichClient for endpoint named CustomTcpBinding_IService
		--   2. Prepare new endpoint address using the current endpoint address
		--   3. Update address attribute in endpoint element
		--
		EXEC
		(
			'UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify
					(
						''replace value of
							( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
							 'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
							 'RequestChannelFactoryData[ @name="WCF" ]/' +
							 'ServiceModel/client/endpoint[ @name="CustomTcpBinding_IService" ]/@name )[ 1 ]
						  with
						    "RichClient"''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		SET @Statement =
			'SELECT	@Address = MigratedConfiguration.value
							   (
									''( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
									   'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
									   'RequestChannelFactoryData[ @name="WCF" ]/' +
									   'ServiceModel/client/endpoint[ @name="RichClient" ]/@address )[ 1 ]'',
									''varchar( max )''
								)
			 FROM	#FragmentContents
			 WHERE	Id = ' + CONVERT( varchar( 11 ), @ReplicationId )
		EXECUTE sp_executesql @Statement, N'@Address varchar( max ) OUTPUT', @Address = @Address OUTPUT
		SET	@Address = REPLACE( @Address, 'MyService', 'Channel.svc/RichClient' )
		SET	@Address = REPLACE( @Address, 'ServiceRequestChannel', 'Channel.svc/RichClient' )
		
		EXEC
		(
			'UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify
					(
						''replace value of
							( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
							 'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
							 'RequestChannelFactoryData[ @name="WCF" ]/' +
							 'ServiceModel/client/endpoint[ @name="RichClient" ]/@address )[ 1 ]
						  with
						    "' + @Address + '"''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		--
		-- behavior element: Expose service classes over metadata endpoint
		--   1. Ensure that serviceMetadata element does not exist
		--   2. Add empty serviceMetadata element
		--
		EXEC
		(
			'UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify
					(
						''delete ( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
								'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
								'RequestChannelFactoryData[ @name="WCF" ]/' +
								'ServiceModel/behaviors/serviceBehaviors/behavior[ @name="RequestChannelBehavior" ]/serviceMetadata )''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		EXEC
		(
			'UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify
					(
						''insert
								<serviceMetadata />
						  as last
						  into ( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
								'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
								'RequestChannelFactoryData[ @name="WCF" ]/' + 
								'ServiceModel/behaviors/serviceBehaviors/behavior[ @name="RequestChannelBehavior" ] )[ 1 ]''
					)
			WHERE	Id = ' + @ReplicationId
		)
		
		--
		-- binding element: Delete reliableSession element
		--
		EXEC
		(
			'UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify
					(
						''delete ( ServicePool[ @name="' + @ServicePoolName + '" ]/' +
								'RequestChannels/RequestChannel[ @name="' + @RequestChannelName + '" ]/' +
								'RequestChannelFactoryData[ @name="WCF" ]/' +
								'ServiceModel/bindings/customBinding/binding[ @name="CustomTcpBinding" ]/reliableSession )''
					)
			WHERE	Id = ' + @ReplicationId
		)

		--
		-- Mark request channel configuration as migrated
		--
		UPDATE	#FragmentContents
		SET		IsMigrated = 1
		WHERE	Id = @ReplicationId
				AND
				ServicePoolName = @ServicePoolName
				AND
				RequestChannelName = @RequestChannelName
	END
	
	--
	-- Now use migrated request channel configuration to update current configuration
	--
	UPDATE	Active_Fragments
	SET		Contents = fc.MigratedConfiguration
	FROM	#FragmentContents fc
	WHERE	ReplicationId = fc.Id
		
	DROP TABLE #FragmentContents

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Exposed service classes via WCF request channels of System, Logging and Standard service pools'
	COMMIT TRANSACTION
END


GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{D7646881-7B89-4295-BDF0-9F153131F18B}'
SET @ReferenceID = '53979'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43DE-A06D-BA995FD82F33}'

DECLARE	@LOGGING_TARGET_FRAGMENT uniqueidentifier
SET		@LOGGING_TARGET_FRAGMENT = '{1F9EC59C-306B-4896-A54B-77E4035E4FD0}'

DECLARE	@DATABASES_FRAGMENT uniqueidentifier
SET		@DATABASES_FRAGMENT = '{33FEC1DD-4119-4C95-A8F1-B684ABE6822B}'

DECLARE	@SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--5DB47D16-406F-43DE-A06D-BA995FD82F33

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	UPDATE	Active_Fragments
	SET		Contents = '<Targets>
	  <Target name="Database">
		<Assembly>ServiceBus.Logging.Targets.Database.dll,ServiceBus.Logging.DatabaseTarget</Assembly>
		<Properties>
		  <LogInternalException>True</LogInternalException>
		</Properties>
		<Filter>
		  <LogLevel>
			<Value>Warning</Value>
			<Match>GreaterThenOrEqual</Match>
		  </LogLevel>
		</Filter>
		<SubTargets>
		  <Target name="File">
			<Assembly>ServiceBus.Logging.Targets.File.dll,ServiceBus.Logging.FileTarget</Assembly>
			<Properties>
			  <Property name="DirectoryPath">[DSCS:MACRO:LOGGING.FILETARGET.FOLDER]</Property>
			  <Property name="MaxFileSize">10240</Property>
			</Properties>
		  </Target>
		</SubTargets>
	  </Target>
	</Targets>'
	WHERE	Id = @LOGGING_TARGET_FRAGMENT
	AND		RootGroupId = @ROOT_GROUP_ID
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Updated Logging Targets configuration for Configuration Service'
	COMMIT TRANSACTION
END

SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section-1 ) = @SectionCompleted
AND DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @DATABASES_FRAGMENT ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@CONFIGURATION_SERVICE,
			@DATABASES_FRAGMENT
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added Databases configuration to Configuration Service'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID         uniqueidentifier
DECLARE @ReferenceID        nchar( 10 )
DECLARE @Author             nvarchar( 50 )

SET @PreviousTrackingID  = '{434BA613-3EF6-4e3b-BD17-02B3C0130B3A}'	-- 15634: Reorganize Initial Config
SET @TrackingID          = '{38DF5904-4C98-4A65-82BD-30C33C7C08ED}'
SET @ReferenceID         = '60419'
SET @Author              = 'Admir Rogovic'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun    bit
DECLARE @PreviousSection  int
DECLARE @Section          int

SET @SectionCompleted = 1
SET @SectionNotRun    = 0

SET @PreviousSection = 2	-- Inserted all necessary sections
SET @Section         = 1

--
-- Declare and initialize root group id constant
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--
-- Declare and initialize System package ID constant
--
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

--
-- Declare and initialize application (child group) id constants
--
DECLARE	@SERVICEBUS_ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@SERVICEBUS_ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

--
-- Declare and initialize section ID constants
--
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
-- Declare and initialize ThreadPool ID constant
--
DECLARE	@THREAD_POOL_ID uniqueidentifier
SET		@THREAD_POOL_ID = '{23B46170-0747-4EF3-8E39-CAB2BFCCD2FF}'

--
-- 1. Add new ThreadPool fragment
-- 2. Associate new fragment with ServiceBus ServiceHost Service application
-- 3. Associate new fragment with ServiceBus Administrative Console application
--
IF 	DataFix.SectionState( @PreviousTrackingID, @PreviousSection ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
	
BEGIN

	BEGIN TRANSACTION

	DECLARE @FragmentId  uniqueidentifier = @THREAD_POOL_ID
	DECLARE @Name        varchar( 250 ) = 'ThreadPool'
	DECLARE @Description varchar( 1024 ) = 'Configuration settings controlling minimum number of worker and completion port threads of ThreadPool'
	
	--
	-- 1. Add new ThreadPool fragment
	--
	IF ( NOT EXISTS( SELECT 1 FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		INSERT INTO Active_Fragments
		(
			Id,
			RootGroupId,
			PackageId,
			Name,
			[Description],
			SectionId,
			RootXmlNode,
			Contents,
			ChangeSetId,
			IsActive,
			IsHistorical,
			AddMultiple
		)
		VALUES
		(
			@FragmentId,
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@Name,
			@Description,
			@SERVICEHOST,
			NULL,
			'
<ThreadPool>
	<MinimumWorkerThreadsPerLogicalProcessor>30</MinimumWorkerThreadsPerLogicalProcessor>
	<MinimumCompletionPortThreadsPerLogicalProcessor>30</MinimumCompletionPortThreadsPerLogicalProcessor>
</ThreadPool>
',
			0,
			1,
			0,
			0
		)
	
	--
	-- 2. Associate new fragment with ServiceBus ServiceHost Service application
	--
	IF ( NOT EXISTS ( SELECT 1 FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@SERVICEHOST_SERVICE,
			@FragmentId,
			0,
			1,
			0
		)
		
	--
	-- 3. Associate new fragment with ServiceBus Administrative Console application
	--
	IF ( NOT EXISTS ( SELECT 1 FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			PackageId,
			GroupId,
			FragmentId,
			ChangeSetId,
			IsActive,
			IsHistorical
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SYSTEM_PACKAGE,
			@SERVICEBUS_ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			0,
			1,
			0
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added configuration setting for setting min threads of ThreadPool'
	COMMIT TRANSACTION
END


GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{D64B0701-C588-4E06-9D6F-2E7BA6A9E16C}'
SET @ReferenceID = '60535'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionNotRun bit
DECLARE @Section int
SET		@SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

-- Add Peek Definition to BseModule.ClearExpiredResults.ServiceFactoryData
SET @Section = 1
IF DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4FB8-9702-EBA36AE6F0A4}'
	DECLARE @FragmentId uniqueidentifier
	SET		@FragmentId = '{2CD41AC0-D5CD-4316-9601-AD6A4BB8733B}'
	
	BEGIN TRANSACTION			
	UPDATE Active_Fragments
	SET
	Contents = 
	'<ServiceFactoryData name="BSE">
		<Implementation>
			<Resource name="ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure.dll" />
			<Type>ServiceBus.ServiceHost.BseModule.ExecuteStoredProcedure</Type>
		</Implementation>
		<StartConfig>
			<JobInterval>00:10:00</JobInterval>
			<ConnectionString>[DSCS:MACRO:SQL.REQUEST.STORE.CONNECTION.STRING]</ConnectionString>
			<ProcedureName>dbo.ClearExpiredResults</ProcedureName>
			<Parameters>
				<Parameter>
					<Name>RowCount</Name>
					<Value>100</Value>
				 </Parameter>
			</Parameters>
			<Peek>
				<Enabled>False</Enabled>
				<StartTime>9:00:00 PM</StartTime>
				<EndTime>3:00:00 AM</EndTime>
				<JobInterval>00:03:00</JobInterval>
				<Parameters>
					<Parameter>
						<Name>RowCount</Name>
						<Value>300</Value>
					</Parameter>
				</Parameters>
			</Peek>
		</StartConfig>
	</ServiceFactoryData>'
	WHERE
		Id = @FragmentId
	AND
		RootGroupId = @ROOT_GROUP_ID
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added Peek Definition for BSE module for clearing expired results Factory Data.'		
	COMMIT TRANSACTION		
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{5997D3F1-997E-41B2-B095-360E115A8DC1}'
SET @ReferenceID = '61109'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

-- 
DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)
DECLARE @FragmentId uniqueidentifier

-- Declare and initialize ID constants
DECLARE	@PACKAGE_ID uniqueidentifier
SET		@PACKAGE_ID = '{D44700BC-7937-30B4-BA13-3013104DE140}' -- PackageId

DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}' -- ServiceBus

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}' -- ServiceBus Administrative Console

DECLARE @SERVICE_HOST uniqueidentifier
SET		@SERVICE_HOST = '{4FF5DBB5-A888-4C76-B222-8EE53950E511}' -- ServiceBus ServiceHost Service

DECLARE @RUN_TESTCASE uniqueidentifier
SET		@RUN_TESTCASE = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}' -- ServiceBus RunTestCase

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- CREATE FRAGMENT FOR Resource.Microsoft.Practices.ServiceLocation.dll RESOURCE
	SET	@FragmentId = '{3C48B38C-C47E-487B-8079-11EB0F260215}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.Microsoft.Practices.Unity.Interception.dll'
			SET @Description = 'Resource.Microsoft.Practices.Unity.Interception.dll'
	  
			INSERT INTO Active_Fragments 
			( 
				Id, 
				RootGroupId, 
				PackageId,
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents 
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@PACKAGE_ID,
				@Name,
				@Description,
				'{12BB99C3-3045-498D-BD54-D2690935D845}', -- ServiceBus.ServiceHost section
				'ResourceCatalog/ResourceGroup name="Microsoft"',
				'<Resource name="Microsoft.Practices.Unity.Interception.dll" id="9070f377-1d94-4729-86f9-ae40270446f4">
				 <FileName>Microsoft.Practices.Unity.Interception.dll</FileName>
				 <Bytes />
				 <Dependencies>
				 <Resource name="Microsoft.Practices.Unity.dll" />
				 </Dependencies>
				 </Resource>'
			)
		END
	
	-- ADD FRAGMENT TO THE SERVICE HOST APPLICATION
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE GroupId = @SERVICE_HOST AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments( RootGroupId, PackageId, GroupId, FragmentId )
			VALUES ( @ROOT_GROUP_ID, @PACKAGE_ID, @SERVICE_HOST, @FragmentId );
		END
	
	-- ADD FRAGMENT TO THE ADMINISTRATIVE CONSOLE APPLICATION	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments( RootGroupId,PackageId, GroupId, FragmentId )
			VALUES ( @ROOT_GROUP_ID, @PACKAGE_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId );
		END
		
	-- ADD FRAGMENT TO THE RUN TEST CASE APPLICATION
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE GroupId = @RUN_TESTCASE AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments( RootGroupId,PackageId, GroupId, FragmentId )
			VALUES ( @ROOT_GROUP_ID, @PACKAGE_ID, @RUN_TESTCASE, @FragmentId );
		END
	
	-- UPDATE FRAGMENT Microsoft.Practices.EnterpriseLibrary.Common.dll 	
		--(Add Microsoft.Practices.Unity.Interception.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="Microsoft.Practices.Unity.Interception.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = 'E3F1B36C-C74C-4AF0-853D-461D19492C36' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="Microsoft.Practices.Unity.Interception.dll"]') = 0
		--(Add Microsoft.Practices.ServiceLocation.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="Microsoft.Practices.ServiceLocation.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = 'E3F1B36C-C74C-4AF0-853D-461D19492C36' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="Microsoft.Practices.ServiceLocation.dll"]') = 0
	
	-- UPDATE FRAGMENT Microsoft.Practices.EnterpriseLibrary.Logging.dll
		--(Add Microsoft.Practices.Unity.Interception.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="Microsoft.Practices.Unity.Interception.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = '69A16C4F-8C04-4D5F-B8FA-8F9CD5C94020' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="Microsoft.Practices.Unity.Interception.dll"]') = 0
		--(Add Microsoft.Practices.ServiceLocation.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="Microsoft.Practices.ServiceLocation.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = '69A16C4F-8C04-4D5F-B8FA-8F9CD5C94020' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="Microsoft.Practices.ServiceLocation.dll"]') = 0
			
	-- UPDATE FRAGMENT ServiceBus.ServiceHost.RequestChannels.Wcf.dll	
		--(Add ServiceBus.PubSub.Interfaces.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="ServiceBus.PubSub.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = '4283AAD5-2E47-4E46-ACB2-25C4C6206CC9' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.PubSub.Interfaces.dll"]') = 0
		--(Add ServiceBus.Utility.Helpers.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="ServiceBus.Utility.Helpers.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = '4283AAD5-2E47-4E46-ACB2-25C4C6206CC9' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Helpers.dll"]') = 0
		--(Add ServiceBus.Utility.Configuration.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="ServiceBus.Utility.Configuration.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = '4283AAD5-2E47-4E46-ACB2-25C4C6206CC9' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Configuration.dll"]') = 0
		--(Add ServiceBus.Utility.Assembly.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="ServiceBus.Utility.Assembly.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = '4283AAD5-2E47-4E46-ACB2-25C4C6206CC9' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Assembly.dll"]') = 0
			
	-- UPDATE FRAGMENT ServiceBus.ServiceHost.RequestChannels.Wcf.dll	
		--(Add ServiceBus.PubSub.Interfaces.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="ServiceBus.PubSub.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = '4283AAD5-2E47-4E46-ACB2-25C4C6206CC9' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.PubSub.Interfaces.dll"]') = 0
			
	-- UPDATE FRAGMENT ServiceBus.Utility.Assembly.dll	
		--(Add ServiceBus.Utility.Helpers.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="ServiceBus.Utility.Helpers.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = 'CF0BF3A9-681F-45F3-A7A9-784231A162E3' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Utility.Helpers.dll"]') = 0
			
	-- UPDATE FRAGMENT ServiceBus.ServiceHost.ServicePoolLoader.exe	
		--(Add ServiceBus.Configuration.Common.dll) Dependency
		UPDATE 
			Active_Fragments 
		SET 
			Contents.modify('insert <Resource name="ServiceBus.Configuration.Common.dll" /> into (/Resource/Dependencies)[1]')
		WHERE 
			Id = 'C3A5D216-5CA8-4200-A6DA-E66DD7A41500' AND
			Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.Configuration.Common.dll"]') = 0


	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added Microsoft.Practices.Unity.Interception.dll.'
	COMMIT TRANSACTION
END

GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{6240DF35-CC8C-436E-8CD5-DD5E5C6A0E1A}'
SET @ReferenceID = '61400'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}' -- ServiceBus

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	--Change Core Services Package - Change package's name from System.Services.Core to System.Core.Services 
	UPDATE	Active_Packages
	SET		Name = 'System.Core.Services'
	WHERE	RootGroupId = @ROOT_GROUP_ID
			and
			Id = '890B5FCC-E4C5-4AC5-BFE8-D07A26668772'
			
	--Change Logging Services Package from System.Services.Logging to System.Logging.Services
	UPDATE	Active_Packages
	SET		Name = 'System.Logging.Services'
	WHERE	RootGroupId = @ROOT_GROUP_ID
			and
			Id = '224F50F4-3FAA-477D-9363-399CEC83B2C5'
				
	--Change Logging Services Package from System.Services.Metering to System.Metering.Services
	UPDATE	Active_Packages
	SET		Name = 'System.Metering.Services'
	WHERE	RootGroupId = @ROOT_GROUP_ID
			and
			Id = '4CE4102E-4243-4D56-9D2B-0EBEF4C3A326'	

	--
	-- Modify Packages' names in service pools fragments
	-- Determine which fragments contains the desired system packages from SERVICE POOLs fragments
	-- and insert them into temporary table
	--
	DECLARE @Fragments TABLE
	(
		FragmentId               uniqueidentifier,
		ContainsCoreServices     bit,
		ContainsMeteringServices bit,
		ContainsLoggingServices  bit,
		IsStandardServicePool    bit,
		IsProcessed              bit
	)
	INSERT INTO @Fragments
	SELECT Id,
			Contents.exist('/Package[@name="System.Services.Core"]')|Contents.exist('/Packages/Package[@name="System.Services.Core"]'),
			Contents.exist('/Package[@name="System.Services.Metering"]')|Contents.exist('/Packages/Package[@name="System.Services.Metering"]'),
			Contents.exist('/Package[@name="System.Services.Logging"]')|Contents.exist('/Packages/Package[@name="System.Services.Logging"]'),
		   ( CASE WHEN Name like 'ServicePool.Standard.%' THEN 1 ELSE 0 END ) AS IsStandardServicePool,
			0 AS IsProcessed
	FROM Active_Fragments WHERE RootXmlNode LIKE 'ServicePoolServices/ServicePool%' and RootGroupId = @ROOT_GROUP_ID

	-- delete useless rows from temporary table which do not contain any of the desired packages
	DELETE	@Fragments
	WHERE	ContainsCoreServices = 0
			AND
			ContainsLoggingServices = 0
			AND
			ContainsMeteringServices = 0 
	
	-- declare desired variables
	DECLARE @FragmentId                uniqueidentifier
	DECLARE @ContainsCoreServices      bit
	DECLARE @ContainsMeteringServices  bit
	DECLARE @ContainsLoggingServices   bit
	DECLARE @IsStandardServicePool     bit

	--loop through the temporary table
	WHILE ( EXISTS( SELECT 1 FROM @Fragments WHERE IsProcessed = 0 ) )
	BEGIN
			-- get next row
			SELECT TOP( 1 )
				@FragmentId = FragmentId,
				@ContainsCoreServices = ContainsCoreServices,
				@IsStandardServicePool = IsStandardServicePool,
				@ContainsLoggingServices = ContainsLoggingServices,
				@ContainsMeteringServices = ContainsMeteringServices
			FROM	@Fragments
			WHERE	IsProcessed = 0		
			
			--check whether is standard service pool
			IF(@IsStandardServicePool = 1)
				BEGIN
					IF(@ContainsCoreServices=1)
					BEGIN
						-- delete package's old name
						UPDATE Active_Fragments 
						SET Contents.modify( 'delete (/Package[ @name="System.Services.Core"] )' )
						WHERE Id = @FragmentId
						-- insert the package's new name
						UPDATE Active_Fragments 
						SET Contents.modify( 'insert <Package name="System.Core.Services" /> into (/)[1]' )
						WHERE Id = @FragmentId
					END
					
					IF(@ContainsLoggingServices=1)
					BEGIN
						-- delete package's old name
						UPDATE Active_Fragments 
						SET Contents.modify( 'delete (/Package[ @name="System.Services.Logging"] )' )
						WHERE Id = @FragmentId
						-- insert the package's new name
						UPDATE Active_Fragments 
						SET Contents.modify( 'insert <Package name="System.Logging.Services" /> into (/)[1]' )
						WHERE Id = @FragmentId
					END
					
					IF(@ContainsMeteringServices=1)
					BEGIN
						-- delete package's old name
						UPDATE Active_Fragments 
						SET Contents.modify( 'delete (/Package[ @name="System.Services.Metering"] )' )
						WHERE Id = @FragmentId
						-- insert the package's new name
						UPDATE Active_Fragments 
						SET Contents.modify( 'insert <Package name="System.Metering.Services" /> into (/)[1]' )
						WHERE Id = @FragmentId
					END
				END
			ELSE
				BEGIN
					--add the new core's package name if the old name exists in Non-Standard ServicePool
					IF(@ContainsCoreServices=1)
					BEGIN
						-- delete package's old name
						UPDATE Active_Fragments 
						SET Contents.modify( 'delete (/Packages/Package[ @name="System.Services.Core"] )' )
						WHERE Id = @FragmentId
						-- insert the package's new name
						UPDATE Active_Fragments 
						SET Contents.modify( 'insert <Package name="System.Core.Services" /> into (/Packages)[1]' )
						WHERE Id = @FragmentId
					END
					IF(@ContainsLoggingServices=1)
					BEGIN
						-- delete package's old name
						UPDATE Active_Fragments 
						SET Contents.modify( 'delete (/Packages/Package[ @name="System.Services.Logging"] )' )
						WHERE Id = @FragmentId
						-- insert the package's new name
						UPDATE Active_Fragments 
						SET Contents.modify( 'insert <Package name="System.Logging.Services" /> into (/Packages)[1]' )
						WHERE Id = @FragmentId
					END
					IF(@ContainsMeteringServices=1)
					BEGIN
						-- delete package's old name
						UPDATE Active_Fragments 
						SET Contents.modify( 'delete (/Packages/Package[ @name="System.Services.Metering"] )' )
						WHERE Id = @FragmentId
						-- insert the package's new name
						UPDATE Active_Fragments 
						SET Contents.modify( 'insert <Package name="System.Metering.Services" /> into (/Packages)[1]' )
						WHERE Id = @FragmentId
					END
				END		
			
			-- mark this row as processed
			UPDATE	@Fragments
			SET		IsProcessed = 1
			WHERE	FragmentId = @FragmentId
	END
	
	-- Empty temporary table from old values
	Delete @Fragments

	-- fill temporary table with desired values from services host data
	INSERT INTO @Fragments
	SELECT Id,
			Contents.exist('/ServiceHostData/Package[@name="System.Services.Core"]'),
			Contents.exist('/ServiceHostData/Package[@name="System.Services.Metering"]'),
			Contents.exist('/ServiceHostData/Package[@name="System.Services.Logging"]'),
			0,
			0 FROM Active_Fragments WHERE PackageId in 
			(	'890B5FCC-E4C5-4AC5-BFE8-D07A26668772',
				'224F50F4-3FAA-477D-9363-399CEC83B2C5',
				'4CE4102E-4243-4D56-9D2B-0EBEF4C3A326') 
			and Name like '%.ServiceHostData' and RootGroupId = @ROOT_GROUP_ID

	-- delete useless rows from temporary table which do not contain any of the desired packages
	DELETE	@Fragments
	WHERE	ContainsCoreServices = 0
			AND
			ContainsLoggingServices = 0
			AND
			ContainsMeteringServices = 0 

	--loop through the temporary table
	WHILE ( EXISTS( SELECT 1 FROM @Fragments WHERE IsProcessed = 0 ) )
	BEGIN
			-- get next row and decide which package has to be changed
			SELECT TOP( 1 )
				@FragmentId = FragmentId,
				@ContainsCoreServices = ContainsCoreServices,
				@ContainsLoggingServices = ContainsLoggingServices,
				@ContainsMeteringServices = ContainsMeteringServices
			FROM	@Fragments
			WHERE	IsProcessed = 0		

					IF(@ContainsCoreServices=1)
					BEGIN
						-- delete package's old name
						UPDATE Active_Fragments 
						SET Contents.modify( 'delete (/ServiceHostData/Package[ @name="System.Services.Core"] )' )
						WHERE Id = @FragmentId
						-- insert the package's new name
						UPDATE Active_Fragments 
						SET Contents.modify( 'insert <Package name="System.Core.Services" /> into (/ServiceHostData)[1]' )
						WHERE Id = @FragmentId
					END
					
					IF(@ContainsLoggingServices=1)
					BEGIN
						-- delete package's old name
						UPDATE Active_Fragments 
						SET Contents.modify( 'delete (/ServiceHostData/Package[ @name="System.Services.Logging"] )' )
						WHERE Id = @FragmentId
						-- insert the package's new name
						UPDATE Active_Fragments 
						SET Contents.modify( 'insert <Package name="System.Logging.Services" /> into (/ServiceHostData)[1]' )
						WHERE Id = @FragmentId
					END
					
					IF(@ContainsMeteringServices=1)
					BEGIN
						-- delete package's old name
						UPDATE Active_Fragments 
						SET Contents.modify( 'delete (/ServiceHostData/Package[ @name="System.Services.Metering"] )' )
						WHERE Id = @FragmentId
						-- insert the package's new name
						UPDATE Active_Fragments 
						SET Contents.modify( 'insert <Package name="System.Metering.Services" /> into (/ServiceHostData)[1]' )
						WHERE Id = @FragmentId
					END
			-- mark this row as processed
			UPDATE	@Fragments
			SET		IsProcessed = 1
			WHERE	FragmentId = @FragmentId
	END

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Rename System service packages'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{9B48D058-DF21-4A7E-B269-4DB3D6576139}'
SET @ReferenceID = '61877'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

-- Declare and initialize ID constants
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

DECLARE @RootGroupId uniqueidentifier
SET		@RootGroupId = '{AE8EF33D-14D5-4FB8-9702-EBA36AE6F0A4}'
	
DECLARE	@SERVICEBUS_SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEBUS_SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE	@SERVICEBUS_ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@SERVICEBUS_ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	DECLARE @Name		 varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @FragmentId  uniqueidentifier

	--
	-- 1. Add new LoaderPorcessInitializationTimeout fragment
	--
	SET @FragmentId = '{1BC4A062-B1D5-46AE-9902-B9CCFF430190}'
	IF (NOT EXISTS ( SELECT 1 FROM Active_Fragments WHERE RootGroupId = @RootGroupId AND Id = @FragmentId ) )
		BEGIN
			SET @Name = 'LoaderInitializationTimeout'
			SET @Description = 'Service pool loader process initialization timeout coniguration.'
			
			INSERT INTO Active_Fragments
			(
				Id,
				Name,
				[Description],
				RootGroupId,
				PackageId,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@Name,
				@Description,
				@RootGroupId,
				@SYSTEM_PACKAGE,
				@SERVICEHOST,
				NULL,
				'<LoaderInitializationTimeout>00:00:05</LoaderInitializationTimeout>'
			)
		END
	
	--
	-- 2. Associate new fragment with ServiceBus ServiceHost Service application
	--

	IF (NOT EXISTS(SELECT 1 from Active_GroupFragments WHERE RootGroupId = @RootGroupId AND FragmentId = @FragmentId AND GroupId = @SYSTEM_PACKAGE))	
		BEGIN
			INSERT INTO Active_GroupFragments
			(
				RootGroupId,
				FragmentId,
				GroupId,
				PackageId
			)
			VALUES
			(
				@RootGroupId,
				@FragmentId,
				@SERVICEBUS_SERVICEHOST_SERVICE,
				@SYSTEM_PACKAGE
			)
		END
	
	--
	-- 3. Associate new fragment with ServiceBus Administrative Console application
	--

	IF (NOT EXISTS(SELECT 1 from Active_GroupFragments WHERE RootGroupId = @RootGroupId AND FragmentId = @FragmentId AND GroupId = @SERVICEBUS_ADMINISTRATIVE_CONSOLE))	
		BEGIN
			INSERT INTO Active_GroupFragments
			(
				RootGroupId,
				FragmentId,
				GroupId,
				PackageId
			)
			VALUES
			(
				@RootGroupId,
				@FragmentId,
				@SERVICEBUS_ADMINISTRATIVE_CONSOLE,
				@SYSTEM_PACKAGE
			)
		END
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added configuration entry to configure the initialization timeout for the service pool loader process.'
			
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{48D50DB2-3DCB-4D49-B29D-9F7CE3C59B35}'
SET @ReferenceID = '62608'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE	@SYSTEM_PACKAGE_ID uniqueidentifier
SET		@SYSTEM_PACKAGE_ID = '{D44700BC-7937-30B4-BA13-3013104DE140}' -- PackageId

DECLARE @FragmentId uniqueidentifier
DECLARE	@FilterId uniqueidentifier

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@FilterId = '{4331FDA2-900E-40C9-9CBE-01B63D32A6B9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Filters WHERE Id = @FilterId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus ServiceHost ServicePoolLoader (x86)'
			SET @Description =
				'This filter is matched by any version of ServiceBus ServiceHost ServicePoolLoader (x86) application ' +
				'running on any machine under any account regardless of application and configuration paths.'
			
			INSERT INTO Active_Filters
			(
				Id,
				RootGroupId,
				PackageId,
				GroupId,
				Name,
				Description,
				MachineName,
				AppName,
				AppPath,
				AppConfigFilePath,
				AppVersion,
				AppUser
			)
			VALUES
			(
				@FilterId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE_ID,
				@SERVICEHOST_SERVICE,
				@Name,
				@Description,
				NULL,
				'ServiceBus.ServiceHost.ServicePoolLoader(x86)',
				NULL,
				NULL,
				NULL,
				NULL
			)
		END
	
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServicePoolLoader(x86).config.exe fragment is created
	--
	SET	@FragmentId = '{880CB723-84B5-4745-A793-176366CFCD7E}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.ServicePoolLoader(x86).exe.config'
			SET @Description = 'ServiceBus.ServiceHost.ServicePoolLoader(x86).exe.config resource'
 
			INSERT INTO Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId,
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents 
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'<Resource name="ServiceBus.ServiceHost.ServicePoolLoader(x86).exe.config" id="13f66e2f-a23f-4e3a-b62b-3ace82b85f75">
	<FileName>ServiceBus.ServiceHost.ServicePoolLoader(x86).exe.config</FileName>
	<Dependencies />
</Resource>'
			)
		END

	-- ADD FRAGMENT TO THE SERVICE HOST APPLICATION
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments( RootGroupId, PackageId, GroupId, FragmentId )
			VALUES ( @ROOT_GROUP_ID, @SYSTEM_PACKAGE_ID, @SERVICEHOST_SERVICE, @FragmentId );
		END
	
	-- ADD FRAGMENT TO THE ADMINISTRATIVE CONSOLE APPLICATION	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments( RootGroupId,PackageId, GroupId, FragmentId )
			VALUES ( @ROOT_GROUP_ID, @SYSTEM_PACKAGE_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId );
		END
	
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.ServicePoolLoader(x86).exe fragment is created
	--
	SET	@FragmentId = '{880D1B23-3131-4304-A569-9BAAF10087CC}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.ServicePoolLoader(x86).exe'
			SET @Description = 'ServiceBus.ServiceHost.ServicePoolLoader(x86).exe resource'
 
			INSERT INTO Active_Fragments
			(
				Id, 
				RootGroupId, 
				PackageId,
				Name, 
				Description, 
				SectionId, 
				RootXmlNode, 
				Contents 
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE_ID,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'<Resource name="ServiceBus.ServiceHost.ServicePoolLoader(x86).exe" id="9bb2ed79-cda5-4e7c-9da6-7182d65ec377">
	<FileName>ServiceBus.ServiceHost.ServicePoolLoader(x86).exe</FileName>
	<Dependencies>
		<Resource name="ServiceBus.ServiceHost.Common.dll" />
		<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
		<Resource name="ServiceBus.Utility.Assembly.dll" />
		<Resource name="ServiceBus.Utility.Logging.dll" />
		<Resource name="ServiceBus.ServiceHost.ServicePoolLoader(x86).exe.config" />
		<Resource name="ServiceBus.ServiceHost.config" />
		<Resource name="ServiceBus.Logging.config" />
		<Resource name="ServiceBus.PubSub.config" />
		<Resource name="ServiceBus.Metering.config" />
		<Resource name="unityConfiguration.config" />
	</Dependencies>
</Resource>'
			)
		END

	-- ADD FRAGMENT TO THE SERVICE HOST APPLICATION
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments( RootGroupId, PackageId, GroupId, FragmentId )
			VALUES ( @ROOT_GROUP_ID, @SYSTEM_PACKAGE_ID, @SERVICEHOST_SERVICE, @FragmentId );
		END
	
	-- ADD FRAGMENT TO THE ADMINISTRATIVE CONSOLE APPLICATION	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments( RootGroupId,PackageId, GroupId, FragmentId )
			VALUES ( @ROOT_GROUP_ID, @SYSTEM_PACKAGE_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId );
		END
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added 32bit Service Pool Loader resources'
	COMMIT TRANSACTION
END


GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{F97E968B-F036-4BB6-AB81-8D8F9883494F}'
SET @ReferenceID = '62620'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

-- Declare and initialize ID constants
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE	@PUBSUB_CONFIGURATION uniqueidentifier
SET		@PUBSUB_CONFIGURATION = '{4C93E0C6-A9A6-46ec-81CD-4AAE4F3608BB}'

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
			
		UPDATE	Active_Fragments
			SET		Contents.modify('insert <EchoTimeout>00:00:03</EchoTimeout> after (/Channel/Name)[1]')       
			WHERE	SectionId = @PUBSUB_CONFIGURATION
					AND
					RootGroupId = @ROOT_GROUP_ID
					AND
					RootXmlNode = 'Channels'
					AND
					Contents.exist( '/Channel/EchoTimeout' ) = 0
					
		UPDATE	Active_Fragments
			SET		Contents.modify('insert <HealthCheckFrequency>00:00:05</HealthCheckFrequency> after (/Channel/Name)[1]')       
			WHERE	SectionId = @PUBSUB_CONFIGURATION
					AND
					RootGroupId = @ROOT_GROUP_ID
					AND
					RootXmlNode = 'Channels'
					AND
					Contents.exist( '/Channel/HealthCheckFrequency' ) = 0

		UPDATE	Active_Fragments
			SET		Contents.modify('insert <KeepAlive>True</KeepAlive> after (/Channel/Name)[1]')       
			WHERE	SectionId = @PUBSUB_CONFIGURATION
					AND
					RootGroupId = @ROOT_GROUP_ID
					AND
					RootXmlNode = 'Channels'
					AND
					Contents.exist( '/Channel/KeepAlive' ) = 0

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added healthcheck parameters to PubSub Channel configuration'
			
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{D43656E5-A4FA-40FB-824F-14225FF09CC6}'
SET @ReferenceID = '62375'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
DECLARE @SecondSection int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

-- Declare and initialize System package ID constant
DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

-- Declare and initialize root group id constant
DECLARE @RootGroupId uniqueidentifier
SET		@RootGroupId = '{AE8EF33D-14D5-4FB8-9702-EBA36AE6F0A4}'
	
-- Declare and initialize application (child group) id constants
DECLARE	@SERVICEBUS_SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEBUS_SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

-- Declare and initialize application (child group) id constants
DECLARE	@SERVICEBUS_ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@SERVICEBUS_ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'
	
-- Declare and initialize application (child group) id constants
DECLARE	@SERVICEBUS_CLIENT uniqueidentifier
SET		@SERVICEBUS_CLIENT = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

-- Declare and initialize Unity Section id constants	
DECLARE	@UNITY uniqueidentifier
SET		@UNITY = '{29B68C85-422C-4F38-B4ED-5C917010C756}'

DECLARE @Name		 varchar(250)
DECLARE @Description varchar(1024)
DECLARE @FragmentId  uniqueidentifier	
	
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	-- 1. replace address = "NetDataContract" with "NewClient":
	WHILE (EXISTS(  SELECT 1 FROM Active_Fragments WHERE
					RootXmlNode = 'ServicePools'
					AND 
					Contents.exist('/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@address="NetDataContract"]')=1 ))
		BEGIN
				UPDATE Active_Fragments 
				SET Contents.modify
				('replace value of (/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@address=("NetDataContract")]/@address)[1]
				 with "NewClient"')		 
				WHERE RootXmlNode = 'ServicePools'
				AND 
				Contents.exist('/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@address="NetDataContract"]')=1
		END
		
	-- 2. replace contract = "ServiceBus.ServiceHost.RequestChannels.Wcf.INetDataContractService" 
	-- with "ServiceBus.ServiceHost.RequestChannels.Wcf.IService2"
	WHILE (EXISTS(  SELECT 1 FROM Active_Fragments WHERE
					RootXmlNode = 'ServicePools'
					AND
					Contents.exist('/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@contract="ServiceBus.ServiceHost.RequestChannels.Wcf.INetDataContractService"]')=1 ))
		BEGIN
				UPDATE Active_Fragments 
				SET Contents.modify
				('replace value of (/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@contract=("ServiceBus.ServiceHost.RequestChannels.Wcf.INetDataContractService")]/@contract)[1]
				 with "ServiceBus.ServiceHost.RequestChannels.Wcf.IService2"')		 
				WHERE RootXmlNode = 'ServicePools'
				AND 
				Contents.exist('/ServicePool/RequestChannels/RequestChannel/RequestChannelFactoryData/ServiceModel/services/service/endpoint[@contract="ServiceBus.ServiceHost.RequestChannels.Wcf.INetDataContractService"]')=1
		END

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Renamed service pool endpoints.'
	
	COMMIT TRANSACTION
END		

SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted
AND DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
		
	SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IServiceRequestValidator'
	SET @Description = 'Type mapping used for resolution of ServiceBus.ServiceHost.IServiceRequestValidator instance.'
	SET @FragmentId = '{BABE7D20-D2E9-4F77-B6EF-F4B1AC460D89}'
	
	--
	-- 1. Add new LoaderPorcessInitializationTimeout fragment
	--
		
	IF (NOT EXISTS ( SELECT 1 FROM Active_Fragments WHERE RootGroupId = @RootGroupId AND Id = @FragmentId ) )
		INSERT INTO Active_Fragments
		(
			Id,
			Name,
			[Description],
			RootGroupId,
			PackageId,
			SectionId,
			RootXmlNode,
			Contents
		)
		VALUES
		(
			@FragmentId,
			@Name,
			@Description,
			@RootGroupId,
			@SYSTEM_PACKAGE,
			@UNITY,
			'containers/container/types',
			'<type type="ServiceBus.ServiceHost.IServiceRequestValidator, ServiceBus.ServiceHost.Interfaces" mapTo="ServiceBus.ServiceHost.ServiceRequestValidator, ServiceBus.ServiceHost.Common">
				<lifetime type="external" />
			</type>'
		)
	
	--
	-- 2. Associate new fragment with ServiceBus ServiceHost Service application
	--

	IF (NOT EXISTS(SELECT 1 from Active_GroupFragments WHERE RootGroupId = @RootGroupId AND FragmentId = @FragmentId AND GroupId = @SYSTEM_PACKAGE))	
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			FragmentId,
			GroupId,
			PackageId
		)
		VALUES
		(
			@RootGroupId,
			@FragmentId,
			@SERVICEBUS_SERVICEHOST_SERVICE,
			@SYSTEM_PACKAGE
		)

	
	--
	-- 3. Associate new fragment with ServiceBus Administrative Console application
	--

	IF (NOT EXISTS(SELECT 1 from Active_GroupFragments WHERE RootGroupId = @RootGroupId AND FragmentId = @FragmentId AND GroupId = @SERVICEBUS_ADMINISTRATIVE_CONSOLE))	
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			FragmentId,
			GroupId,
			PackageId
		)
		VALUES
		(
			@RootGroupId,
			@FragmentId,
			@SERVICEBUS_ADMINISTRATIVE_CONSOLE,
			@SYSTEM_PACKAGE
		)
		
		
	--
	-- 4. Associate new fragment with ServiceBus Administrative Console application
	--

	IF (NOT EXISTS(SELECT 1 from Active_GroupFragments WHERE RootGroupId = @RootGroupId AND FragmentId = @FragmentId AND GroupId = @SERVICEBUS_ADMINISTRATIVE_CONSOLE))	
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			FragmentId,
			GroupId,
			PackageId
		)
		VALUES
		(
			@RootGroupId,
			@FragmentId,
			@SERVICEBUS_CLIENT,
			@SYSTEM_PACKAGE
		)
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added configuration entry to configure the resolution of ServiceBus.ServiceHost.IServiceRequestValidator instance.'		
		
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{FEB07DB0-2CC5-48A5-B328-07920DE1034E}'
SET @ReferenceID = '63564'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
DECLARE @SecondSection int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

-- Declare and initialize root group id constant
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE	@PUBSUB_CONFIGURATION uniqueidentifier
SET		@PUBSUB_CONFIGURATION = '{4C93E0C6-A9A6-46ec-81CD-4AAE4F3608BB}'
	
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	UPDATE Active_Fragments 
	SET Contents.modify
		('replace value of (/Channel/HealthCheckFrequency/text())[1] with "00:00:30"')		 
	WHERE	SectionId = @PUBSUB_CONFIGURATION
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			RootXmlNode = 'Channels'

	UPDATE Active_Fragments 
	SET Contents.modify
		('replace value of (/Channel/EchoTimeout/text())[1] with "00:00:10"')		 
	WHERE	SectionId = @PUBSUB_CONFIGURATION
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			RootXmlNode = 'Channels'

	UPDATE Active_Fragments 
	SET Contents.modify
		('replace value of (/Channel/ServiceModel/bindings/customBinding/binding/@sendTimeout)[1] with "00:00:10"')		 
	WHERE	SectionId = @PUBSUB_CONFIGURATION
			AND
			RootGroupId = @ROOT_GROUP_ID
			AND
			RootXmlNode = 'Channels'
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Increased PubSub send timeout.'	
	COMMIT TRANSACTION
END	
GO

DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '41D3F99A-44F1-4FB6-A65E-F8D610B2397E'
SET @ReferenceID = '63687'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize id constants
--
-- RootGroupId - environment - Initial ServiceBus environment from Active_Groups
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

-- MacroId - LOGGING.LOGLEVEL - Global minimal log level. from Active_Macros
DECLARE @MACRO_ID uniqueidentifier
SET		@MACRO_ID = '{FAEE35A6-5C2A-40CB-A74E-CC6C77F58069}'

-- PackageId - System.ServicePools - Contains System and Logging service pools. from Active_Packages
DECLARE @PACKAGE_ID uniqueidentifier
SET		@PACKAGE_ID = '{4B83E58C-490F-47A7-9344-5F787903FDCC}'


DECLARE	@GROUP_ID uniqueidentifier

--
-- 1. Add LOGGING.LOGLEVEL Macro with value Warning to System Service Pool
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SELECT	@GROUP_ID = GroupId
	FROM	Active_Filters
	WHERE	Name='ServicePool.System'
	AND		PackageId = @PACKAGE_ID


	-- ensure another macro with a different value does not already exist
	IF(@GROUP_ID IS NOT NULL)
	BEGIN
		IF ( NOT EXISTS (SELECT ReplicationId,Value FROM Active_GroupMacroValues WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @GROUP_ID AND MacroId = @MACRO_ID) )
			BEGIN
			INSERT INTO Active_GroupMacroValues
					(
						RootGroupId,
						PackageId,
						GroupId,
						MacroId,
						Value
					)
					VALUES
					(
						@ROOT_GROUP_ID,
						@PACKAGE_ID,
						@GROUP_ID,
						@MACRO_ID,
						'Warning'
					)
			END
	END

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Set log level to Warning for System service pool'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{26BFCE4F-07AE-4026-863F-32147E01EA9A}'
SET @ReferenceID = '66561'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @FragmentId uniqueidentifier

	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--Applications
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @SERVICEBUS_CLIENT uniqueidentifier
	SET		@SERVICEBUS_CLIENT = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

	-- Sections
	DECLARE	@SERVICEHOST uniqueidentifier
	SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	-- Packages
	DECLARE @SYSTEM_PACKAGE uniqueidentifier
	SET @SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'
	
	BEGIN TRANSACTION
	
	--
	-- Ensure that test case attribute fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{2BD64AFD-FE43-4C03-8E15-DDD7D268A577}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceBus.ServiceHost.TestCase.Attributes'
			SET @Description = 'Default attribute list for test case.'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@SERVICEHOST,
				NULL,
				'<Attributes><Attribute name="SmokeTest" /></Attributes>'
			)
		END

	--
	-- Ensure that test case attribute fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId,
			PackageId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId,
			@SYSTEM_PACKAGE
		)

	--
	-- Ensure that test case attribute fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId,
			PackageId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			@SYSTEM_PACKAGE
		)
		
	--
	-- Ensure that test case attribute fragment is added to SERVICEBUS_CLIENT application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEBUS_CLIENT AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId,
			PackageId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEBUS_CLIENT,
			@FragmentId,
			@SYSTEM_PACKAGE
		)
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Added configuration entry to provide default attribute list for test cases.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{C2872A5C-05DF-41ED-9767-DCAF345E1967}'
SET @ReferenceID = '74602' 
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)
DECLARE @MacroId uniqueidentifier
DECLARE @FragmentId uniqueidentifier
DECLARE @RootXmlNode varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'
	
--Applications
DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @SERVICEBUS_CLIENT uniqueidentifier
SET		@SERVICEBUS_CLIENT = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

DECLARE	@CONFIGURATION_SERVICE uniqueidentifier
SET		@CONFIGURATION_SERVICE = '{5DB47D16-406F-43de-A06D-BA995FD82F33}'

-- Packages
DECLARE @SYSTEM_PACKAGE uniqueidentifier         
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--Sections
DECLARE @METERING_SECTION uniqueidentifier
SET		@METERING_SECTION = '{DE385948-E7CA-495B-B325-4BACC2C09C2D}'

DECLARE @SERVICEHOST_SECTION uniqueidentifier
SET		@SERVICEHOST_SECTION = '{12BB99C3-3045-498D-BD54-D2690935D845}'

--
--Insert macro for metering Enabled
--

SET @Section = 1
IF DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET	@MacroId = '{00CAF191-A555-4275-9046-D4A44E3E5F11}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'METERING.ENABLED'
			SET @Description = 'Indicates whether metering is enabled.'
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				[Description],
				ValueType
			)
			VALUES
			(
				@MacroId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				'System.String'
			)
		END

	--
	-- Ensure that macro value for environment exists in configuration
	--
	IF( NOT EXISTS( SELECT ReplicationId FROM dbo.Active_GroupMacroValues WHERE MacroId = @MacroId AND RootGroupId = @ROOT_GROUP_ID AND GroupId = @ROOT_GROUP_ID ))
		BEGIN
			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				PackageId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@ROOT_GROUP_ID,
				@MacroId,
				'True'			
			)
		END

	--
	-- Set metering enabled fragment to use macro as value
	--
	SET @FragmentId = '{5F35D4D2-2644-4900-BCD5-D1DEE87F4009}'
	
	UPDATE	Active_Fragments
	SET		Contents = '<Enabled>[DSCS:MACRO:METERING.ENABLED]</Enabled>'
	WHERE	Id = @FragmentId AND
			SectionId = @METERING_SECTION
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added METERING.ENABLED macro'
	COMMIT TRANSACTION
END

--
-- 2. Update MeteringPoints fragment
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	SET	@FragmentId = '{4A53E4F5-FAF5-4DD2-9609-8C861895190D}' -- MeteringPoints Fragment Id
	IF ( EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
	BEGIN
		DECLARE @Counter int
		DECLARE @ReplaceCommand nvarchar(500)
		
		SELECT @Counter = Contents.value('count(/MeteringPoints/MeteringPoint/IsEnabled/text())','int') 
		FROM  Active_Fragments 
		WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID 
		
		WHILE (@Counter>0)
			BEGIN
				SET @ReplaceCommand = 'UPDATE Active_Fragments '
				SET @ReplaceCommand = @ReplaceCommand + 'SET Contents.modify(''replace value of (/MeteringPoints/MeteringPoint/IsEnabled/text())['+CAST(@Counter AS NVARCHAR(5))+'] with "False"'')'
				SET @ReplaceCommand = @ReplaceCommand + 'WHERE Id=''{'+ CAST(@FragmentId as NVARCHAR(50)) + '}'' AND RootGroupId=''{' + CAST(@ROOT_GROUP_ID as NVARCHAR(50)) + '}'''
				
				EXECUTE  sp_executesql @ReplaceCommand	
				SET @Counter = @Counter -1
			END
	END
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'MeterinPoins updated.'
	COMMIT TRANSACTION
END

--
-- 3. Add new fragment for ServicePool MeteringPoint
--
SET @Section = 3
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	SET @FragmentId = '{92082A5A-081D-4112-A130-4BF7CF957C86}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID AND SectionId = @METERING_SECTION ) )
		BEGIN
			SET @Name = 'MeteringPoint.ServiceRequest.Received.Count'
			SET @Description = 'Metering point for number of requests received in service pool.'
			SET @RootXmlNode = 'MeteringPoints'
		
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				[Description],
				SectionId,
				RootXmlNode,
				Contents			
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@METERING_SECTION,
				@RootXmlNode,
				'<MeteringPoint name="ServiceRequest.Received.Count">
					<IsEnabled>True</IsEnabled>
					<MeteringPointQueryFilters>
						<Code name="ServiceRequest.Received" />
						<MeteringType name="Counter" />
						<CallerTypes>
							<CallerType name="ServiceBus.ServiceHost.ServicePool" />
						</CallerTypes>
						<ContextAttributes>
							<ContextAttribute name="MachineName" />
							<ContextAttribute name="ServicePoolName" />
						</ContextAttributes>
					</MeteringPointQueryFilters>
					<PublishedName>ServiceBus.ServiceHost\ServicePool\ServiceRequest.Received.Count</PublishedName>
					<PublishInterval>00:15:00.000</PublishInterval>
					<Targets>
						<Target name="ServiceHost" />
					</Targets>
				</MeteringPoint>'
			)
		END
		
	--Assign fragment to ServiceHost Group
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE FragmentId = @FragmentId AND RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE ) )
		BEGIN
			INSERT INTO Active_GroupFragments
			(
				RootGroupId,
				PackageId,
				GroupId,
				FragmentId
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@SERVICEHOST_SERVICE,
				@FragmentId
			)	
		END
	
	--Assign fragment to Administrative Console Group
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments
			(
				RootGroupId,
				PackageId,
				GroupId,
				FragmentId
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@ADMINISTRATIVE_CONSOLE,
				@FragmentId
			)
		END
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'New fragment for ServicePool MeteringPoint is added.'
	COMMIT TRANSACTION
END
	

--
-- 4. Add unity configuration for logging persistence provider to configuration service
--
SET @Section = 4
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	-- Fragment: UnityConfiguration.Containers.Default.Types.ServiceBus.Logging.ILoggingPersistenceProvider
	SET @FragmentId = '{32FF66B2-EC37-40AC-AFAE-9F033AA6B570}'

	-- Assign fragment to Administrative Console Group
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @CONFIGURATION_SERVICE AND FragmentId = @FragmentId ) )
		BEGIN
			INSERT INTO Active_GroupFragments
			(
				RootGroupId,
				PackageId,
				GroupId,
				FragmentId
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@CONFIGURATION_SERVICE,
				@FragmentId
			)
		END
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added unity configuration for logging persistence provider to configuration service.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{58EC86A3-DE82-4D3A-8E0F-023DA143D9D5}'
SET @ReferenceID = '73568'
SET @Author = 'Mulhem Hazam'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

-- 
DECLARE @Name varchar(250)

-- Declare and initialize ID constants
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}' -- ServiceBus

DECLARE @SERVICE_HOST_SECTION uniqueidentifier
SET		@SERVICE_HOST_SECTION = '{12BB99C3-3045-498D-BD54-D2690935D845}' -- ServiceBus ServiceHost Service
		
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	

-- Update Upload and Download services (Contract and Factory configuration)
-- by adding boolean parameter which indicates whether the
-- downloaded/uploaded resources is 64 bit version or 32 bit.
	
	-- Update Download Service: 
	
			-- UPDATE FRAGMENT Service.ServiceBus.System.ServiceHost.Resources.Download.ServiceFactoryData
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Resources.Download.ServiceFactoryData'
			UPDATE 
				Active_Fragments 
			SET 
				Contents.modify('
				insert
				<Argument name="Download64bitVersion">
							<Description>Whether to download 64bit version or 32bit</Description>
							<MapTo>Download64bitVersion</MapTo>
				</Argument>
				as last
				into
				(/ServiceFactoryData/Steps/Step[@name="GetResourceById"]/Arguments)[1]')
			WHERE 
				SectionId = @SERVICE_HOST_SECTION AND
				RootGroupId = @ROOT_GROUP_ID AND
				Name = @Name AND
				Contents.exist('/ServiceFactoryData/Steps/Step[@name="GetResourceById"]/Arguments/Argument[@name="Download64bitVersion"]') = 0

				
			-- UPDATE FRAGMENT ServiceBus.System.ServiceHost.Resources.Download
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Resources.Download'
			UPDATE 
				Active_Fragments 
			SET 
				Contents.modify('
				insert
				<Input name="Download64bitVersion">
					<Description>Whether to download 64bit version or 32bit</Description>
					<MapTo>Download64bitVersion</MapTo>
					<Required>False</Required>
			  </Input>
				as last
				into
				(/Service[@name="ServiceBus.System.ServiceHost.Resources.Download"]/ServiceContract/Inputs)[1]')
			WHERE 
				SectionId = @SERVICE_HOST_SECTION AND
				RootGroupId = @ROOT_GROUP_ID AND
				Name = @Name AND
				Contents.exist('Service[@name="ServiceBus.System.ServiceHost.Resources.Download"]/ServiceContract/Inputs/Input[@name="Download64bitVersion"]') = 0
	
		
		
	-- Update Upload Service: 
			-- UPDATE FRAGMENT Service.ServiceBus.System.ServiceHost.Resources.Upload.ServiceFactoryData
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Resources.Upload.ServiceFactoryData'
			UPDATE 
				Active_Fragments 
			SET 
				Contents.modify('
				insert
				<Argument name="Upload64bitVersion">
							<Description>Whether to upload 64bit version or 32bit</Description>
							<MapTo>Upload64bitVersion</MapTo>
				</Argument>
				as last
				into
				(/ServiceFactoryData/Steps/Step[@name="SaveResource"]/Arguments)[1]')
			WHERE 
				SectionId = @SERVICE_HOST_SECTION AND
				RootGroupId = @ROOT_GROUP_ID AND
				Name = @Name AND
				Contents.exist('/ServiceFactoryData/Steps/Step[@name="SaveResource"]/Arguments/Argument[@name="Upload64bitVersion"]') = 0
				
			-- UPDATE FRAGMENT Service.ServiceBus.System.ServiceHost.Resources.Upload
			SET @Name = 'Service.ServiceBus.System.ServiceHost.Resources.Upload'
			UPDATE 
				Active_Fragments 
			SET 
				Contents.modify('
				insert
				<Input name="Upload64bitVersion">
					<Description>Whether to upload 64bit version or 32bit</Description>
					<MapTo>Upload64bitVersion</MapTo>
					<Required>False</Required>
				</Input>
				as last
				into
				(/Service[@name="ServiceBus.System.ServiceHost.Resources.Upload"]/ServiceContract/Inputs)[1]')
			WHERE 
				SectionId = @SERVICE_HOST_SECTION AND
				RootGroupId = @ROOT_GROUP_ID AND
				Name = @Name AND
				Contents.exist('Service[@name="ServiceBus.System.ServiceHost.Resources.Upload"]/ServiceContract/Inputs/Input[@name="Upload64bitVersion"]') = 0
		
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added WWF Activity Observer.'
	COMMIT TRANSACTION
END

GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author nvarchar( 50 )

SET @TrackingID = '{CEA82FF2-F5A7-4E64-8F3E-77B63C8E3BC2}'
SET @ReferenceID = '78994'
SET @Author = 'Mulhem Hazam'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0 

	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST_SECTIONID uniqueidentifier
	SET		@SERVICEHOST_SECTIONID = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @SERVICEBUS_CLIENT uniqueidentifier
	SET		@SERVICEBUS_CLIENT = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
	DECLARE	@SYSTEM_PACKAGE uniqueidentifier
	SET		@SYSTEM_PACKAGE = 'D44700BC-7937-30B4-BA13-3013104DE140'

	DECLARE @Name varchar( 250 )
	DECLARE @Description varchar( 1024 )
	DECLARE @RootXmlNode varchar( 1024 )
	DECLARE @FragmentId uniqueidentifier
	DECLARE @FragmentContent varchar( max )
--
-- Add Factory.ServiceHostStateManagerFactory.Default
--
SET @Section = 1

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{64D4EEB0-664B-4D7D-B2E6-02D8EE480D0D}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Factory.ServiceHostStateManagerFactory.Default'
			SET @Description = 'Default implementation of ServiceHostStateManagerFactory'
			SET @RootXmlNode = 'Factories/ServiceHostStateManagerFactories'
			
			SET @FragmentContent = 
			'<ServiceHostStateManagerFactory name="Default">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.Status.Common.dll" />
					<Type>ServiceBus.ServiceHost.Status.Common.ServiceHostStateManagerFactory</Type>
				</Implementation>
			</ServiceHostStateManagerFactory>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEM_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEBUS_CLIENT AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEBUS_CLIENT, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )	
	

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added ServiceHostStateManagerFactory'
	COMMIT TRANSACTION
END

--
-- Add Factory.ServiceHostStatusManagerClientFactory.Default
--
SET @Section = 2

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{6174AC77-4490-4EB3-9F35-7B5A632C89F3}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Factory.ServiceHostStatusManagerClientFactory.Default'
			SET @Description = 'Default implementation of ServiceHostStatusManagerClientFactory'
			SET @RootXmlNode = 'Factories/ServiceHostStatusManagerClientFactories'
			
			SET @FragmentContent = 
			'<ServiceHostStatusManagerClientFactory name="Default">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.Status.Common.dll" />
					<Type>ServiceBus.ServiceHost.Status.Common.ServiceHostStatusManagerClientFactory</Type>
				</Implementation>
			</ServiceHostStatusManagerClientFactory>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEM_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEBUS_CLIENT AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEBUS_CLIENT, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )	
	

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added ServiceHostStatusManagerClientFactory'
	COMMIT TRANSACTION
END

--
-- Add Factory.ServiceHostStatusProviderClientFactory.Default
--
SET @Section = 3

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	BEGIN TRANSACTION
	
	SET	@FragmentId = '{105D63B2-6C65-4FF2-AD21-578DBD8ED92C}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Factory.ServiceHostStatusProviderClientFactory.Default'
			SET @Description = 'Default implementation of ServiceHostStatusProviderClientFactory'
			SET @RootXmlNode = 'Factories/ServiceHostStatusProviderClientFactories'
			
			SET @FragmentContent = 
			'<ServiceHostStatusProviderClientFactory name="Default">
				<Implementation>
					<Resource name="ServiceBus.ServiceHost.Status.Common.dll" />
					<Type>ServiceBus.ServiceHost.Status.Common.ServiceHostStatusProviderClientFactory</Type>
				</Implementation>
			</ServiceHostStatusProviderClientFactory>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEM_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEBUS_CLIENT AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEBUS_CLIENT, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )	
	

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added ServiceHostStatusManagerClientFactory'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{1750A99C-C73F-4050-B719-645E8ED57F7F}'
SET @ReferenceID = '78994'
SET @Author = 'Mulhem Hazam'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- 1. Add macro for sql server for each request store
--
SET @Section = 1

IF DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN

	BEGIN TRANSACTION
	
	DECLARE @Name varchar(250)
	DECLARE @Description varchar(1024)
	DECLARE @MacroId uniqueidentifier
	DECLARE @MacroValue varchar(250)
	--
	-- Declare and initialize ID constants
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'
	
	DECLARE @SQL_SERVER uniqueidentifier
	SET		@SQL_SERVER = '{C333BBE3-973C-47A3-A229-54ACA529D105}'

	DECLARE @SQL_REQUEST_STORE_MACRO uniqueidentifier
	SET		@SQL_REQUEST_STORE_MACRO = '{4A554902-F212-4E4A-9434-559FD556298D}'

	DECLARE @DATABASES_FRAGMENT uniqueidentifier
	SET		@DATABASES_FRAGMENT = '{33FEC1DD-4119-4c95-A8F1-B684ABE6822B}'
	
	DECLARE	@SYSTEM_PACKAGE uniqueidentifier
	SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

	--
	-- Ensure that SQL.REQUEST.STORE.CONNECTION.STRING macro is created for the root group
	--	

	SET @MacroId = '{332CAB16-4E87-4E1F-8ECE-4248142D3901}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SQL.SERVICEHOST.STATE.CONNECTION.STRING'
			SET @Description = 'Connection string for service host state database'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				Name,
				PackageId,
				Description,
				ValueType
			)
			VALUES
			( 
				@MacroId,
				@ROOT_GROUP_ID,
				@Name,
				@SYSTEM_PACKAGE,
				@Description,
				'System.String'
			)
	--
	-- Ensure that value is assigned to macro SQL.REQUEST.STORE.CONNECTION.STRING for all applications
	--
			SELECT @MacroValue = Value FROM Active_GroupMacroValues WHERE MacroId = @SQL_REQUEST_STORE_MACRO

			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				PackageId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@ROOT_GROUP_ID,
				@MacroId,
				@MacroValue
			)
		END
				   
	UPDATE Active_Fragments
	SET Contents.modify('       
				insert
					 <Database name="ServiceHostState">
						<ConnectionString>[DSCS:MACRO:SQL.SERVICEHOST.STATE.CONNECTION.STRING]</ConnectionString>
					</Database>
				as last
				into (/Databases)[1]')
	WHERE Id = @DATABASES_FRAGMENT
	AND
	Contents.exist('/Databases/Database[@name="ServiceHostState"]') = 0

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section,
		'Created connection string macro for service host state database.'

	COMMIT TRANSACTION

END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author nvarchar( 50 )

SET @TrackingID = '{A9A08C24-299D-44D9-B4AD-2F540ACCABC1}'
SET @ReferenceID = '78994'
SET @Author = 'Mulhem Hazam'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0 

	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST_SECTIONID uniqueidentifier
	SET		@SERVICEHOST_SECTIONID = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
	SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @SERVICEBUS_CLIENT uniqueidentifier
	SET		@SERVICEBUS_CLIENT = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
	DECLARE	@SYSTEM_PACKAGE uniqueidentifier
	SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

	DECLARE @Name varchar( 250 )
	DECLARE @Description varchar( 1024 )
	DECLARE @RootXmlNode varchar( 1024 )
	DECLARE @FragmentId uniqueidentifier
	DECLARE @FragmentContent varchar( max )
	DECLARE @MacroId uniqueidentifier
	DECLARE @MacroValue varchar(250)
--
-- Add DefaultArgumentContainerFactory
--
SET @Section = 1

IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	
	BEGIN TRANSACTION
	
	--
	-- Add Macro for the ServiceHostStatus Port
	--
	SET @MacroId = '{4193C943-F057-4E3B-BE39-4E02A2C944BF}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'SERVICEHOST.STATUS.PORT'
			SET @Description = 'Service Host Status Port'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@MacroId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				'System.String'
			)
	--
	-- Ensure that value is assigned to macro SERVICE.HOST.STATUS.PORT
	--
			SET @MacroValue = '47115'

			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				PackageId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@ROOT_GROUP_ID,
				@MacroId,
				@MacroValue
			)
		END

	--
	-- Add Macro for the Configuration Service Port
	--
	SET @MacroId = '{B34EB06F-6ABA-4B0C-AA34-D3B3A990CB09}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'CONFIGURATION.SERVICE.PORT'
			SET @Description = 'Configuration Service Port'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@MacroId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				'System.String'
			)
	--
	-- Ensure that value is assigned to macro SERVICE.HOST.STATUS.PORT
	--
			SET @MacroValue = '47003'

			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				PackageId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@ROOT_GROUP_ID,
				@MacroId,
				@MacroValue
			)
		END

		--
	-- Add Macro for the StartServiceHostStatusManager
	--
	SET @MacroId = '{1CCAF57C-5CAE-46B4-9962-A5F6AF870DC9}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Macros WHERE Id = @MacroId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'START.SERVICEHOST.STATUS.MANAGER'
			SET @Description = 'Whether to start ServiceHostStatusManager or not'
			
			INSERT INTO Active_Macros
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				ValueType
			)
			VALUES
			( 
				@MacroId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				'System.String'
			)
	--
	-- Ensure that value is assigned to macro SERVICE.HOST.STATUS.PORT
	--
			SET @MacroValue = 'False'

			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				PackageId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@ROOT_GROUP_ID,
				@MacroId,
				@MacroValue
			)

			SET @MacroValue = 'True'

			INSERT INTO Active_GroupMacroValues
			(
				RootGroupId,
				PackageId,
				GroupId,
				MacroId,
				Value
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@SERVICEHOST_SERVICE,
				@MacroId,
				@MacroValue
			)

		END

	--
	-- Add fragment for ServiveHostStateProvider
	--

	SET	@FragmentId = '{D0A93B37-8E9B-43E9-A369-AFE3111FDA80}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceHostStatus.ServiceHostStatusManager'
			SET @Description = 'ServiceHostStatus.ServiceHostStatusManager'
			SET @RootXmlNode = 'ServiceHostStatus'
			
			SET @FragmentContent = 
			'<ServiceHostStatusManager>
				<StartServiceHostStatusManager>
					[DSCS:MACRO:START.SERVICEHOST.STATUS.MANAGER]
				</StartServiceHostStatusManager>
				<ServiceModel>
					<services>
						<service name="ServiceBus.ServiceHost.Status.Common.ServiceHostStateManagerServer" behaviorConfiguration="serviceThrottling">
							<endpoint address="" binding="netTcpBinding" bindingConfiguration="TCP" contract="ServiceBus.ServiceHost.Status.Interfaces.IServiceHostStatusManager" />
							<host>
								<baseAddresses>
									<add baseAddress="net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SERVICEHOST.STATUS.PORT]/ServiceHostStateManagerServer" />
								</baseAddresses>
							</host>
						</service>
					</services>
					<client>
						<endpoint name="NetTcpBinding_IServiceHostStatusManager" address="net.tcp://[DSCS:MACRO:APPPOOL.SERVER.NAME]:[DSCS:MACRO:SERVICEHOST.STATUS.PORT]/ServiceHostStateManagerServer" binding="netTcpBinding" bindingConfiguration="TCP" contract="ServiceBus.ServiceHost.Status.Interfaces.IServiceHostStatusManager" />
					</client>
					<bindings>
						<netTcpBinding>
							<binding name="TCP" openTimeout="00:30:00" closeTimeout="00:00:10" sendTimeout="00:05:00" maxReceivedMessageSize="2147483647">
								<readerQuotas maxDepth="2147483647" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="2147483647" maxNameTableCharCount="2147483647" />
								<security mode="None" />
							</binding>
						</netTcpBinding>
					</bindings>
					<behaviors>
						<serviceBehaviors>
							<behavior name="serviceThrottling">
								<serviceThrottling maxConcurrentCalls="500000" maxConcurrentSessions="500000" maxConcurrentInstances="100" />
							</behavior>
						</serviceBehaviors>
					</behaviors>
				</ServiceModel>
			</ServiceHostStatusManager>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEM_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEBUS_CLIENT AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEBUS_CLIENT, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )	

	--
	-- Add fragment for ServiveHostStateProvider
	--

	SET	@FragmentId = '{1B564A09-24A4-4427-BB99-E038E274100B}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'ServiceHostStatus.ServiceHostStatusProvider'
			SET @Description = 'ServiceHostStatus.ServiceHostStatusProvider'
			SET @RootXmlNode = 'ServiceHostStatus'
			
			SET @FragmentContent = 
			'<ServiceHostStatusProvider>
				<ServiceModel>
					<client>
						<endpoint name="NetTcpBinding_IServiceHostStatusProvider" address="net.tcp://[DSCS:MACRO:CONFIGURATION.POOL.ADDRESS]:[DSCS:MACRO:CONFIGURATION.SERVICE.PORT]/ServiceHostStatusProvider" binding="netTcpBinding" bindingConfiguration="TCP" contract="ServiceBus.ServiceHost.Status.Interfaces.IServiceHostStatusProvider" />
					</client>
					<bindings>
						<netTcpBinding>
							<binding name="TCP" openTimeout="00:30:00" closeTimeout="00:00:10" sendTimeout="00:01:00" receiveTimeout="00:01:00" maxReceivedMessageSize="2147483647">
								<readerQuotas maxDepth="2147483647" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="2147483647" maxNameTableCharCount="2147483647" />
								<security mode="None" />
							</binding>
						</netTcpBinding>
					</bindings>
				</ServiceModel>
			</ServiceHostStatusProvider>'
			
			INSERT INTO 
				Active_Fragments ( Id, RootGroupId, PackageId, IsActive, IsHistorical, Name, Description, SectionId, RootXmlNode, Contents	)
			VALUES
				( @FragmentId, @ROOT_GROUP_ID, @SYSTEM_PACKAGE, 1, 0, @Name, @Description, @SERVICEHOST_SECTIONID, @RootXmlNode, @FragmentContent	)
		END
	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEHOST_SERVICE, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )
			
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @ADMINISTRATIVE_CONSOLE, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )

	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEBUS_CLIENT AND FragmentId = @FragmentId ) )
		INSERT INTO 
			Active_GroupFragments ( RootGroupId, GroupId, FragmentId, PackageId, IsActive, IsHistorical )
		VALUES 	
			( @ROOT_GROUP_ID, @SERVICEBUS_CLIENT, @FragmentId, @SYSTEM_PACKAGE, 1, 0 )	


	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added ServiceHostStatusManager and ServiceHostStatusProvider Hosts Configuration'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{D6204663-D361-4A53-84D3-C59BC724A2A5}'
SET @ReferenceID = '78994'
SET @Author = 'Mulhem Hazam'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @Name varchar(250)
DECLARE @Description varchar(1024)

--
-- Declare and initialize ID constants
--
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE @SYSTEM_PACKAGE uniqueidentifier
SET @SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--Applications
DECLARE @ADMINISTRATIVE_CONSOLE uniqueidentifier
SET		@ADMINISTRATIVE_CONSOLE = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

DECLARE @COMMANDLINE_RUNTESTCASES uniqueidentifier
SET		@COMMANDLINE_RUNTESTCASES = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

DECLARE	@SERVICEHOST_SERVICE uniqueidentifier
SET		@SERVICEHOST_SERVICE = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

--Sections
DECLARE	@SERVICEHOST uniqueidentifier
SET		@SERVICEHOST = '{12BB99C3-3045-498d-BD54-D2690935D845}'

DECLARE @FragmentId uniqueidentifier

--
--  Add resource
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Status.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{83386F7E-A310-4434-948F-9D53199EFD12}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.Status.Common.dll'
			SET @Description = 'ServiceBus.ServiceHost.Status.Common.dll resource'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
				<Resource name="ServiceBus.ServiceHost.Status.Common.dll" id="26b2d4ce-f302-4d2f-9ad4-48028dddda1f">
					<FileName>ServiceBus.ServiceHost.Status.Common.dll</FileName>
					<Has64BitImplementation>False</Has64BitImplementation>
					<Dependencies>
						<Resource name="ServiceBus.ServiceHost.Status.Interfaces.dll" />
						<Resource name="ServiceBus.PubSub.Interfaces.dll" />
						<Resource name="ServiceBus.Utility.Wcf.dll" />
						<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
						<Resource name="ServiceBus.Utility.Configuration.dll" />
						<Resource name="ServiceBus.Utility.Database.dll" />
						<Resource name="ServiceBus.Utility.Unity.dll" />
						<Resource name="ServiceBus.Logging.Interfaces.dll" />
						<Resource name="ServiceBus.Utility.Assembly.dll" />
					</Dependencies>
				</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Status.Common.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId,
			PackageId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId,
			@SYSTEM_PACKAGE
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Status.Common.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId,
			PackageId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			@SYSTEM_PACKAGE
		)
		
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Status.Common.dll fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId,
			PackageId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			@SYSTEM_PACKAGE
		)
	--
	-- Ensure Resource.ServiceBus.ServiceHost.Common.dll has dependency on Resource.ServiceBus.ServiceHost.Status.Common.dll
	--
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.ServiceHost.Common.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{3C97C2AF-8143-4DB5-833A-4505732D729B}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.ServiceHost.Common.dll"]') = 0
		
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Status.Common.dll fragment is created for SERVICEHOST section
	--
	SET	@FragmentId = '{1F73ACA2-9975-4853-8E3B-2D77A6FE9577}'
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID ) )
		BEGIN
			SET @Name = 'Resource.ServiceBus.ServiceHost.Status.Interfaces.dll'
			SET @Description = 'ServiceBus.ServiceHost.Status.Interfaces.dll resource'
 
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				Description,
				SectionId,
				RootXmlNode,
				Contents
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@SERVICEHOST,
				'ResourceCatalog/ResourceGroup name="ServiceHost"',
				'
				<Resource name="ServiceBus.ServiceHost.Status.Interfaces.dll" id="0ff96a2f-f721-4260-93ad-4ed23fcdb3a6">
					<FileName>ServiceBus.ServiceHost.Status.Interfaces.dll</FileName>
					<Has64BitImplementation>False</Has64BitImplementation>
					<Dependencies>
						<Resource name="ServiceBus.ServiceHost.Interfaces.dll" />
						<Resource name="ServiceBus.Utility.Configuration.dll" />
						<Resource name="Microsoft.Practices.EnterpriseLibrary.Common.dll" />
						<Resource name="ServiceBus.Configuration.Common.dll" />
					</Dependencies>
				</Resource>
				'
			)
		END

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Status.Interfaces.dll fragment is added to SERVICEHOST_SERVICE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId,
			PackageId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@SERVICEHOST_SERVICE,
			@FragmentId,
			@SYSTEM_PACKAGE
		)

	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Status.Interfaces.dll fragment is added to ADMINISTRATIVE_CONSOLE application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId,
			PackageId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@ADMINISTRATIVE_CONSOLE,
			@FragmentId,
			@SYSTEM_PACKAGE
		)
		
	--
	-- Ensure that Resource.ServiceBus.ServiceHost.Status.Interfaces.dll fragment is added to COMMANDLINE_RUNTESTCASES application
	--
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE RootGroupId = @ROOT_GROUP_ID AND GroupId = @COMMANDLINE_RUNTESTCASES AND FragmentId = @FragmentId ) )
		INSERT INTO Active_GroupFragments
		(
			RootGroupId,
			GroupId,
			FragmentId,
			PackageId
		)
		VALUES
		(
			@ROOT_GROUP_ID,
			@COMMANDLINE_RUNTESTCASES,
			@FragmentId,
			@SYSTEM_PACKAGE
		)
	--
	-- Ensure ServiceBus.ServiceHost.Status.Interfaces.dll has dependency on Resource.ServiceBus.ServiceHost.Status.Common.dll
	--
	UPDATE 
		Active_Fragments 
	SET 
		Contents.modify('insert <Resource name="ServiceBus.ServiceHost.Status.Interfaces.dll" /> into (/Resource/Dependencies)[1]')
	WHERE 
		Id = '{3C97C2AF-8143-4DB5-833A-4505732D729B}' AND
		Contents.exist('/Resource/Dependencies/Resource[@name="ServiceBus.ServiceHost.Status.Interfaces.dll"]') = 0	
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added new ServiceHostState resources'
	COMMIT TRANSACTION
END

SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN	
	BEGIN TRANSACTION

	SET	@FragmentId = '{1F73ACA2-9975-4853-8E3B-2D77A6FE9577}'
	SET @Name = 'Resource.ServiceBus.ServiceHost.Status.Interfaces.dll'
	SET @Description = 'ServiceBus.ServiceHost.Status.Interfaces.dll resource'

	UPDATE Active_Fragments
	SET Name = @Name, [Description] = @Description
	WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Fixed fragment name for Resource.ServiceBus.ServiceHost.Status.Interfaces.dll'
	COMMIT TRANSACTION
END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar( 10 )
DECLARE @Author nvarchar( 50 )

SET @TrackingID = '{8A289930-3C76-4A77-B9F3-DDC2AE59F13E}'
SET @ReferenceID = '80879'
SET @Author = 'Enes Pelko'

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0 

	--
	-- Declare and initialize root group id constant
	--
	DECLARE	@ROOT_GROUP_ID uniqueidentifier
	SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

	--
	-- Declare and initialize section ID constants
	--
	DECLARE	@SERVICEHOST_SECTIONID uniqueidentifier
	SET		@SERVICEHOST_SECTIONID = '{12BB99C3-3045-498d-BD54-D2690935D845}'
	
	--
	-- Declare and initialize application (child group) id constants
	--
	DECLARE	@SERVICEHOST_SERVICE_GROUP uniqueidentifier
	SET		@SERVICEHOST_SERVICE_GROUP = '{4FF5DBB5-A888-4c76-B222-8EE53950E511}'

	DECLARE @ADMINISTRATIVE_CONSOLE_GROUP uniqueidentifier
	SET		@ADMINISTRATIVE_CONSOLE_GROUP = '{B233BE84-30B6-4349-B309-F24942D8DE4B}'

	DECLARE @SERVICEBUS_CLIENT_GROUP uniqueidentifier
	SET		@SERVICEBUS_CLIENT_GROUP = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'
	
	DECLARE	@SYSTEM_PACKAGE uniqueidentifier
	SET		@SYSTEM_PACKAGE = 'D44700BC-7937-30B4-BA13-3013104DE140'

	DECLARE @UNITY_SECTION uniqueidentifier
	SET		@UNITY_SECTION = '{29B68C85-422C-4F38-B4ED-5C917010C756}'

	DECLARE @Name varchar( 250 )
	DECLARE @Description varchar( 1024 )
	DECLARE @RootXmlNode varchar( 1024 )
	DECLARE @FragmentId uniqueidentifier
	DECLARE @FragmentContent varchar( max )

---
--- Create Fragment for Federation unity configuration
---
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	SET @FragmentId = '{E075A6A3-EA84-4424-B605-64DB170C7527}'	
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_Fragments WHERE Id = @FragmentId AND RootGroupId = @ROOT_GROUP_ID AND SectionId = @UNITY_SECTION ) )
		BEGIN
			SET @Name = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IFactoryProvider'
			SET @Description = 'UnityConfiguration.Containers.Default.Types.ServiceBus.ServiceHost.IFactoryProvider'
			SET @RootXmlNode = 'containers/container/types'
			
			INSERT INTO Active_Fragments
			(
				Id,
				RootGroupId,
				PackageId,
				Name,
				[Description],
				SectionId,
				RootXmlNode,
				Contents			
			)
			VALUES
			(
				@FragmentId,
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@Name,
				@Description,
				@UNITY_SECTION,
				@RootXmlNode,
				'<type type="ServiceBus.ServiceHost.IFactoryProvider, ServiceBus.ServiceHost.Interfaces" mapTo="ServiceBus.ServiceHost.FactoryProvider, ServiceBus.ServiceHost.Common">
					<lifetime type="singleton" />
				</type>'
			)
		END

	-- Assigning Fragment to Administrative Console Group
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE FragmentId = @FragmentId AND RootGroupId = @ROOT_GROUP_ID AND GroupId = @ADMINISTRATIVE_CONSOLE_GROUP ) )
		BEGIN
			INSERT INTO Active_GroupFragments
			(
				RootGroupId,
				PackageId,
				GroupId,
				FragmentId
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@ADMINISTRATIVE_CONSOLE_GROUP,
				@FragmentId
			)
		END

	-- Assigning Fragment  to ServiceHost Group
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE FragmentId = @FragmentId AND RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEHOST_SERVICE_GROUP ) )
		BEGIN
			INSERT INTO Active_GroupFragments
			(
				RootGroupId,
				PackageId,
				GroupId,
				FragmentId
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@SERVICEHOST_SERVICE_GROUP,
				@FragmentId
			)
		END

		-- Assigning Fragment  to Generic Client Group
	IF ( NOT EXISTS ( SELECT ReplicationId FROM Active_GroupFragments WHERE FragmentId = @FragmentId AND RootGroupId = @ROOT_GROUP_ID AND GroupId = @SERVICEBUS_CLIENT_GROUP ) )
		BEGIN
			INSERT INTO Active_GroupFragments
			(
				RootGroupId,
				PackageId,
				GroupId,
				FragmentId
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@SERVICEBUS_CLIENT_GROUP,
				@FragmentId
			)
		END

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Created Fragment for FactoryProvider unity configuration.'
	COMMIT TRANSACTION

END
GO

--
-- Configure and initialize the data fix script's tracking information
--
DECLARE @PreviousTrackingID uniqueidentifier
DECLARE @TrackingID uniqueidentifier
DECLARE @ReferenceID nchar(10)
DECLARE @Author nvarchar(50)

SET @TrackingID = '{C58B84FC-74EF-4504-9EBC-B7E8E957A95A}'
SET @ReferenceID = '85552'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit
DECLARE @SectionNotRun bit
DECLARE @PreviousSection int
DECLARE @Section int

SET @SectionCompleted = 1
SET @SectionNotRun = 0
SET @PreviousSection = 1

-- Declare and initialize root group id constant
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

-- Sections
DECLARE @METERING_SECTION uniqueidentifier
SET		@METERING_SECTION = '{DE385948-E7CA-495B-B325-4BACC2C09C2D}'

-- Fragments
DECLARE @METERING_POINTS_FRAGMENT uniqueidentifier
SET		@METERING_POINTS_FRAGMENT = '{4A53E4F5-FAF5-4DD2-9609-8C861895190D}' -- MeteringPoints Fragment Id

-- Common variables
DECLARE @Name varchar( 250 )
DECLARE @Description varchar( 1024 )

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	IF OBJECT_ID('tempdb..#FragmentContents') IS NOT NULL
		DROP TABLE #FragmentContents
		
	CREATE TABLE #FragmentContents
	(
		Id                    int,
		MeteringPointName     varchar( 1000 ),
		MigratedConfiguration xml,
		IsMigrated            bit
	);

	INSERT INTO #FragmentContents
	SELECT	ReplicationId,
			MeteringPoint.value( './@name', 'varchar( 256 )' ) AS MeteringPointName,
			Contents,
			0
	FROM	Active_Fragments
			CROSS APPLY
			Contents.nodes( './MeteringPoints/MeteringPoint' ) AS MeteringPoints( MeteringPoint )
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Id = @METERING_POINTS_FRAGMENT
			AND
			IsHistorical = 0
	ORDER BY MeteringPointName
		
	DECLARE @ReplicationId      int
	DECLARE @MeteringPointName    varchar( 256 )
	DECLARE @TypeName varchar(250)	
	SET		@TypeName = 'ServiceBus.ServiceHost.WWF.Service'
	
	WHILE EXISTS( SELECT Id FROM #FragmentContents WHERE IsMigrated = 0 )
		BEGIN
			SELECT TOP 1
					@ReplicationId = Id,
					@MeteringPointName = MeteringPointName
			FROM	#FragmentContents
			WHERE	IsMigrated = 0
			
			UPDATE	#FragmentContents
			SET		MigratedConfiguration.modify( 'insert element CallerType { attribute name { sql:variable( "@TypeName" ) } } 
													as last
													into ( /MeteringPoints/MeteringPoint[@name=sql:variable("@MeteringPointName")]/MeteringPointQueryFilters/CallerTypes )[ 1 ]' )
			WHERE	Id = @ReplicationId
					AND
					MigratedConfiguration.exist( '/MeteringPoints/MeteringPoint[@name=sql:variable("@MeteringPointName")]/MeteringPointQueryFilters/CallerTypes/CallerType[ @name = sql:variable( "@TypeName" ) ]' ) = 0		
					AND
					MigratedConfiguration.exist( '/MeteringPoints/MeteringPoint[@name=sql:variable("@MeteringPointName")]/MeteringPointQueryFilters/CallerTypes/CallerType[ @name = "ServiceBus.ServiceHost.DSE.Service" ]' ) = 1		
			
			UPDATE	#FragmentContents
			SET		IsMigrated = 1
			WHERE	Id = @ReplicationId
					AND
					MeteringPointName = @MeteringPointName
		END
	
	UPDATE	Active_Fragments
	SET		Contents = fc.MigratedConfiguration
	FROM	#FragmentContents fc
	WHERE	ReplicationId = fc.Id

	DROP TABLE #FragmentContents
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added WWF service to caller types.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{C718F991-8D6B-4901-A2C6-812EAFE163EE}'
SET @ReferenceID = '87810' 
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize ID constants
--

-- ServiceBusr.ServiceHost.Common.dll Fragment
DECLARE @FRAGMENT_ID uniqueidentifier
SET @FRAGMENT_ID = '{3C97C2AF-8143-4DB5-833A-4505732D729B}'

--Groups
DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE @CLIENT_GROUP uniqueidentifier
SET @CLIENT_GROUP = '{523CFC5F-6219-455A-8EF4-F0E6A17247EB}'

-- Packages
DECLARE @SYSTEM_PACKAGE uniqueidentifier         
SET		@SYSTEM_PACKAGE = '{D44700BC-7937-30B4-BA13-3013104DE140}'

--Sections
DECLARE @SERVICEHOST_SECTION uniqueidentifier
SET		@SERVICEHOST_SECTION = '{12BB99C3-3045-498D-BD54-D2690935D845}'


---
--- Scripts
---

---
--- Add fragment to the ServiceBusClient group
---
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION
	
	
IF(NOT EXISTS(SELECT ReplicationId from Active_GroupFragments WHERE FragmentId = @FRAGMENT_ID AND RootGroupId = @ROOT_GROUP_ID AND GroupId = @CLIENT_GROUP))
BEGIN
	INSERT INTO Active_GroupFragments
			(
				RootGroupId,
				PackageId,
				GroupId,
				FragmentId
			)
			VALUES
			(
				@ROOT_GROUP_ID,
				@SYSTEM_PACKAGE,
				@CLIENT_GROUP,
				@FRAGMENT_ID
			)
END

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added Missing Group Fragnebt association.'
	COMMIT TRANSACTION
END
GO

DECLARE @TrackingID uniqueidentifier, @ReferenceID nchar(10), @Author nvarchar(50)
SET @TrackingID = '{CD5C84A6-D8A1-47EA-ABC5-E46657117EC9}'
SET @ReferenceID = '94267'
SET @Author = 'Adnan Kovacic'

DECLARE @SectionCompleted bit, @SectionNotRun bit
DECLARE @Section int
SET @SectionCompleted = 1
SET @SectionNotRun = 0

EXECUTE DataFix.Initialize @TrackingID, @ReferenceID, @Author

--
-- Declare and initialize ID constants
--
DECLARE @LOGGING_SERVICEPOOL uniqueidentifier
SET		@LOGGING_SERVICEPOOL = '{16088ACE-C7E5-4354-B4C9-60402492FCC7}'

DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

DECLARE	@SERVICEHOST_SECTION uniqueidentifier
SET		@SERVICEHOST_SECTION = '{12BB99C3-3045-498d-BD54-D2690935D845}'

--
--  Update logging service pool to increase timout
--
SET @Section = 1
IF 	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	CREATE TABLE #ChannelsMigration94267
	(
		Id int,
		ChannelName varchar( 256 ),
		MigratedConfiguration xml,
		IsMigrated bit
	)
	
	-- select * from ChannelsMigration

	INSERT INTO #ChannelsMigration94267
	SELECT	ReplicationId,
			Channel.value( '( @name )[ 1 ]', 'varchar( 256 )' ),-- AS ChannelAddress
			Contents,
			0	-- At the beginning, channel configuration is not migrated
	FROM	Active_Fragments
			CROSS APPLY
			Contents.nodes( 'ServicePool/RequestChannels/RequestChannel' ) AS Channels( Channel )
	WHERE	RootGroupId = @ROOT_GROUP_ID
			AND
			Id = @LOGGING_SERVICEPOOL
	
	
	DECLARE @ReplicationId int
	DECLARE @ChannelName varchar( 256 )

	WHILE EXISTS( SELECT Id FROM #ChannelsMigration94267 WHERE IsMigrated = 0 )
	BEGIN
		-- Select information about the channel for configuration migration
		SELECT TOP 1
				@ReplicationId = Id,
				@ChannelName = ChannelName
		FROM	#ChannelsMigration94267
		WHERE	IsMigrated = 0
		
		EXEC
		(
			'UPDATE #ChannelsMigration94267
			 SET MigratedConfiguration.modify
			 (
				''replace value of ( .//RequestChannels/RequestChannel[@name="'+@ChannelName+'"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/@sendTimeout )[ 1 ]
						  with "00:05:00"''
			 )
			 WHERE	Id = ' + @ReplicationId +'
			 AND MigratedConfiguration.exist
			 (
				''.//RequestChannels/RequestChannel[@name="'+@ChannelName+'"]/RequestChannelFactoryData/ServiceModel/bindings/customBinding/binding/@sendTimeout''
			 ) = 1
			 '
		)
		
		-- Mark channel configuration as migrated
		UPDATE	#ChannelsMigration94267
		SET		IsMigrated = 1
		WHERE	Id = @ReplicationId
				AND
				ChannelName = @ChannelName

	END
	
	-- Now use migrated channel configuration to update current configuration
	UPDATE	Active_Fragments
	SET		Contents = cm.MigratedConfiguration
	FROM	#ChannelsMigration94267 cm
	WHERE	ReplicationId = cm.Id


	DROP TABLE #ChannelsMigration94267

	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Added ServiceBus.System.Resources fragment'
	COMMIT TRANSACTION
END

--
-- 2. Update logging services host data configuration
--
SET @Section = 2
IF 	DataFix.SectionState( @TrackingID, @Section - 1 ) = @SectionCompleted 
	AND
	DataFix.SectionState( @TrackingID, @Section ) = @SectionNotRun
BEGIN
	BEGIN TRANSACTION

	UPDATE [dbo].[Active_Fragments]
	SET Contents = '<ServiceHostData>
		<PersistPending>False</PersistPending>
		<PersistActive>False</PersistActive>
		<MaximumProcessingTime>00:03:00</MaximumProcessingTime>
		<Package name="System.Logging.Services" />
	</ServiceHostData>'
	WHERE Name = 'Service.ServiceBus.System.Logging.GetPage.ServiceHostData'
	AND SectionId = @SERVICEHOST_SECTION
  
	UPDATE [dbo].[Active_Fragments]
	SET Contents = '<ServiceHostData>
		<PersistPending>False</PersistPending>
		<PersistActive>False</PersistActive>
		<MaximumProcessingTime>00:03:00</MaximumProcessingTime>
		<Package name="System.Logging.Services" />
	</ServiceHostData>'
	WHERE Name = 'Service.ServiceBus.System.Logging.GetContextMachineCounts.ServiceHostData'
	AND SectionId = @SERVICEHOST_SECTION
	
	EXECUTE DataFix.SetSectionCompleted @TrackingID, @Section, 'Updated logging services host data configuration'
	COMMIT TRANSACTION
END
GO

-- Update schema version
DECLARE @FragmentId uniqueidentifier
SET	@FragmentId = '{D21BB9B7-5A33-4F6E-B4B3-583257590256}'
UPDATE	Active_Fragments
SET		Contents = '<SchemaVersion>3.3.0.34</SchemaVersion>'
WHERE	Id = @FragmentId

--
-- Update platform version
--
SET		@FragmentId = '{7BDDD428-2A4F-44B2-824B-B99E695DA2BC}'
UPDATE	Active_Fragments
SET		Contents = '<PlatformVersion>3.3.3.27</PlatformVersion>'
WHERE	Id = @FragmentId

--
-- Update min client versions
--
SET		@FragmentId = '{80BA16F7-B9EC-44FF-810D-BB1407CF772A}'
UPDATE	Active_Fragments
SET		Contents = '<Client name="SERVICEBUS.ADMINISTRATION.SHELL">3.3.0.34</Client>'
WHERE	Id = @FragmentId
 
SET		@FragmentId = '{FD12B33B-0A83-45A1-99AE-FBD7CE51260E}'
UPDATE	Active_Fragments
SET		Contents = '<Client name="SERVICEBUS.CONFIGURATION.SERVICE">3.3.0.34</Client>'
WHERE	Id = @FragmentId
 
SET		@FragmentId = '{9D15D2E6-1613-47B1-A210-C6323DAB4A9C}'
UPDATE	Active_Fragments
SET		Contents = '<Client name="SERVICEBUS.RUNTESTCASE">3.3.0.34</Client>'
WHERE	Id = @FragmentId
 
SET		@FragmentId = '{20E1CC4A-44AB-4DED-9885-F2F65896A413}'
UPDATE	Active_Fragments
SET		Contents = '<Client name="SERVICEBUS.SERVICEHOST.SERVICE">3.3.0.34</Client>'
WHERE	Id = @FragmentId
 
SET		@FragmentId = '{6FFAEC3B-E34D-4BB4-8FAA-0158C7232B7E}'
UPDATE	Active_Fragments
SET		Contents = '<Client name="ServiceBus.ServiceHost.ServicePoolLoader">3.3.0.34</Client>'
WHERE	Id = @FragmentId

GO

-- Insert certificate

DELETE [dbo].[Certificates]
WHERE [Type]='Signing'

GO

INSERT INTO [dbo].[Certificates]
           ([Type]
           ,[Thumbprint]
           ,[CertificateName]
           ,[Contents]
           ,[Remarks])
     VALUES
           ('Signing'
           ,'79AC060BFED053560CAF341FC0B18DB72C120638'
           ,'CN=Azure POC'
           ,'MIIGYgIBAzCCBiIGCSqGSIb3DQEHAaCCBhMEggYPMIIGCzCCA88GCSqGSIb3DQEHAaCCA8AEggO8MIIDuDCCA7QGCyqGSIb3DQEMCgECoIICtjCCArIwHAYKKoZIhvcNAQwBAzAOBAh3Sw3V1xqLcQICB9AEggKQ27jRqhil0FfosjJVG//xET6U7EztdiTq9GVViteWAiCFE7d4v1lg3fP0/v0UlenbmwfnriLggCMMgyOJUSid3kTHaQbAI05tTRTfaWxSs5Qg/ss6j3L3nH6VViTZ2O9xXdkgsL5iizK1c4sI7P3MXT/CU0+EVMYGbK5Zd1fvFUTZrKtvfnTkDO6zTNsPxDDhBzsZEyWHAWJwS4uVSqIpWPtQPFzp6fk7SXFU8DNh2u1ncqbUMPl5ThqNt+vrDmL3FfD3zsFOvtVQtvDMqDYU7syXMwWIG3k70qOwnuwh+Aim51Ix+YMsmNp05jIpOC6JPsb5bs9sXOxLoVJhiecMqFN9PV4lJOlRiN9T8qdAUUmYZsn01lfcYvsnKhpxhvzAElwWoS4TGg+3kK8xC8DpB4couGSAL6mgTGt+gcnjWmCEEZ4E/lnQT7/+NMVsGEhUIy/GH221AOrD2vCmmSaECtXx/CvwPquOKPVHNZMbJQYw/MB6vGRZCA+4/0ErgqNNyVjbbxHkqZUsCY2jSaKhBVJM7K9vDjte5UMmIA51GyKBDpiB63u+j2CvFcSqzTHgMsX2WHmV8Myd6ZoeqtUzvBBVoJMSE/8FKsIJ6oOSiQC0Jcyzq1aUa2mVeA/WQSf2aSv3fUMe5uiSbePsZ1C5d4QU0eeEwnbGT1ZKemL5evcK1/PLLmZxMUarFxLV4PVaroJWhN+AKUeFt0IxlCXUUasOMHwdELHTkH/QrTtgZ2VqS1HmHzaEFv5i8TXONIu8uw0ZxmKOSeQ5S2Z38QiHDv1YbpzhPJDLbSBVbgA2+ch1rNQCyjB+C2z0n1HzYhxvadZCYzVdH8O4PUM1okLDZBSyNmL5xRUYrDw8SibJRq8xgeowDQYJKwYBBAGCNxECMQAwEwYJKoZIhvcNAQkVMQYEBAEAAAAwVwYJKoZIhvcNAQkUMUoeSABkADEAMgA0ADQANwA2AGYALQA5AGQAOQAzAC0ANAA3ADcANgAtADgAOQAzADYALQBlAGEAMwA1ADEAOQBhADIANgA2AGUAZDBrBgkrBgEEAYI3EQExXh5cAE0AaQBjAHIAbwBzAG8AZgB0ACAARQBuAGgAYQBuAGMAZQBkACAAQwByAHkAcAB0AG8AZwByAGEAcABoAGkAYwAgAFAAcgBvAHYAaQBkAGUAcgAgAHYAMQAuADAwggI0BgkqhkiG9w0BBwGgggIlBIICITCCAh0wggIZBgsqhkiG9w0BDAoBA6CCAfEwggHtBgoqhkiG9w0BCRYBoIIB3QSCAdkwggHVMIIBKqADAgECAhBy1H5Jl5RxvkbinZrUO8heMCEGCSqGSIb3DQEBBDAUMRIwEAYDVQQDEwlBenVyZSBQT0MwFDESMBAGA1UEAxMJQXp1cmUgUE9DMCAXDTE3MTIxMTE5MTgzOVoYDzk5OTkxMjMxMjM1OTU5WjAUMRIwEAYDVQQDEwlBenVyZSBQT0MwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALqhA9ksq4czz2p+0VO/hLUP3lb0j5vKW5FXOB8O8y0PFGD/kdmEhxX0XEdYn64RnwGLqx6eCM6E9aHq0Ih6S3mO5/aaWAzdNxFszuRT6kSoWsAFmZFSMjebooa5czzcMbqHO8diiifS6bPfRhVv9HzWfJ6rriLWeGqx4gxC9NJzAgMBAAEwIQYJKoZIhvcNAQEEMBQxEjAQBgNVBAMTCUF6dXJlIFBPQwOBgQAJvmTt7x++MILbpW/8mgXCW8J/8Ofr6gXXzZKpQ1D5QUKDd+WCDbNNDM5Av7jOoXcdKY7/PZZJ8GgFWdXp6q195Fd2ZvG/3Y6Rx+Fzfa4HGO+si/oPzYB1Wd3xlhTi2o7TDfKaCjYSATk/IdhzF6grxLXttX5HHE7z0+G+DVhDUzEVMBMGCSqGSIb3DQEJFTEGBAQBAAAAMDcwHzAHBgUrDgMCGgQUPJHpXU03qB48SqA5rjCWXQa5k6wEFItLd6o94H0YO74ki+flpWmRgcOY'
           ,NULL)
GO

-- Updated macro values

DECLARE @APPPOOL_SERVER_NAME uniqueidentifier
SET		@APPPOOL_SERVER_NAME = '{E955E6D8-13FA-4194-932E-DB30A802E529}'

DECLARE @RESOURCECATALOG_SHARE_SERVER uniqueidentifier
SET		@RESOURCECATALOG_SHARE_SERVER = '{679F54C2-BE5A-4B5A-A493-7CCD3A9563AC}'

DECLARE @RESOURCECATALOG_SHARE_NAME uniqueidentifier
SET		@RESOURCECATALOG_SHARE_NAME = '{45119A9D-CB7B-4E40-97A3-45383E75D0FF}'

DECLARE @SQL_LOGGING_STORE_CONNECTION_STRING uniqueidentifier
SET		@SQL_LOGGING_STORE_CONNECTION_STRING = '{3EFC03DA-A0EF-4A20-82EC-FFF55B49E248}'

DECLARE @SQL_METERING_STORE_CONNECTION_STRING uniqueidentifier
SET		@SQL_METERING_STORE_CONNECTION_STRING = '{85A9E8B5-F08B-482F-A918-F250D9CF7ADF}'

DECLARE @SQL_REQUEST_STORE_CONNECTION_STRING uniqueidentifier
SET		@SQL_REQUEST_STORE_CONNECTION_STRING = '{4A554902-F212-4E4A-9434-559FD556298D}'

DECLARE @SQL_CONFIGURATION_STORE_CONNECTION_STRING uniqueidentifier
SET		@SQL_CONFIGURATION_STORE_CONNECTION_STRING = '{DD9B37CF-BF81-4059-ABEF-B2A58CD00E2B}'

DECLARE @SQL_SERVICEHOST_STATE_CONNECTION_STRING uniqueidentifier
SET		@SQL_SERVICEHOST_STATE_CONNECTION_STRING = '{332CAB16-4E87-4E1F-8ECE-4248142D3901}'

DECLARE @CONFIGURATION_POOL_ADDRESS uniqueidentifier
SET		@CONFIGURATION_POOL_ADDRESS = '{BBF951EF-97A9-4485-96C9-AC06EC7B6545}'

DECLARE @PUBSUB_POOL_ADDRESS_MACRO_ID uniqueidentifier
SET		@PUBSUB_POOL_ADDRESS_MACRO_ID = '{94790F1D-A8E9-4AE7-969B-DC6CD698AAEE}'

DECLARE @PUBSUB_CONFIGURATION_WCF1_PORT uniqueidentifier
SET		@PUBSUB_CONFIGURATION_WCF1_PORT = '{1E64823A-B8AE-4f84-B895-17EF04703206}'

DECLARE @CONFIGURATION_SERVICE_PORT uniqueidentifier
SET		@CONFIGURATION_SERVICE_PORT = '{B34EB06F-6ABA-4B0C-AA34-D3B3A990CB09}'

DECLARE @SP_SYSTEM_WCF1_PORT uniqueidentifier
SET		@SP_SYSTEM_WCF1_PORT = '{94D5EEDE-EDB7-4995-AE17-BB93524AECD3}'

DECLARE @SP_SYSTEM_WCF2_PORT uniqueidentifier
SET		@SP_SYSTEM_WCF2_PORT = '{9C11E260-7989-41A1-B303-DCBAD3C22566}'

DECLARE @SP_DEMO_WCF1_PORT uniqueidentifier
SET		@SP_DEMO_WCF1_PORT = '{41A0B62E-0F76-4AC3-B203-35C2C536AF21}'

DECLARE @SP_DEMO_WCF2_PORT uniqueidentifier
SET		@SP_DEMO_WCF2_PORT = '{41E0DB51-A687-4C63-9A97-BFA658569CF8}'

DECLARE	@SP_LOGGING_WCF1_PORT uniqueidentifier
SET		@SP_LOGGING_WCF1_PORT = '{057D7307-4A3F-4bdf-B3E9-0217D887ABB3}'

DECLARE	@SP_LOGGING_WCF2_PORT uniqueidentifier
SET		@SP_LOGGING_WCF2_PORT = '{BF88AF52-DF50-409b-9003-36BDBD6AE501}'

DECLARE @SP_STANDARD_WCF1_PORT uniqueidentifier
SET		@SP_STANDARD_WCF1_PORT = '{D9320E81-E21E-46C4-A4BD-7768DC6A5286}'

DECLARE @SP_STANDARD_WCF2_PORT uniqueidentifier
SET		@SP_STANDARD_WCF2_PORT = '{B62A95DC-2719-4950-8808-A1E874F55D1C}'

DECLARE @SERVICEHOST_STATUS_PORT uniqueidentifier
SET		@SERVICEHOST_STATUS_PORT = '{4193C943-F057-4E3B-BE39-4E02A2C944BF}'

DECLARE @SP_SYSTEM_WCFSERVICEENDPOINT_PORT uniqueidentifier
SET		@SP_SYSTEM_WCFSERVICEENDPOINT_PORT = '{C3A721CC-BD1B-491D-9F2D-F60C92F99919}'

DECLARE @LOGGING_FILETARGET_FOLDER uniqueidentifier
SET		@LOGGING_FILETARGET_FOLDER = '{509BEB93-6302-4A82-9AF4-B0D4449BE616}'

DECLARE @LOGGING_FILENAME_LISTENER uniqueidentifier
SET		@LOGGING_FILENAME_LISTENER = '{A9B6C965-F5BB-4132-9B33-D250EF19A702}'

DECLARE @SP_DEMO_ASYNC1_QUEUE_PATH uniqueidentifier
SET		@SP_DEMO_ASYNC1_QUEUE_PATH = '{25512546-AFF0-46AF-B3BD-F56616626D7E}'

DECLARE @SP_STANDARD_ASYNC1_QUEUE_PATH uniqueidentifier
SET		@SP_STANDARD_ASYNC1_QUEUE_PATH = '{E11B2DFD-694D-4D3B-949D-ECD15306B7CB}'

DECLARE @SP_LOGGING_ASYNC1_QUEUE_PATH uniqueidentifier
SET		@SP_LOGGING_ASYNC1_QUEUE_PATH = '{0034E8CB-A4BF-47EE-9E58-6D8151F4EFC1}'

DECLARE @SP_SYSTEM_ASYNC1_QUEUE_PATH uniqueidentifier
SET		@SP_SYSTEM_ASYNC1_QUEUE_PATH = '{F11C6725-E22B-4CCE-9D11-C0A2F42E4744}'

DECLARE @LOGGING_MSMQTARGET_PATH uniqueidentifier
SET		@LOGGING_MSMQTARGET_PATH = '{BB1137A9-AE9E-450A-9A17-35E7C9E1130E}'

DECLARE	@GLOBAL_PACKAGE_STORE_LOCATION uniqueidentifier
SET		@GLOBAL_PACKAGE_STORE_LOCATION = '{AFB774F5-1B00-4845-AACE-68BA779A937D}'

DECLARE	@ROOT_GROUP_ID uniqueidentifier
SET		@ROOT_GROUP_ID = '{AE8EF33D-14D5-4fb8-9702-EBA36AE6F0A4}'

UPDATE	Active_GroupMacroValues
SET		Value = 'SBAppAZPOC'
WHERE	MacroId = @APPPOOL_SERVER_NAME

UPDATE	Active_GroupMacroValues
SET		Value = 'HOU-5007386-1L.corp.lpsvcs.com'
WHERE	MacroId = @RESOURCECATALOG_SHARE_SERVER

UPDATE	Active_GroupMacroValues
SET		Value = 'ResourceCatalogRepositoryAzure POC'
WHERE	MacroId = @RESOURCECATALOG_SHARE_NAME

UPDATE	Active_GroupMacroValues
SET		Value = 'Data Source=SQLAzurePOC; Initial Catalog=Azure POC_ServiceBusLogging; Integrated Security=False; User=JE; Password=ExchangeDev1'
WHERE	MacroId = @SQL_LOGGING_STORE_CONNECTION_STRING

UPDATE	Active_GroupMacroValues
SET		Value = 'Data Source=SQLAzurePOC; Initial Catalog=Azure POC_ServiceBusMetering; Integrated Security=False; User=JE; Password=ExchangeDev1'
WHERE	MacroId = @SQL_METERING_STORE_CONNECTION_STRING

UPDATE	Active_GroupMacroValues
SET		Value = 'Data Source=SQLAzurePOC; Initial Catalog=Azure POC_ServiceBusServiceHost; Integrated Security=False; User=JE; Password=ExchangeDev1'
WHERE	MacroId = @SQL_REQUEST_STORE_CONNECTION_STRING

UPDATE	Active_GroupMacroValues
SET		Value = 'Data Source=SQLAzurePOC; Initial Catalog=Azure POC_ServiceBusConfiguration; Integrated Security=False; User=JE; Password=ExchangeDev1'
WHERE	MacroId = @SQL_CONFIGURATION_STORE_CONNECTION_STRING

UPDATE	Active_GroupMacroValues
SET		Value = 'Data Source=SQLAzurePOC; Initial Catalog=Azure POC_ServiceBusServiceHost; Integrated Security=False; User=JE; Password=ExchangeDev1'
WHERE	MacroId = @SQL_SERVICEHOST_STATE_CONNECTION_STRING

UPDATE	Active_GroupMacroValues
SET		Value = 'SBConfig'
WHERE	MacroId = @CONFIGURATION_POOL_ADDRESS

UPDATE	Active_GroupMacroValues
SET		Value = 'SBConfig'
WHERE	MacroId = @PUBSUB_POOL_ADDRESS_MACRO_ID

UPDATE	Active_GroupMacroValues
SET		Value = '50103'
WHERE	MacroId = @SP_SYSTEM_WCF1_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50104'
WHERE	MacroId = @SP_SYSTEM_WCF2_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50107'
WHERE	MacroId = @SP_DEMO_WCF1_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50108'
WHERE	MacroId = @SP_DEMO_WCF2_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50109'
WHERE	MacroId = @SP_STANDARD_WCF1_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50110'
WHERE	MacroId = @SP_STANDARD_WCF2_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50105'
WHERE	MacroId = @SP_LOGGING_WCF1_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50106'
WHERE	MacroId = @SP_LOGGING_WCF2_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50195'
WHERE	MacroId = @SERVICEHOST_STATUS_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50199'
WHERE	MacroId = @SP_SYSTEM_WCFSERVICEENDPOINT_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50101'
WHERE	MacroId = @PUBSUB_CONFIGURATION_WCF1_PORT

UPDATE	Active_GroupMacroValues
SET		Value = '50102'
WHERE	MacroId = @CONFIGURATION_SERVICE_PORT

UPDATE	Active_GroupMacroValues
SET		Value = 'C:\ServiceBus\LoggingAzure POC'
WHERE	MacroId = @LOGGING_FILETARGET_FOLDER
		AND
		Value Like '_:\ServiceBus\Logging'
		
UPDATE	Active_GroupMacroValues
SET		Value = 'C:\ServiceBus\LoggingAzure POC\ServiceHost_Service.txt'
WHERE	MacroId = @LOGGING_FILENAME_LISTENER
		AND
		Value Like '_:\ServiceBus\Logging\ServiceHost_Service.txt'
		
UPDATE	Active_GroupMacroValues
SET		Value = 'C:\ServiceBus\LoggingAzure POC\AdministrativeConsole.txt'
WHERE	MacroId = @LOGGING_FILENAME_LISTENER
		AND
		Value Like '_:\ServiceBus\Logging\AdministrativeConsole.txt'
		
UPDATE	Active_GroupMacroValues
SET		Value = 'C:\ServiceBus\LoggingAzure POC\RunTestCases.txt'
WHERE	MacroId = @LOGGING_FILENAME_LISTENER
		AND
		Value Like '_:\ServiceBus\Logging\RunTestCases.txt'

UPDATE	Active_GroupMacroValues
SET		Value = 'C:\ServiceBus\LoggingAzure POC\ServiceBus_Default.txt'
WHERE	MacroId = @LOGGING_FILENAME_LISTENER
		AND
		Value Like '_:\ServiceBus\Logging\ServiceBus_Default.txt'
		
UPDATE	Active_GroupMacroValues
SET		Value = '.\Private$\ServiceBus.Demo.AsyncRequestQueue1.Azure POC'
WHERE	MacroId = @SP_DEMO_ASYNC1_QUEUE_PATH
		AND
		Value = '.\Private$\ServiceBus.Demo.AsyncRequestQueue1'

UPDATE	Active_GroupMacroValues
SET		Value = '.\Private$\ServiceBus.Standard.AsyncRequestQueue1.Azure POC'
WHERE	MacroId = @SP_STANDARD_ASYNC1_QUEUE_PATH
		AND
		Value = '.\Private$\ServiceBus.Standard.AsyncRequestQueue1'

UPDATE	Active_GroupMacroValues
SET		Value = '.\Private$\ServiceBus.Logging.AsyncRequestQueue1.Azure POC'
WHERE	MacroId = @SP_LOGGING_ASYNC1_QUEUE_PATH
		AND
		Value = '.\Private$\ServiceBus.Logging.AsyncRequestQueue1'

UPDATE	Active_GroupMacroValues
SET		Value = '.\Private$\ServiceBus.System.AsyncRequestQueue1.Azure POC'
WHERE	MacroId = @SP_SYSTEM_ASYNC1_QUEUE_PATH
		AND
		Value = '.\Private$\ServiceBus.System.AsyncRequestQueue1'

UPDATE	Active_GroupMacroValues
SET		Value = '.\Private$\ServiceBus.logging.Azure POC'
WHERE	MacroId = @LOGGING_MSMQTARGET_PATH
		AND
		Value = '.\Private$\ServiceBus.logging'

UPDATE	Active_GroupMacroValues
SET		Value = 'localhost:80/GlobalPackageStore'
WHERE	MacroId = @GLOBAL_PACKAGE_STORE_LOCATION

UPDATE	Active_Groups
SET		Name = 'Azure POC'
WHERE	Id = @ROOT_GROUP_ID

